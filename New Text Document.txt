# Define the minimizer function
    @boundscheck(False)
    @wraparound(False)
    @cython.exceptval(check=False)
    @cython.nonecheck(False)
    @cython.ccall
    @cython.inline
    cdef int minimizer(self, int curDepth, int depthLimit, int alpha, int beta, list beta_list_og, list beta_moves_list):
        
        # If the depth limit is reached, evaluate the current position
        if curDepth >= depthLimit:            
            self.numIterations += 1            
            return evaluate_board(self.pgnBoard,self.zobrist)
            # return self.quiescenceMin(alpha, beta, 0)
        
        # Define the lowest score with respect to the number of moves played
        cdef int lowestScore = 9999999 - len(self.pgnBoard.move_stack)
        
        # Define variables to hold the current move, score and index
        cdef int score
        cdef object move                
        cdef int count = 0
        
        # Define and initialize the razoring threshold
        cdef int razorThreshold
        if (depthLimit == 4):
            razorThreshold = max (int(1000 * .75** (depthLimit - 5)), 200) 
        else:
            razorThreshold = max (int(750 * .75** (depthLimit - 5)), 50)
            
        # Define variable to hold the zobrist hash for the current board state
        cdef uint64_t curHash = self.zobrist
        
        # Define lists to hold the current scores and copy of the expected scores
        cdef list cur_beta_list = []
        cdef list beta_list = beta_list_og.copy()
        
        # Initialize bitmasks for the current board state
        cdef uint64_t pawns = self.pgnBoard.pawns
        cdef uint64_t knights = self.pgnBoard.knights
        cdef uint64_t bishops = self.pgnBoard.bishops
        cdef uint64_t rooks = self.pgnBoard.rooks
        cdef uint64_t queens = self.pgnBoard.queens
        cdef uint64_t kings = self.pgnBoard.kings
        
        cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
        cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]
        cdef uint64_t occupied = self.pgnBoard.occupied   
        
        # Define variables to hold information for zobrist hashing
        cdef int promotion = 0
        cdef bint isCapture
        
        # Variable to hold full length of the list
        cdef int length = 0
        
        # Check for the second recursive depth to use the stored moves list instead of generating it
        cdef list moves_list
        if (curDepth == 1):
            moves_list = beta_moves_list.copy()
            quicksort_ascending_wrapper(beta_list, moves_list)
            self.beta_move_list.append(moves_list)
            length = len(moves_list)
           
        # Check for the second recursive depth
        if curDepth == 1:
            for move in moves_list:
                
                # Razoring
                if (not(beta_list[count] == None)):
                    if (beta_list[count] - beta > razorThreshold):
                        count+=1
                        cur_beta_list.append(None)
                        continue
                
                # Check if the move is a promoting move
                if (move.promotion):
                    promotion = move.promotion
                else:
                    promotion = 0
                
                # Acquire the zobrist hash for the new position if the given move was made
                isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))
                updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)
                
                # Push the given move and call the maximizer
                self.pgnBoard.push(move)
                score = self.maximizer(curDepth + 1, depthLimit, alpha, beta)
                
                # Undo the move and reset the zobrist hash
                self.pgnBoard.pop()
                self.zobrist = curHash
                
                # ** Code for testing purposes **
                
                if (self.pgnBoard == chess.Board("r4rk1/p2nqppp/1p1bpn2/2p5/2PPPP2/2NB4/P1Q2P1P/R1B2RK1 w - - 0 14"")):         
                    # print(moves_list)
                    print ("MIN: ",score, move, alpha, beta, lowestScore)
                
                # if (self.pgnBoard == chess.Board("1r3rk1/p1p4p/2p5/3p1pp1/8/1P5P/P1PBBK2/RN6 w - - 0 19")):
                #     print ("MIN2: ",score, move, alpha, beta)
                
                # if (self.pgnBoard == chess.Board("5rk1/p1p4p/2p5/3p1pB1/8/1r5P/P1P1BK2/RN6 w - - 0 20")):
                #     print ("MIN3: ",score, move, alpha, beta)    
                
                # Store the move scores           
                cur_beta_list.append(score)
                    
                # Find the lowest score and beta
                if score < lowestScore:
                    lowestScore = score

                beta = min(beta, lowestScore)
                count+=1
                
                if beta <= alpha:
                      
                    # Fill up the remaining list to capacity
                    for i in range(length - count):
                        cur_beta_list.append(None)
                    self.beta_list.append(cur_beta_list)
                    return score
            
            # Check if no moves are available, inidicating a game ending move was made previously
            if (lowestScore == 9999999 - len(self.pgnBoard.move_stack)):            
                self.numIterations += 1

                # Fill up the remaining list to capacity
                for i in range(length - count):
                    cur_beta_list.append(None)
                self.beta_list.append(cur_beta_list)
                
                if self.pgnBoard.is_checkmate():
                    return 100000000
                else:
                    return min(beta,lowestScore)
           
            # Fill up the remaining list to capacity
            for i in range(length - count):
                cur_beta_list.append(None)
            self.beta_list.append(cur_beta_list)    
        else: # If not the second recursive depth, take advantage of the yielding feature to increase speed
            for move in self.reorder_capture_moves(chess.BB_ALL, self.pgnBoard):
                
                # Check if the move is a promoting move
                if (move.promotion):
                    promotion = move.promotion
                else:
                    promotion = 0
                
                # Acquire the zobrist hash for the new position if the given move was made
                isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))
                updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)
                
                # Push the given move and call the maximizer
                self.pgnBoard.push(move)
                score = self.maximizer(curDepth + 1, depthLimit, alpha, beta)
                
                # Undo the move and reset the zobrist hash
                self.pgnBoard.pop()
                self.zobrist = curHash
                
                # ** Code for testing purposes **
                
                # if (self.pgnBoard == chess.Board("r4rk1/p2nqppp/1p1bpn2/2p5/2PPPP2/2NB4/P1Q2P1P/R1B2RK1 w - - 0 14")):         
                #     # print(moves_list)
                #     print ("MIN: ",score, move, alpha, beta, lowestScore)
                
                # if (self.pgnBoard == chess.Board("1r3rk1/p1p4p/2p5/3p1pp1/8/1P5P/P1PBBK2/RN6 w - - 0 19")):
                #     print ("MIN2: ",score, move, alpha, beta)
                
                # if (self.pgnBoard == chess.Board("5rk1/p1p4p/2p5/3p1pB1/8/1r5P/P1P1BK2/RN6 w - - 0 20")):
                #     print ("MIN3: ",score, move, alpha, beta)    
                
                    
                # Find the lowest score and beta
                if score < lowestScore:
                    lowestScore = score

                beta = min(beta, lowestScore)
                count+=1
                
                if beta <= alpha:                    
                    return score
            
            # Check if no moves are available, inidicating a game ending move was made previously
            if (lowestScore == 9999999 - len(self.pgnBoard.move_stack)):            
                self.numIterations += 1
                
                if self.pgnBoard.is_checkmate():
                    return 100000000
                else:
                    return min(beta,lowestScore)
               
        return lowestScore