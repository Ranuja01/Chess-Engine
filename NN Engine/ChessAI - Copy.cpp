/* Generated by Cython 0.29.36 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "NPY_NO_DEPRECATED_API",
                "NPY_1_7_API_VERSION"
            ]
        ],
        "depends": [
            "/home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/core/include/numpy/arrayscalars.h",
            "/home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/core/include/numpy/ndarrayobject.h",
            "/home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/core/include/numpy/ndarraytypes.h",
            "/home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/core/include/numpy/ufuncobject.h",
            "cpp_bitboard.h"
        ],
        "extra_compile_args": [
            "-Ofast",
            "-march=native",
            "-ffast-math",
            "-fopenmp",
            "-funroll-loops",
            "-flto",
            "-fomit-frame-pointer",
            "-std=c++20",
            "-fno-math-errno",
            "-fno-trapping-math",
            "-fassociative-math",
            "-fno-signed-zeros",
            "-fno-rounding-math",
            "-ffp-contract=fast"
        ],
        "extra_link_args": [
            "-flto=16",
            "-fopenmp"
        ],
        "include_dirs": [
            "/home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/core/include"
        ],
        "language": "c++",
        "name": "ChessAI",
        "sources": [
            "ChessAI - Copy.pyx",
            "cpp_bitboard.cpp"
        ]
    },
    "module_name": "ChessAI"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_36"
#define CYTHON_HEX_VERSION 0x001D24F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS ((PY_VERSION_HEX >= 0x030600B1) && (PY_VERSION_HEX < 0x030C00A5))
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__ChessAI
#define __PYX_HAVE_API__ChessAI
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string>
#include "stdint.h"
#include "cpp_bitboard.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "ChessAI - Copy.pyx",
  "stringsource",
  "array.pxd",
  "__init__.pxd",
  "type.pxd",
};

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":688
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":689
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":690
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":695
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":696
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":697
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":702
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":703
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":712
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":713
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":716
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":718
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":719
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":723
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
#ifndef _ARRAYARRAY_H
struct arrayobject;
typedef struct arrayobject arrayobject;
#endif
struct __pyx_obj_7ChessAI_ChessAI;
struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves;
struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":725
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":726
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":727
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":729
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_t_7ChessAI_MoveData;

/* "ChessAI - Copy.pyx":79
 * 
 * # Create struct to hold information regarding the chosen move by the engine
 * cdef struct MoveData:             # <<<<<<<<<<<<<<
 *     int a
 *     int b
 */
struct __pyx_t_7ChessAI_MoveData {
  int a;
  int b;
  int c;
  int d;
  int promotion;
  int score;
};

/* "ChessAI - Copy.pyx":107
 * # Define class for the chess engine
 * @cython.cclass
 * cdef class ChessAI:             # <<<<<<<<<<<<<<
 * 
 *     # Member variables for neural networks
 */
struct __pyx_obj_7ChessAI_ChessAI {
  PyObject_HEAD
  struct __pyx_vtabstruct_7ChessAI_ChessAI *__pyx_vtab;
  PyObject *blackModel;
  PyObject *whiteModel;
  PyObject *pgnBoard;
  int numMove;
  int numIterations;
  PyObject *move_times;
  uint64_t zobrist;
  PyObject *moves_list;
  PyObject *alpha_list;
  PyObject *beta_list;
  PyObject *beta_move_list;
  int time_limit;
  int quiescenceDepth;
};


/* "ChessAI - Copy.pyx":1393
 *         # quicksort(alpha_list, moves_list, beta_list, 0, len(alpha_list) - 1)
 *         # return moves_list,alpha_list,beta_list
 *     def reorder_capture_moves(self, uint64_t mask, object board) -> Iterator[chess.Move]:             # <<<<<<<<<<<<<<
 * 
 *         cdef object move
 */
struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves {
  PyObject_HEAD
  PyObject *__pyx_v_board;
  uint64_t __pyx_v_mask;
  PyObject *__pyx_v_move;
  struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "ChessAI - Copy.pyx":1403
 *                 yield move
 * 
 *     def non_quiescence_moves(self, object board) -> Iterator[chess.Move]:             # <<<<<<<<<<<<<<
 * 
 *         cdef object move
 */
struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves {
  PyObject_HEAD
  PyObject *__pyx_v_board;
  PyObject *__pyx_v_move;
  struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};



/* "ChessAI - Copy.pyx":107
 * # Define class for the chess engine
 * @cython.cclass
 * cdef class ChessAI:             # <<<<<<<<<<<<<<
 * 
 *     # Member variables for neural networks
 */

struct __pyx_vtabstruct_7ChessAI_ChessAI {
  struct __pyx_t_7ChessAI_MoveData (*opening_book)(struct __pyx_obj_7ChessAI_ChessAI *, PyObject *, PyObject *);
  struct __pyx_t_7ChessAI_MoveData (*alphaBeta)(struct __pyx_obj_7ChessAI_ChessAI *, int, int, double);
  int (*maximizer)(struct __pyx_obj_7ChessAI_ChessAI *, int, int, int, int);
  int (*minimizer)(struct __pyx_obj_7ChessAI_ChessAI *, int, int, int, int, PyObject *, PyObject *);
  int (*quiescenceMax)(struct __pyx_obj_7ChessAI_ChessAI *, int, int, int);
  int (*quiescenceMin)(struct __pyx_obj_7ChessAI_ChessAI *, int, int, int);
  PyObject *(*preMinimizer)(struct __pyx_obj_7ChessAI_ChessAI *, int, int, int, int);
  PyObject *(*reorder_legal_moves)(struct __pyx_obj_7ChessAI_ChessAI *, int, int, PyObject *);
};
static struct __pyx_vtabstruct_7ChessAI_ChessAI *__pyx_vtabptr_7ChessAI_ChessAI;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* pop.proto */
static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L);
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L);
#define __Pyx_PyObject_Pop(L) (likely(PyList_CheckExact(L)) ?\
    __Pyx_PyList_Pop(L) : __Pyx__PyObject_Pop(L))
#else
#define __Pyx_PyList_Pop(L)  __Pyx__PyObject_Pop(L)
#define __Pyx_PyObject_Pop(L)  __Pyx__PyObject_Pop(L)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* GetItemIntUnicode.proto */
#define __Pyx_GetItemInt_Unicode(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Unicode_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "string index out of range"), (Py_UCS4)-1))
static CYTHON_INLINE Py_UCS4 __Pyx_GetItemInt_Unicode_Fast(PyObject* ustring, Py_ssize_t i,
                                                           int wraparound, int boundscheck);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* PyIntFromDouble.proto */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value);
#else
#define __Pyx_PyInt_FromDouble(value) PyLong_FromDouble(value)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* SliceObject.proto */
#define __Pyx_PyObject_DelSlice(obj, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)\
    __Pyx_PyObject_SetSlice(obj, (PyObject*)NULL, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(
        PyObject* obj, PyObject* value, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* pop_index.proto */
static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix);
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix);
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix);
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (likely(PyList_CheckExact(L) && __Pyx_fits_Py_ssize_t(ix, type, is_signed))) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    __Pyx_fits_Py_ssize_t(ix, type, is_signed) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#else
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)\
    __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
        __Pyx__PyObject_PopIndex(L, py_ix))
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_0_29_36
#define __PYX_HAVE_RT_ImportType_proto_0_29_36
#if __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_36(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_36(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_0_29_36 {
   __Pyx_ImportType_CheckSize_Error_0_29_36 = 0,
   __Pyx_ImportType_CheckSize_Warn_0_29_36 = 1,
   __Pyx_ImportType_CheckSize_Ignore_0_29_36 = 2
};
static PyTypeObject *__Pyx_ImportType_0_29_36(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_36 check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* ArrayAPI.proto */
#ifndef _ARRAYARRAY_H
#define _ARRAYARRAY_H
typedef struct arraydescr {
    int typecode;
    int itemsize;
    PyObject * (*getitem)(struct arrayobject *, Py_ssize_t);
    int (*setitem)(struct arrayobject *, Py_ssize_t, PyObject *);
#if PY_MAJOR_VERSION >= 3
    char *formats;
#endif
} arraydescr;
struct arrayobject {
    PyObject_HEAD
    Py_ssize_t ob_size;
    union {
        char *ob_item;
        float *as_floats;
        double *as_doubles;
        int *as_ints;
        unsigned int *as_uints;
        unsigned char *as_uchars;
        signed char *as_schars;
        char *as_chars;
        unsigned long *as_ulongs;
        long *as_longs;
#if PY_MAJOR_VERSION >= 3
        unsigned long long *as_ulonglongs;
        long long *as_longlongs;
#endif
        short *as_shorts;
        unsigned short *as_ushorts;
        Py_UNICODE *as_pyunicodes;
        void *as_voidptr;
    } data;
    Py_ssize_t allocated;
    struct arraydescr *ob_descr;
    PyObject *weakreflist;
#if PY_MAJOR_VERSION >= 3
        int ob_exports;
#endif
};
#ifndef NO_NEWARRAY_INLINE
static CYTHON_INLINE PyObject * newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr) {
    arrayobject *op;
    size_t nbytes;
    if (size < 0) {
        PyErr_BadInternalCall();
        return NULL;
    }
    nbytes = size * descr->itemsize;
    if (nbytes / descr->itemsize != (size_t)size) {
        return PyErr_NoMemory();
    }
    op = (arrayobject *) type->tp_alloc(type, 0);
    if (op == NULL) {
        return NULL;
    }
    op->ob_descr = descr;
    op->allocated = size;
    op->weakreflist = NULL;
    __Pyx_SET_SIZE(op, size);
    if (size <= 0) {
        op->data.ob_item = NULL;
    }
    else {
        op->data.ob_item = PyMem_NEW(char, nbytes);
        if (op->data.ob_item == NULL) {
            Py_DECREF(op);
            return PyErr_NoMemory();
        }
    }
    return (PyObject *) op;
}
#else
PyObject* newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr);
#endif
static CYTHON_INLINE int resize(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    PyMem_Resize(items, char, (size_t)(n * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    __Pyx_SET_SIZE(self, n);
    self->allocated = n;
    return 0;
}
static CYTHON_INLINE int resize_smart(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    Py_ssize_t newsize;
    if (n < self->allocated && n*4 > self->allocated) {
        __Pyx_SET_SIZE(self, n);
        return 0;
    }
    newsize = n + (n / 2) + 1;
    if (newsize <= n) {
        PyErr_NoMemory();
        return -1;
    }
    PyMem_Resize(items, char, (size_t)(newsize * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    __Pyx_SET_SIZE(self, n);
    self->allocated = newsize;
    return 0;
}
#endif

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE uint8_t __Pyx_PyInt_As_uint8_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static struct __pyx_t_7ChessAI_MoveData __pyx_f_7ChessAI_7ChessAI_opening_book(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_curDepth, CYTHON_UNUSED PyObject *__pyx_v_depthLimit); /* proto*/
static struct __pyx_t_7ChessAI_MoveData __pyx_f_7ChessAI_7ChessAI_alphaBeta(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_curDepth, int __pyx_v_depthLimit, double __pyx_v_t0); /* proto*/
static int __pyx_f_7ChessAI_7ChessAI_maximizer(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_curDepth, int __pyx_v_depthLimit, int __pyx_v_alpha, int __pyx_v_beta); /* proto*/
static int __pyx_f_7ChessAI_7ChessAI_minimizer(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_curDepth, int __pyx_v_depthLimit, int __pyx_v_alpha, int __pyx_v_beta, PyObject *__pyx_v_beta_list_og, PyObject *__pyx_v_beta_moves_list); /* proto*/
static int __pyx_f_7ChessAI_7ChessAI_quiescenceMax(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_alpha, int __pyx_v_beta, int __pyx_v_quiescenceDepth); /* proto*/
static int __pyx_f_7ChessAI_7ChessAI_quiescenceMin(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_alpha, int __pyx_v_beta, int __pyx_v_quiescenceDepth); /* proto*/
static PyObject *__pyx_f_7ChessAI_7ChessAI_preMinimizer(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_curDepth, int __pyx_v_depthLimit, int __pyx_v_alpha, int __pyx_v_beta); /* proto*/
static PyObject *__pyx_f_7ChessAI_7ChessAI_reorder_legal_moves(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_alpha, int __pyx_v_beta, PyObject *__pyx_v_depthLimit); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'array' */

/* Module declarations from 'cpython.array' */
static PyTypeObject *__pyx_ptype_7cpython_5array_array = 0;
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *, char *, Py_ssize_t); /*proto*/

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'ChessAI' */
static PyTypeObject *__pyx_ptype_7ChessAI_ChessAI = 0;
static PyTypeObject *__pyx_ptype_7ChessAI___pyx_scope_struct__reorder_capture_moves = 0;
static PyTypeObject *__pyx_ptype_7ChessAI___pyx_scope_struct_1_non_quiescence_moves = 0;
static uint64_t __pyx_v_7ChessAI_prevKings;
static int __pyx_v_7ChessAI_blackCastledIndex;
static int __pyx_v_7ChessAI_whiteCastledIndex;
static PyObject *__pyx_v_7ChessAI_white_ksc = 0;
static PyObject *__pyx_v_7ChessAI_white_qsc = 0;
static PyObject *__pyx_v_7ChessAI_black_ksc = 0;
static PyObject *__pyx_v_7ChessAI_black_qsc = 0;
static int __pyx_v_7ChessAI_values[7];
static void __pyx_f_7ChessAI_quicksort(PyObject *, PyObject *, PyObject *, PyObject *, int, int); /*proto*/
static void __pyx_f_7ChessAI_quicksort_ascending_wrapper(PyObject *, PyObject *); /*proto*/
static void __pyx_f_7ChessAI_quicksort_wrapper(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *); /*proto*/
static void __pyx_f_7ChessAI_quicksort_ascending(PyObject *, PyObject *, int, int); /*proto*/
static int __pyx_f_7ChessAI_evaluate_board(PyObject *, uint64_t); /*proto*/
#define __Pyx_MODULE_NAME "ChessAI"
extern int __pyx_module_is_main_ChessAI;
int __pyx_module_is_main_ChessAI = 0;

/* Implementation of 'ChessAI' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_chr;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_np[] = "np";
static const char __pyx_k_tf[] = "tf";
static const char __pyx_k_chr[] = "chr";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_ply[] = "ply";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_uci[] = "uci";
static const char __pyx_k_Best[] = "Best: ";
static const char __pyx_k_Move[] = "Move: ";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_e1c1[] = "e1c1";
static const char __pyx_k_e1g1[] = "e1g1";
static const char __pyx_k_e8c8[] = "e8c8";
static const char __pyx_k_e8g8[] = "e8g8";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_json[] = "json";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mask[] = "mask";
static const char __pyx_k_move[] = "move";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_njit[] = "njit";
static const char __pyx_k_peek[] = "peek";
static const char __pyx_k_push[] = "push";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_turn[] = "turn";
static const char __pyx_k_Board[] = "Board";
static const char __pyx_k_Learn[] = ", Learn: ";
static const char __pyx_k_Model[] = "Model";
static const char __pyx_k_board[] = "board";
static const char __pyx_k_chess[] = "chess";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_kings[] = "kings";
static const char __pyx_k_learn[] = "learn";
static const char __pyx_k_numba[] = "numba";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_pawns[] = "pawns";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_rooks[] = "rooks";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_timer[] = "timer";
static const char __pyx_k_BB_ALL[] = "BB_ALL";
static const char __pyx_k_Move_2[] = "Move";
static const char __pyx_k_Weight[] = ", Weight: ";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_joblib[] = "joblib";
static const char __pyx_k_queens[] = "queens";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_timeit[] = "timeit";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_weight[] = "weight";
static const char __pyx_k_ChessAI[] = "ChessAI";
static const char __pyx_k_bishops[] = "bishops";
static const char __pyx_k_delayed[] = "delayed";
static const char __pyx_k_knights[] = "knights";
static const char __pyx_k_marshal[] = "marshal";
static const char __pyx_k_Iterator[] = "Iterator";
static const char __pyx_k_Parallel[] = "Parallel";
static const char __pyx_k_curDepth[] = "curDepth";
static const char __pyx_k_find_all[] = "find_all";
static const char __pyx_k_from_uci[] = "from_uci";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_occupied[] = "occupied";
static const char __pyx_k_polyglot[] = "polyglot";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_Best_Move[] = "Best Move: ";
static const char __pyx_k_M11_2_bin[] = "M11.2.bin";
static const char __pyx_k_Num_Moves[] = "Num Moves: ";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_functools[] = "functools";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_lru_cache[] = "lru_cache";
static const char __pyx_k_promotion[] = "promotion";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_to_square[] = "to_square";
static const char __pyx_k_Evaluation[] = "Evaluation: ";
static const char __pyx_k_Time_Taken[] = "Time Taken: ";
static const char __pyx_k_depthLimit[] = "depthLimit";
static const char __pyx_k_move_stack[] = "move_stack";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_tensorflow[] = "tensorflow";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_black_model[] = "black_model";
static const char __pyx_k_from_square[] = "from_square";
static const char __pyx_k_gives_check[] = "gives_check";
static const char __pyx_k_inititalize[] = "inititalize";
static const char __pyx_k_is_castling[] = "is_castling";
static const char __pyx_k_occupied_co[] = "occupied_co";
static const char __pyx_k_open_reader[] = "open_reader";
static const char __pyx_k_white_model[] = "white_model";
static const char __pyx_k_Cython_Chess[] = "Cython_Chess";
static const char __pyx_k_TRYING_DEPTH[] = "TRYING DEPTH: ";
static const char __pyx_k_is_checkmate[] = "is_checkmate";
static const char __pyx_k_is_stalemate[] = "is_stalemate";
static const char __pyx_k_BLACK_CASTLED[] = "BLACK CASTLED";
static const char __pyx_k_WHITE_CASTLED[] = "WHITE CASTLED";
static const char __pyx_k_default_timer[] = "default_timer";
static const char __pyx_k_is_en_passant[] = "is_en_passant";
static const char __pyx_k_is_repetition[] = "is_repetition";
static const char __pyx_k_piece_type_at[] = "piece_type_at";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_chess_polyglot[] = "chess.polyglot";
static const char __pyx_k_moveSchema_pb2[] = "moveSchema_pb2";
static const char __pyx_k_multiprocessing[] = "multiprocessing";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_Positions_Analyzed[] = "Positions Analyzed: ";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_BLACK_CASTLING_LOST[] = "BLACK CASTLING LOST";
static const char __pyx_k_WHITE_CASTLING_LOST[] = "WHITE CASTLING LOST";
static const char __pyx_k_has_castling_rights[] = "has_castling_rights";
static const char __pyx_k_Evaluation_Book_Move[] = "Evaluation: Book Move";
static const char __pyx_k_generate_legal_moves[] = "generate_legal_moves";
static const char __pyx_k_non_quiescence_moves[] = "non_quiescence_moves";
static const char __pyx_k_reorder_capture_moves[] = "reorder_capture_moves";
static const char __pyx_k_generate_legal_captures[] = "generate_legal_captures";
static const char __pyx_k_tensorflow_keras_models[] = "tensorflow.keras.models";
static const char __pyx_k_ChessAI_non_quiescence_moves[] = "ChessAI.non_quiescence_moves";
static const char __pyx_k_Average_Static_Analysis_Speed[] = "Average Static Analysis Speed: ";
static const char __pyx_k_ChessAI_reorder_capture_moves[] = "ChessAI.reorder_capture_moves";
static const char __pyx_k_Created_on_Tue_Jul_30_16_32_26[] = "\nCreated on Tue Jul 30 16:32:26 2024\n\n@author: Kumodth\n";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_ChessAI_opening_book_locals_lamb[] = "ChessAI.opening_book.<locals>.<lambda>";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static PyObject *__pyx_kp_u_Average_Static_Analysis_Speed;
static PyObject *__pyx_n_s_BB_ALL;
static PyObject *__pyx_kp_u_BLACK_CASTLED;
static PyObject *__pyx_kp_u_BLACK_CASTLING_LOST;
static PyObject *__pyx_kp_u_Best;
static PyObject *__pyx_kp_u_Best_Move;
static PyObject *__pyx_n_s_Board;
static PyObject *__pyx_n_s_ChessAI;
static PyObject *__pyx_n_s_ChessAI_non_quiescence_moves;
static PyObject *__pyx_n_s_ChessAI_opening_book_locals_lamb;
static PyObject *__pyx_n_s_ChessAI_reorder_capture_moves;
static PyObject *__pyx_n_s_Cython_Chess;
static PyObject *__pyx_kp_u_Evaluation;
static PyObject *__pyx_kp_u_Evaluation_Book_Move;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_Iterator;
static PyObject *__pyx_kp_u_Learn;
static PyObject *__pyx_kp_u_M11_2_bin;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_s_Model;
static PyObject *__pyx_kp_u_Move;
static PyObject *__pyx_n_s_Move_2;
static PyObject *__pyx_kp_u_Num_Moves;
static PyObject *__pyx_n_s_Parallel;
static PyObject *__pyx_kp_u_Positions_Analyzed;
static PyObject *__pyx_kp_u_TRYING_DEPTH;
static PyObject *__pyx_kp_u_Time_Taken;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_WHITE_CASTLED;
static PyObject *__pyx_kp_u_WHITE_CASTLING_LOST;
static PyObject *__pyx_kp_u_Weight;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_bishops;
static PyObject *__pyx_n_s_black_model;
static PyObject *__pyx_n_s_board;
static PyObject *__pyx_n_s_chess;
static PyObject *__pyx_n_s_chess_polyglot;
static PyObject *__pyx_n_s_chr;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_curDepth;
static PyObject *__pyx_n_s_default_timer;
static PyObject *__pyx_n_s_delayed;
static PyObject *__pyx_n_s_depthLimit;
static PyObject *__pyx_n_u_e1c1;
static PyObject *__pyx_n_u_e1g1;
static PyObject *__pyx_n_u_e8c8;
static PyObject *__pyx_n_u_e8g8;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_find_all;
static PyObject *__pyx_n_s_from_square;
static PyObject *__pyx_n_s_from_uci;
static PyObject *__pyx_n_s_functools;
static PyObject *__pyx_n_s_generate_legal_captures;
static PyObject *__pyx_n_s_generate_legal_moves;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_gives_check;
static PyObject *__pyx_n_s_has_castling_rights;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_inititalize;
static PyObject *__pyx_n_s_is_castling;
static PyObject *__pyx_n_s_is_checkmate;
static PyObject *__pyx_n_s_is_en_passant;
static PyObject *__pyx_n_s_is_repetition;
static PyObject *__pyx_n_s_is_stalemate;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_joblib;
static PyObject *__pyx_n_s_json;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_kings;
static PyObject *__pyx_n_s_knights;
static PyObject *__pyx_n_s_learn;
static PyObject *__pyx_n_s_lru_cache;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_marshal;
static PyObject *__pyx_n_s_mask;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_move;
static PyObject *__pyx_n_s_moveSchema_pb2;
static PyObject *__pyx_n_s_move_stack;
static PyObject *__pyx_n_s_multiprocessing;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_njit;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_non_quiescence_moves;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numba;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_occupied;
static PyObject *__pyx_n_s_occupied_co;
static PyObject *__pyx_n_s_open_reader;
static PyObject *__pyx_n_s_pawns;
static PyObject *__pyx_n_s_peek;
static PyObject *__pyx_n_s_piece_type_at;
static PyObject *__pyx_n_s_ply;
static PyObject *__pyx_n_s_polyglot;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_promotion;
static PyObject *__pyx_n_s_push;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_queens;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_reorder_capture_moves;
static PyObject *__pyx_n_s_rooks;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_tensorflow;
static PyObject *__pyx_n_s_tensorflow_keras_models;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_tf;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_timeit;
static PyObject *__pyx_n_s_timer;
static PyObject *__pyx_n_s_to_square;
static PyObject *__pyx_n_s_turn;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_n_s_uci;
static PyObject *__pyx_n_s_weight;
static PyObject *__pyx_n_s_white_model;
static int __pyx_pf_7ChessAI_7ChessAI___cinit__(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, PyObject *__pyx_v_black_model, PyObject *__pyx_v_white_model, PyObject *__pyx_v_board); /* proto */
static PyObject *__pyx_pf_7ChessAI_7ChessAI_2setWhiteCastledIndex(CYTHON_UNUSED struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_7ChessAI_7ChessAI_4setBlackCastledIndex(CYTHON_UNUSED struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_7ChessAI_7ChessAI_6alphaBetaWrapper(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_curDepth, int __pyx_v_depthLimit); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_e); /* proto */
static PyObject *__pyx_pf_7ChessAI_7ChessAI_8ev(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, PyObject *__pyx_v_board); /* proto */
static PyObject *__pyx_pf_7ChessAI_7ChessAI_10reorder_capture_moves(CYTHON_UNUSED struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, uint64_t __pyx_v_mask, PyObject *__pyx_v_board); /* proto */
static PyObject *__pyx_pf_7ChessAI_7ChessAI_13non_quiescence_moves(CYTHON_UNUSED struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, PyObject *__pyx_v_board); /* proto */
static PyObject *__pyx_pf_7ChessAI_7ChessAI_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ChessAI_7ChessAI_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags); /* proto */
static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_7ChessAI_ChessAI(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7ChessAI___pyx_scope_struct__reorder_capture_moves(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7ChessAI___pyx_scope_struct_1_non_quiescence_moves(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyList_Type_copy = {0, &__pyx_n_s_copy, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyList_Type_pop = {0, &__pyx_n_s_pop, 0, 0, 0};
static PyObject *__pyx_float_2_5;
static PyObject *__pyx_float_5_0;
static PyObject *__pyx_float_5_5;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_30;
static PyObject *__pyx_int_50;
static PyObject *__pyx_int_75;
static PyObject *__pyx_int_100000000;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
/* Late includes */

/* "ChessAI - Copy.pyx":139
 * 
 *     # Constructor for chess engine
 *     def __cinit__(self, object black_model, object white_model, object board):             # <<<<<<<<<<<<<<
 * 
 *         # Initialize member variables
 */

/* Python wrapper */
static int __pyx_pw_7ChessAI_7ChessAI_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7ChessAI_7ChessAI_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_black_model = 0;
  PyObject *__pyx_v_white_model = 0;
  PyObject *__pyx_v_board = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_black_model,&__pyx_n_s_white_model,&__pyx_n_s_board,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_black_model)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_white_model)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 139, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_board)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 139, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 139, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_black_model = values[0];
    __pyx_v_white_model = values[1];
    __pyx_v_board = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 139, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ChessAI.ChessAI.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7ChessAI_7ChessAI___cinit__(((struct __pyx_obj_7ChessAI_ChessAI *)__pyx_v_self), __pyx_v_black_model, __pyx_v_white_model, __pyx_v_board);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7ChessAI_7ChessAI___cinit__(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, PyObject *__pyx_v_black_model, PyObject *__pyx_v_white_model, PyObject *__pyx_v_board) {
  long __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  uint64_t __pyx_t_5;
  uint64_t __pyx_t_6;
  uint64_t __pyx_t_7;
  uint64_t __pyx_t_8;
  uint64_t __pyx_t_9;
  uint64_t __pyx_t_10;
  uint64_t __pyx_t_11;
  uint64_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "ChessAI - Copy.pyx":142
 * 
 *         # Initialize member variables
 *         self.blackModel = black_model             # <<<<<<<<<<<<<<
 *         self.whiteModel = white_model
 *         self.pgnBoard = board
 */
  __Pyx_INCREF(__pyx_v_black_model);
  __Pyx_GIVEREF(__pyx_v_black_model);
  __Pyx_GOTREF(__pyx_v_self->blackModel);
  __Pyx_DECREF(__pyx_v_self->blackModel);
  __pyx_v_self->blackModel = __pyx_v_black_model;

  /* "ChessAI - Copy.pyx":143
 *         # Initialize member variables
 *         self.blackModel = black_model
 *         self.whiteModel = white_model             # <<<<<<<<<<<<<<
 *         self.pgnBoard = board
 *         self.numMove = 0
 */
  __Pyx_INCREF(__pyx_v_white_model);
  __Pyx_GIVEREF(__pyx_v_white_model);
  __Pyx_GOTREF(__pyx_v_self->whiteModel);
  __Pyx_DECREF(__pyx_v_self->whiteModel);
  __pyx_v_self->whiteModel = __pyx_v_white_model;

  /* "ChessAI - Copy.pyx":144
 *         self.blackModel = black_model
 *         self.whiteModel = white_model
 *         self.pgnBoard = board             # <<<<<<<<<<<<<<
 *         self.numMove = 0
 *         self.numIterations = 0
 */
  __Pyx_INCREF(__pyx_v_board);
  __Pyx_GIVEREF(__pyx_v_board);
  __Pyx_GOTREF(__pyx_v_self->pgnBoard);
  __Pyx_DECREF(__pyx_v_self->pgnBoard);
  __pyx_v_self->pgnBoard = __pyx_v_board;

  /* "ChessAI - Copy.pyx":145
 *         self.whiteModel = white_model
 *         self.pgnBoard = board
 *         self.numMove = 0             # <<<<<<<<<<<<<<
 *         self.numIterations = 0
 *         self.move_times = {}
 */
  __pyx_v_self->numMove = 0;

  /* "ChessAI - Copy.pyx":146
 *         self.pgnBoard = board
 *         self.numMove = 0
 *         self.numIterations = 0             # <<<<<<<<<<<<<<
 *         self.move_times = {}
 *         self.moves_list = []
 */
  __pyx_v_self->numIterations = 0;

  /* "ChessAI - Copy.pyx":147
 *         self.numMove = 0
 *         self.numIterations = 0
 *         self.move_times = {}             # <<<<<<<<<<<<<<
 *         self.moves_list = []
 *         self.alpha_list = []
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->move_times);
  __Pyx_DECREF(__pyx_v_self->move_times);
  __pyx_v_self->move_times = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":148
 *         self.numIterations = 0
 *         self.move_times = {}
 *         self.moves_list = []             # <<<<<<<<<<<<<<
 *         self.alpha_list = []
 *         self.beta_list = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->moves_list);
  __Pyx_DECREF(__pyx_v_self->moves_list);
  __pyx_v_self->moves_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":149
 *         self.move_times = {}
 *         self.moves_list = []
 *         self.alpha_list = []             # <<<<<<<<<<<<<<
 *         self.beta_list = []
 *         self.beta_move_list = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->alpha_list);
  __Pyx_DECREF(__pyx_v_self->alpha_list);
  __pyx_v_self->alpha_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":150
 *         self.moves_list = []
 *         self.alpha_list = []
 *         self.beta_list = []             # <<<<<<<<<<<<<<
 *         self.beta_move_list = []
 *         self.move_times[4] = 5.0
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->beta_list);
  __Pyx_DECREF(__pyx_v_self->beta_list);
  __pyx_v_self->beta_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":151
 *         self.alpha_list = []
 *         self.beta_list = []
 *         self.beta_move_list = []             # <<<<<<<<<<<<<<
 *         self.move_times[4] = 5.0
 *         self.move_times[5] = 5.5
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->beta_move_list);
  __Pyx_DECREF(__pyx_v_self->beta_move_list);
  __pyx_v_self->beta_move_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":152
 *         self.beta_list = []
 *         self.beta_move_list = []
 *         self.move_times[4] = 5.0             # <<<<<<<<<<<<<<
 *         self.move_times[5] = 5.5
 *         self.time_limit = 60
 */
  if (unlikely(__pyx_v_self->move_times == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 152, __pyx_L1_error)
  }
  if (unlikely(PyDict_SetItem(__pyx_v_self->move_times, __pyx_int_4, __pyx_float_5_0) < 0)) __PYX_ERR(0, 152, __pyx_L1_error)

  /* "ChessAI - Copy.pyx":153
 *         self.beta_move_list = []
 *         self.move_times[4] = 5.0
 *         self.move_times[5] = 5.5             # <<<<<<<<<<<<<<
 *         self.time_limit = 60
 *         self.quiescenceDepth = 6
 */
  if (unlikely(__pyx_v_self->move_times == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 153, __pyx_L1_error)
  }
  if (unlikely(PyDict_SetItem(__pyx_v_self->move_times, __pyx_int_5, __pyx_float_5_5) < 0)) __PYX_ERR(0, 153, __pyx_L1_error)

  /* "ChessAI - Copy.pyx":154
 *         self.move_times[4] = 5.0
 *         self.move_times[5] = 5.5
 *         self.time_limit = 60             # <<<<<<<<<<<<<<
 *         self.quiescenceDepth = 6
 * 
 */
  __pyx_v_self->time_limit = 60;

  /* "ChessAI - Copy.pyx":155
 *         self.move_times[5] = 5.5
 *         self.time_limit = 60
 *         self.quiescenceDepth = 6             # <<<<<<<<<<<<<<
 * 
 *         for i in range(6,26):
 */
  __pyx_v_self->quiescenceDepth = 6;

  /* "ChessAI - Copy.pyx":157
 *         self.quiescenceDepth = 6
 * 
 *         for i in range(6,26):             # <<<<<<<<<<<<<<
 *             self.move_times[i] = 2.5
 * 
 */
  for (__pyx_t_2 = 6; __pyx_t_2 < 26; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "ChessAI - Copy.pyx":158
 * 
 *         for i in range(6,26):
 *             self.move_times[i] = 2.5             # <<<<<<<<<<<<<<
 * 
 *         # Initialize attack tables for move generation
 */
    if (unlikely(__pyx_v_self->move_times == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 158, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_self->move_times, __pyx_t_1, __pyx_float_2_5) < 0)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "ChessAI - Copy.pyx":161
 * 
 *         # Initialize attack tables for move generation
 *         initialize_attack_tables()             # <<<<<<<<<<<<<<
 *         Cython_Chess.inititalize()
 * 
 */
  initialize_attack_tables();

  /* "ChessAI - Copy.pyx":162
 *         # Initialize attack tables for move generation
 *         initialize_attack_tables()
 *         Cython_Chess.inititalize()             # <<<<<<<<<<<<<<
 * 
 *         # Initialize zobrist tables for hashing
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Cython_Chess); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_inititalize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":165
 * 
 *         # Initialize zobrist tables for hashing
 *         initializeZobrist()             # <<<<<<<<<<<<<<
 *         self.zobrist = generateZobristHash(board.pawns,board.knights,board.bishops,board.rooks,board.queens,board.kings,board.occupied_co[True],board.occupied_co[False])
 * 
 */
  initializeZobrist();

  /* "ChessAI - Copy.pyx":166
 *         # Initialize zobrist tables for hashing
 *         initializeZobrist()
 *         self.zobrist = generateZobristHash(board.pawns,board.knights,board.bishops,board.rooks,board.queens,board.kings,board.occupied_co[True],board.occupied_co[False])             # <<<<<<<<<<<<<<
 * 
 *     # Function to set global variable for white castling index
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_pawns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_5 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_knights); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_6 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_bishops); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_7 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_rooks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_8 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_queens); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_kings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_10 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 1, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_11 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 0, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_12 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_12 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->zobrist = generateZobristHash(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12);

  /* "ChessAI - Copy.pyx":139
 * 
 *     # Constructor for chess engine
 *     def __cinit__(self, object black_model, object white_model, object board):             # <<<<<<<<<<<<<<
 * 
 *         # Initialize member variables
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ChessAI.ChessAI.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ChessAI - Copy.pyx":169
 * 
 *     # Function to set global variable for white castling index
 *     def setWhiteCastledIndex(self, index):             # <<<<<<<<<<<<<<
 *         global whiteCastledIndex
 *         whiteCastledIndex = index
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ChessAI_7ChessAI_3setWhiteCastledIndex(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_pw_7ChessAI_7ChessAI_3setWhiteCastledIndex(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setWhiteCastledIndex (wrapper)", 0);
  __pyx_r = __pyx_pf_7ChessAI_7ChessAI_2setWhiteCastledIndex(((struct __pyx_obj_7ChessAI_ChessAI *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ChessAI_7ChessAI_2setWhiteCastledIndex(CYTHON_UNUSED struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setWhiteCastledIndex", 0);

  /* "ChessAI - Copy.pyx":171
 *     def setWhiteCastledIndex(self, index):
 *         global whiteCastledIndex
 *         whiteCastledIndex = index             # <<<<<<<<<<<<<<
 * 
 *     # Function to set global variable for black castling index
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 171, __pyx_L1_error)
  __pyx_v_7ChessAI_whiteCastledIndex = __pyx_t_1;

  /* "ChessAI - Copy.pyx":169
 * 
 *     # Function to set global variable for white castling index
 *     def setWhiteCastledIndex(self, index):             # <<<<<<<<<<<<<<
 *         global whiteCastledIndex
 *         whiteCastledIndex = index
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ChessAI.ChessAI.setWhiteCastledIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ChessAI - Copy.pyx":174
 * 
 *     # Function to set global variable for black castling index
 *     def setBlackCastledIndex(self, index):             # <<<<<<<<<<<<<<
 *         global blackCastledIndex
 *         blackCastledIndex = index
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ChessAI_7ChessAI_5setBlackCastledIndex(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_pw_7ChessAI_7ChessAI_5setBlackCastledIndex(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setBlackCastledIndex (wrapper)", 0);
  __pyx_r = __pyx_pf_7ChessAI_7ChessAI_4setBlackCastledIndex(((struct __pyx_obj_7ChessAI_ChessAI *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ChessAI_7ChessAI_4setBlackCastledIndex(CYTHON_UNUSED struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setBlackCastledIndex", 0);

  /* "ChessAI - Copy.pyx":176
 *     def setBlackCastledIndex(self, index):
 *         global blackCastledIndex
 *         blackCastledIndex = index             # <<<<<<<<<<<<<<
 * 
 *     # Function to wrap the
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L1_error)
  __pyx_v_7ChessAI_blackCastledIndex = __pyx_t_1;

  /* "ChessAI - Copy.pyx":174
 * 
 *     # Function to set global variable for black castling index
 *     def setBlackCastledIndex(self, index):             # <<<<<<<<<<<<<<
 *         global blackCastledIndex
 *         blackCastledIndex = index
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ChessAI.ChessAI.setBlackCastledIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ChessAI - Copy.pyx":179
 * 
 *     # Function to wrap the
 *     def alphaBetaWrapper(self, int curDepth, int depthLimit):             # <<<<<<<<<<<<<<
 * 
 *         # Start timer
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ChessAI_7ChessAI_7alphaBetaWrapper(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7ChessAI_7ChessAI_7alphaBetaWrapper(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_curDepth;
  int __pyx_v_depthLimit;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("alphaBetaWrapper (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_curDepth,&__pyx_n_s_depthLimit,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_curDepth)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_depthLimit)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("alphaBetaWrapper", 1, 2, 2, 1); __PYX_ERR(0, 179, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "alphaBetaWrapper") < 0)) __PYX_ERR(0, 179, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_curDepth = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_curDepth == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 179, __pyx_L3_error)
    __pyx_v_depthLimit = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_depthLimit == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 179, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("alphaBetaWrapper", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 179, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ChessAI.ChessAI.alphaBetaWrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7ChessAI_7ChessAI_6alphaBetaWrapper(((struct __pyx_obj_7ChessAI_ChessAI *)__pyx_v_self), __pyx_v_curDepth, __pyx_v_depthLimit);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ChessAI_7ChessAI_6alphaBetaWrapper(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_curDepth, int __pyx_v_depthLimit) {
  PyObject *__pyx_v_t0 = NULL;
  int __pyx_v_cacheSize;
  struct __pyx_t_7ChessAI_MoveData __pyx_v_result;
  int __pyx_v_a;
  int __pyx_v_b;
  int __pyx_v_c;
  int __pyx_v_d;
  int __pyx_v_promo;
  int __pyx_v_val;
  PyObject *__pyx_v_move = 0;
  PyObject *__pyx_v_t1 = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_dif = NULL;
  long __pyx_v_new_depth;
  PyObject *__pyx_v_t0_new = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  uint64_t __pyx_t_5;
  uint64_t __pyx_t_6;
  uint64_t __pyx_t_7;
  uint64_t __pyx_t_8;
  uint64_t __pyx_t_9;
  uint64_t __pyx_t_10;
  uint64_t __pyx_t_11;
  uint64_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  double __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("alphaBetaWrapper", 0);

  /* "ChessAI - Copy.pyx":182
 * 
 *         # Start timer
 *         t0= timer()             # <<<<<<<<<<<<<<
 * 
 *         # Call global variables into the context of this function
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_timer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_t0 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":190
 * 
 *         # Initialize the lists required for iterative deepening
 *         self.moves_list = []             # <<<<<<<<<<<<<<
 *         self.alpha_list = []
 *         self.beta_list = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->moves_list);
  __Pyx_DECREF(__pyx_v_self->moves_list);
  __pyx_v_self->moves_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":191
 *         # Initialize the lists required for iterative deepening
 *         self.moves_list = []
 *         self.alpha_list = []             # <<<<<<<<<<<<<<
 *         self.beta_list = []
 *         self.beta_move_list = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->alpha_list);
  __Pyx_DECREF(__pyx_v_self->alpha_list);
  __pyx_v_self->alpha_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":192
 *         self.moves_list = []
 *         self.alpha_list = []
 *         self.beta_list = []             # <<<<<<<<<<<<<<
 *         self.beta_move_list = []
 *         self.numIterations = 0
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->beta_list);
  __Pyx_DECREF(__pyx_v_self->beta_list);
  __pyx_v_self->beta_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":193
 *         self.alpha_list = []
 *         self.beta_list = []
 *         self.beta_move_list = []             # <<<<<<<<<<<<<<
 *         self.numIterations = 0
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->beta_move_list);
  __Pyx_DECREF(__pyx_v_self->beta_move_list);
  __pyx_v_self->beta_move_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":194
 *         self.beta_list = []
 *         self.beta_move_list = []
 *         self.numIterations = 0             # <<<<<<<<<<<<<<
 * 
 *         print(whiteCastledIndex,blackCastledIndex)
 */
  __pyx_v_self->numIterations = 0;

  /* "ChessAI - Copy.pyx":196
 *         self.numIterations = 0
 * 
 *         print(whiteCastledIndex,blackCastledIndex)             # <<<<<<<<<<<<<<
 *         cdef int cacheSize = printCacheStats()
 *         # print()
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_7ChessAI_whiteCastledIndex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_7ChessAI_blackCastledIndex); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ChessAI - Copy.pyx":197
 * 
 *         print(whiteCastledIndex,blackCastledIndex)
 *         cdef int cacheSize = printCacheStats()             # <<<<<<<<<<<<<<
 *         # print()
 *         # cdef int OpponentMoveGenCacheSize = printOpponentMoveGenCacheStats()
 */
  __pyx_v_cacheSize = printCacheStats();

  /* "ChessAI - Copy.pyx":210
 * 
 *         # Code segment to control cache size
 *         if (self.pgnBoard.ply() < 30):             # <<<<<<<<<<<<<<
 *             if (cacheSize > 8000000):
 *                 evictOldEntries(cacheSize - 8000000)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_ply); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_30, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "ChessAI - Copy.pyx":211
 *         # Code segment to control cache size
 *         if (self.pgnBoard.ply() < 30):
 *             if (cacheSize > 8000000):             # <<<<<<<<<<<<<<
 *                 evictOldEntries(cacheSize - 8000000)
 *         elif(self.pgnBoard.ply() < 50):
 */
    __pyx_t_4 = ((__pyx_v_cacheSize > 0x7A1200) != 0);
    if (__pyx_t_4) {

      /* "ChessAI - Copy.pyx":212
 *         if (self.pgnBoard.ply() < 30):
 *             if (cacheSize > 8000000):
 *                 evictOldEntries(cacheSize - 8000000)             # <<<<<<<<<<<<<<
 *         elif(self.pgnBoard.ply() < 50):
 *             if (cacheSize > 16000000):
 */
      evictOldEntries((__pyx_v_cacheSize - 0x7A1200));

      /* "ChessAI - Copy.pyx":211
 *         # Code segment to control cache size
 *         if (self.pgnBoard.ply() < 30):
 *             if (cacheSize > 8000000):             # <<<<<<<<<<<<<<
 *                 evictOldEntries(cacheSize - 8000000)
 *         elif(self.pgnBoard.ply() < 50):
 */
    }

    /* "ChessAI - Copy.pyx":210
 * 
 *         # Code segment to control cache size
 *         if (self.pgnBoard.ply() < 30):             # <<<<<<<<<<<<<<
 *             if (cacheSize > 8000000):
 *                 evictOldEntries(cacheSize - 8000000)
 */
    goto __pyx_L3;
  }

  /* "ChessAI - Copy.pyx":213
 *             if (cacheSize > 8000000):
 *                 evictOldEntries(cacheSize - 8000000)
 *         elif(self.pgnBoard.ply() < 50):             # <<<<<<<<<<<<<<
 *             if (cacheSize > 16000000):
 *                 evictOldEntries(cacheSize - 16000000)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_ply); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_50, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "ChessAI - Copy.pyx":214
 *                 evictOldEntries(cacheSize - 8000000)
 *         elif(self.pgnBoard.ply() < 50):
 *             if (cacheSize > 16000000):             # <<<<<<<<<<<<<<
 *                 evictOldEntries(cacheSize - 16000000)
 *         elif(self.pgnBoard.ply() < 75):
 */
    __pyx_t_4 = ((__pyx_v_cacheSize > 0xF42400) != 0);
    if (__pyx_t_4) {

      /* "ChessAI - Copy.pyx":215
 *         elif(self.pgnBoard.ply() < 50):
 *             if (cacheSize > 16000000):
 *                 evictOldEntries(cacheSize - 16000000)             # <<<<<<<<<<<<<<
 *         elif(self.pgnBoard.ply() < 75):
 *             if (cacheSize > 32000000):
 */
      evictOldEntries((__pyx_v_cacheSize - 0xF42400));

      /* "ChessAI - Copy.pyx":214
 *                 evictOldEntries(cacheSize - 8000000)
 *         elif(self.pgnBoard.ply() < 50):
 *             if (cacheSize > 16000000):             # <<<<<<<<<<<<<<
 *                 evictOldEntries(cacheSize - 16000000)
 *         elif(self.pgnBoard.ply() < 75):
 */
    }

    /* "ChessAI - Copy.pyx":213
 *             if (cacheSize > 8000000):
 *                 evictOldEntries(cacheSize - 8000000)
 *         elif(self.pgnBoard.ply() < 50):             # <<<<<<<<<<<<<<
 *             if (cacheSize > 16000000):
 *                 evictOldEntries(cacheSize - 16000000)
 */
    goto __pyx_L3;
  }

  /* "ChessAI - Copy.pyx":216
 *             if (cacheSize > 16000000):
 *                 evictOldEntries(cacheSize - 16000000)
 *         elif(self.pgnBoard.ply() < 75):             # <<<<<<<<<<<<<<
 *             if (cacheSize > 32000000):
 *                 evictOldEntries(cacheSize - 32000000)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_ply); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_75, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "ChessAI - Copy.pyx":217
 *                 evictOldEntries(cacheSize - 16000000)
 *         elif(self.pgnBoard.ply() < 75):
 *             if (cacheSize > 32000000):             # <<<<<<<<<<<<<<
 *                 evictOldEntries(cacheSize - 32000000)
 *         else:
 */
    __pyx_t_4 = ((__pyx_v_cacheSize > 0x1E84800) != 0);
    if (__pyx_t_4) {

      /* "ChessAI - Copy.pyx":218
 *         elif(self.pgnBoard.ply() < 75):
 *             if (cacheSize > 32000000):
 *                 evictOldEntries(cacheSize - 32000000)             # <<<<<<<<<<<<<<
 *         else:
 *             if (cacheSize > 64000000):
 */
      evictOldEntries((__pyx_v_cacheSize - 0x1E84800));

      /* "ChessAI - Copy.pyx":217
 *                 evictOldEntries(cacheSize - 16000000)
 *         elif(self.pgnBoard.ply() < 75):
 *             if (cacheSize > 32000000):             # <<<<<<<<<<<<<<
 *                 evictOldEntries(cacheSize - 32000000)
 *         else:
 */
    }

    /* "ChessAI - Copy.pyx":216
 *             if (cacheSize > 16000000):
 *                 evictOldEntries(cacheSize - 16000000)
 *         elif(self.pgnBoard.ply() < 75):             # <<<<<<<<<<<<<<
 *             if (cacheSize > 32000000):
 *                 evictOldEntries(cacheSize - 32000000)
 */
    goto __pyx_L3;
  }

  /* "ChessAI - Copy.pyx":220
 *                 evictOldEntries(cacheSize - 32000000)
 *         else:
 *             if (cacheSize > 64000000):             # <<<<<<<<<<<<<<
 *                 evictOldEntries(cacheSize - 64000000)
 * 
 */
  /*else*/ {
    __pyx_t_4 = ((__pyx_v_cacheSize > 0x3D09000) != 0);
    if (__pyx_t_4) {

      /* "ChessAI - Copy.pyx":221
 *         else:
 *             if (cacheSize > 64000000):
 *                 evictOldEntries(cacheSize - 64000000)             # <<<<<<<<<<<<<<
 * 
 *         # Set the variable for where the king was located before move selection is started
 */
      evictOldEntries((__pyx_v_cacheSize - 0x3D09000));

      /* "ChessAI - Copy.pyx":220
 *                 evictOldEntries(cacheSize - 32000000)
 *         else:
 *             if (cacheSize > 64000000):             # <<<<<<<<<<<<<<
 *                 evictOldEntries(cacheSize - 64000000)
 * 
 */
    }
  }
  __pyx_L3:;

  /* "ChessAI - Copy.pyx":224
 * 
 *         # Set the variable for where the king was located before move selection is started
 *         prevKings = self.pgnBoard.kings             # <<<<<<<<<<<<<<
 * 
 *         # Define variables to hold generated move data
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_kings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_5 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_7ChessAI_prevKings = __pyx_t_5;

  /* "ChessAI - Copy.pyx":231
 *         cdef object move
 * 
 *         self.zobrist = generateZobristHash(self.pgnBoard.pawns,self.pgnBoard.knights,self.pgnBoard.bishops,self.pgnBoard.rooks,self.pgnBoard.queens,self.pgnBoard.kings,self.pgnBoard.occupied_co[True],self.pgnBoard.occupied_co[False])             # <<<<<<<<<<<<<<
 * 
 *         # Code segment to check if the opponent has castled and set the castled index
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_pawns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_5 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_knights); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_6 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_bishops); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_7 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_rooks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_8 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_queens); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_kings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_10 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 1, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_11 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_12 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_12 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->zobrist = generateZobristHash(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12);

  /* "ChessAI - Copy.pyx":234
 * 
 *         # Code segment to check if the opponent has castled and set the castled index
 *         if (len(self.pgnBoard.move_stack) > 0):             # <<<<<<<<<<<<<<
 *             move = self.pgnBoard.pop()
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_move_stack); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_13 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = ((__pyx_t_13 > 0) != 0);
  if (__pyx_t_4) {

    /* "ChessAI - Copy.pyx":235
 *         # Code segment to check if the opponent has castled and set the castled index
 *         if (len(self.pgnBoard.move_stack) > 0):
 *             move = self.pgnBoard.pop()             # <<<<<<<<<<<<<<
 * 
 *             if (self.pgnBoard.turn):
 */
    __pyx_t_3 = __Pyx_PyObject_Pop(__pyx_v_self->pgnBoard); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_move = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ChessAI - Copy.pyx":237
 *             move = self.pgnBoard.pop()
 * 
 *             if (self.pgnBoard.turn):             # <<<<<<<<<<<<<<
 *                 if (whiteCastledIndex == -1):
 *                     if (self.pgnBoard.is_castling(move)):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_turn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "ChessAI - Copy.pyx":238
 * 
 *             if (self.pgnBoard.turn):
 *                 if (whiteCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                     if (self.pgnBoard.is_castling(move)):
 *                         print ("WHITE CASTLED")
 */
      __pyx_t_4 = ((__pyx_v_7ChessAI_whiteCastledIndex == -1L) != 0);
      if (__pyx_t_4) {

        /* "ChessAI - Copy.pyx":239
 *             if (self.pgnBoard.turn):
 *                 if (whiteCastledIndex == -1):
 *                     if (self.pgnBoard.is_castling(move)):             # <<<<<<<<<<<<<<
 *                         print ("WHITE CASTLED")
 *                         whiteCastledIndex = self.pgnBoard.ply()
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_castling); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_move);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 239, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 239, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_4) {

          /* "ChessAI - Copy.pyx":240
 *                 if (whiteCastledIndex == -1):
 *                     if (self.pgnBoard.is_castling(move)):
 *                         print ("WHITE CASTLED")             # <<<<<<<<<<<<<<
 *                         whiteCastledIndex = self.pgnBoard.ply()
 *             else:
 */
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 240, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "ChessAI - Copy.pyx":241
 *                     if (self.pgnBoard.is_castling(move)):
 *                         print ("WHITE CASTLED")
 *                         whiteCastledIndex = self.pgnBoard.ply()             # <<<<<<<<<<<<<<
 *             else:
 *                 if (blackCastledIndex == -1):
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_ply); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_1 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 241, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 241, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_v_7ChessAI_whiteCastledIndex = __pyx_t_14;

          /* "ChessAI - Copy.pyx":239
 *             if (self.pgnBoard.turn):
 *                 if (whiteCastledIndex == -1):
 *                     if (self.pgnBoard.is_castling(move)):             # <<<<<<<<<<<<<<
 *                         print ("WHITE CASTLED")
 *                         whiteCastledIndex = self.pgnBoard.ply()
 */
        }

        /* "ChessAI - Copy.pyx":238
 * 
 *             if (self.pgnBoard.turn):
 *                 if (whiteCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                     if (self.pgnBoard.is_castling(move)):
 *                         print ("WHITE CASTLED")
 */
      }

      /* "ChessAI - Copy.pyx":237
 *             move = self.pgnBoard.pop()
 * 
 *             if (self.pgnBoard.turn):             # <<<<<<<<<<<<<<
 *                 if (whiteCastledIndex == -1):
 *                     if (self.pgnBoard.is_castling(move)):
 */
      goto __pyx_L9;
    }

    /* "ChessAI - Copy.pyx":243
 *                         whiteCastledIndex = self.pgnBoard.ply()
 *             else:
 *                 if (blackCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                     if (self.pgnBoard.is_castling(move)):
 *                         print ("BLACK CASTLED")
 */
    /*else*/ {
      __pyx_t_4 = ((__pyx_v_7ChessAI_blackCastledIndex == -1L) != 0);
      if (__pyx_t_4) {

        /* "ChessAI - Copy.pyx":244
 *             else:
 *                 if (blackCastledIndex == -1):
 *                     if (self.pgnBoard.is_castling(move)):             # <<<<<<<<<<<<<<
 *                         print ("BLACK CASTLED")
 *                         blackCastledIndex = self.pgnBoard.ply()
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_castling); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 244, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_move);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 244, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 244, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_4) {

          /* "ChessAI - Copy.pyx":245
 *                 if (blackCastledIndex == -1):
 *                     if (self.pgnBoard.is_castling(move)):
 *                         print ("BLACK CASTLED")             # <<<<<<<<<<<<<<
 *                         blackCastledIndex = self.pgnBoard.ply()
 * 
 */
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 245, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "ChessAI - Copy.pyx":246
 *                     if (self.pgnBoard.is_castling(move)):
 *                         print ("BLACK CASTLED")
 *                         blackCastledIndex = self.pgnBoard.ply()             # <<<<<<<<<<<<<<
 * 
 *             self.pgnBoard.push(move)
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_ply); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_1 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_v_7ChessAI_blackCastledIndex = __pyx_t_14;

          /* "ChessAI - Copy.pyx":244
 *             else:
 *                 if (blackCastledIndex == -1):
 *                     if (self.pgnBoard.is_castling(move)):             # <<<<<<<<<<<<<<
 *                         print ("BLACK CASTLED")
 *                         blackCastledIndex = self.pgnBoard.ply()
 */
        }

        /* "ChessAI - Copy.pyx":243
 *                         whiteCastledIndex = self.pgnBoard.ply()
 *             else:
 *                 if (blackCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                     if (self.pgnBoard.is_castling(move)):
 *                         print ("BLACK CASTLED")
 */
      }
    }
    __pyx_L9:;

    /* "ChessAI - Copy.pyx":248
 *                         blackCastledIndex = self.pgnBoard.ply()
 * 
 *             self.pgnBoard.push(move)             # <<<<<<<<<<<<<<
 * 
 *         # Code segment to check if either side has lost castling rights
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_push); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_move);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ChessAI - Copy.pyx":234
 * 
 *         # Code segment to check if the opponent has castled and set the castled index
 *         if (len(self.pgnBoard.move_stack) > 0):             # <<<<<<<<<<<<<<
 *             move = self.pgnBoard.pop()
 * 
 */
  }

  /* "ChessAI - Copy.pyx":251
 * 
 *         # Code segment to check if either side has lost castling rights
 *         if (self.pgnBoard.turn):             # <<<<<<<<<<<<<<
 *             if (whiteCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(True)):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_turn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "ChessAI - Copy.pyx":252
 *         # Code segment to check if either side has lost castling rights
 *         if (self.pgnBoard.turn):
 *             if (whiteCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                 if not(self.pgnBoard.has_castling_rights(True)):
 *                     print("WHITE CASTLING LOST")
 */
    __pyx_t_4 = ((__pyx_v_7ChessAI_whiteCastledIndex == -1L) != 0);
    if (__pyx_t_4) {

      /* "ChessAI - Copy.pyx":253
 *         if (self.pgnBoard.turn):
 *             if (whiteCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(True)):             # <<<<<<<<<<<<<<
 *                     print("WHITE CASTLING LOST")
 *                     whiteCastledIndex = 121
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_has_castling_rights); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, Py_True) : __Pyx_PyObject_CallOneArg(__pyx_t_2, Py_True);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_15 = ((!__pyx_t_4) != 0);
      if (__pyx_t_15) {

        /* "ChessAI - Copy.pyx":254
 *             if (whiteCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(True)):
 *                     print("WHITE CASTLING LOST")             # <<<<<<<<<<<<<<
 *                     whiteCastledIndex = 121
 *             if (blackCastledIndex == -1):
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ChessAI - Copy.pyx":255
 *                 if not(self.pgnBoard.has_castling_rights(True)):
 *                     print("WHITE CASTLING LOST")
 *                     whiteCastledIndex = 121             # <<<<<<<<<<<<<<
 *             if (blackCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(False)):
 */
        __pyx_v_7ChessAI_whiteCastledIndex = 0x79;

        /* "ChessAI - Copy.pyx":253
 *         if (self.pgnBoard.turn):
 *             if (whiteCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(True)):             # <<<<<<<<<<<<<<
 *                     print("WHITE CASTLING LOST")
 *                     whiteCastledIndex = 121
 */
      }

      /* "ChessAI - Copy.pyx":252
 *         # Code segment to check if either side has lost castling rights
 *         if (self.pgnBoard.turn):
 *             if (whiteCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                 if not(self.pgnBoard.has_castling_rights(True)):
 *                     print("WHITE CASTLING LOST")
 */
    }

    /* "ChessAI - Copy.pyx":256
 *                     print("WHITE CASTLING LOST")
 *                     whiteCastledIndex = 121
 *             if (blackCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                 if not(self.pgnBoard.has_castling_rights(False)):
 *                     print("BLACK CASTLING LOST")
 */
    __pyx_t_15 = ((__pyx_v_7ChessAI_blackCastledIndex == -1L) != 0);
    if (__pyx_t_15) {

      /* "ChessAI - Copy.pyx":257
 *                     whiteCastledIndex = 121
 *             if (blackCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(False)):             # <<<<<<<<<<<<<<
 *                     print("BLACK CASTLING LOST")
 *                     blackCastledIndex = 121
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_has_castling_rights); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, Py_False) : __Pyx_PyObject_CallOneArg(__pyx_t_2, Py_False);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 257, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = ((!__pyx_t_15) != 0);
      if (__pyx_t_4) {

        /* "ChessAI - Copy.pyx":258
 *             if (blackCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(False)):
 *                     print("BLACK CASTLING LOST")             # <<<<<<<<<<<<<<
 *                     blackCastledIndex = 121
 *         else:
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ChessAI - Copy.pyx":259
 *                 if not(self.pgnBoard.has_castling_rights(False)):
 *                     print("BLACK CASTLING LOST")
 *                     blackCastledIndex = 121             # <<<<<<<<<<<<<<
 *         else:
 *             if (whiteCastledIndex == -1):
 */
        __pyx_v_7ChessAI_blackCastledIndex = 0x79;

        /* "ChessAI - Copy.pyx":257
 *                     whiteCastledIndex = 121
 *             if (blackCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(False)):             # <<<<<<<<<<<<<<
 *                     print("BLACK CASTLING LOST")
 *                     blackCastledIndex = 121
 */
      }

      /* "ChessAI - Copy.pyx":256
 *                     print("WHITE CASTLING LOST")
 *                     whiteCastledIndex = 121
 *             if (blackCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                 if not(self.pgnBoard.has_castling_rights(False)):
 *                     print("BLACK CASTLING LOST")
 */
    }

    /* "ChessAI - Copy.pyx":251
 * 
 *         # Code segment to check if either side has lost castling rights
 *         if (self.pgnBoard.turn):             # <<<<<<<<<<<<<<
 *             if (whiteCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(True)):
 */
    goto __pyx_L14;
  }

  /* "ChessAI - Copy.pyx":261
 *                     blackCastledIndex = 121
 *         else:
 *             if (whiteCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                 if not(self.pgnBoard.has_castling_rights(True)):
 *                     print("WHITE CASTLING LOST")
 */
  /*else*/ {
    __pyx_t_4 = ((__pyx_v_7ChessAI_whiteCastledIndex == -1L) != 0);
    if (__pyx_t_4) {

      /* "ChessAI - Copy.pyx":262
 *         else:
 *             if (whiteCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(True)):             # <<<<<<<<<<<<<<
 *                     print("WHITE CASTLING LOST")
 *                     whiteCastledIndex = 121
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_has_castling_rights); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, Py_True) : __Pyx_PyObject_CallOneArg(__pyx_t_2, Py_True);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 262, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 262, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_15 = ((!__pyx_t_4) != 0);
      if (__pyx_t_15) {

        /* "ChessAI - Copy.pyx":263
 *             if (whiteCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(True)):
 *                     print("WHITE CASTLING LOST")             # <<<<<<<<<<<<<<
 *                     whiteCastledIndex = 121
 *             if (blackCastledIndex == -1):
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ChessAI - Copy.pyx":264
 *                 if not(self.pgnBoard.has_castling_rights(True)):
 *                     print("WHITE CASTLING LOST")
 *                     whiteCastledIndex = 121             # <<<<<<<<<<<<<<
 *             if (blackCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(False)):
 */
        __pyx_v_7ChessAI_whiteCastledIndex = 0x79;

        /* "ChessAI - Copy.pyx":262
 *         else:
 *             if (whiteCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(True)):             # <<<<<<<<<<<<<<
 *                     print("WHITE CASTLING LOST")
 *                     whiteCastledIndex = 121
 */
      }

      /* "ChessAI - Copy.pyx":261
 *                     blackCastledIndex = 121
 *         else:
 *             if (whiteCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                 if not(self.pgnBoard.has_castling_rights(True)):
 *                     print("WHITE CASTLING LOST")
 */
    }

    /* "ChessAI - Copy.pyx":265
 *                     print("WHITE CASTLING LOST")
 *                     whiteCastledIndex = 121
 *             if (blackCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                 if not(self.pgnBoard.has_castling_rights(False)):
 *                     print("BLACK CASTLING LOST")
 */
    __pyx_t_15 = ((__pyx_v_7ChessAI_blackCastledIndex == -1L) != 0);
    if (__pyx_t_15) {

      /* "ChessAI - Copy.pyx":266
 *                     whiteCastledIndex = 121
 *             if (blackCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(False)):             # <<<<<<<<<<<<<<
 *                     print("BLACK CASTLING LOST")
 *                     blackCastledIndex = 121
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_has_castling_rights); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, Py_False) : __Pyx_PyObject_CallOneArg(__pyx_t_2, Py_False);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 266, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = ((!__pyx_t_15) != 0);
      if (__pyx_t_4) {

        /* "ChessAI - Copy.pyx":267
 *             if (blackCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(False)):
 *                     print("BLACK CASTLING LOST")             # <<<<<<<<<<<<<<
 *                     blackCastledIndex = 121
 * 
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ChessAI - Copy.pyx":268
 *                 if not(self.pgnBoard.has_castling_rights(False)):
 *                     print("BLACK CASTLING LOST")
 *                     blackCastledIndex = 121             # <<<<<<<<<<<<<<
 * 
 *         print(whiteCastledIndex,blackCastledIndex)
 */
        __pyx_v_7ChessAI_blackCastledIndex = 0x79;

        /* "ChessAI - Copy.pyx":266
 *                     whiteCastledIndex = 121
 *             if (blackCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(False)):             # <<<<<<<<<<<<<<
 *                     print("BLACK CASTLING LOST")
 *                     blackCastledIndex = 121
 */
      }

      /* "ChessAI - Copy.pyx":265
 *                     print("WHITE CASTLING LOST")
 *                     whiteCastledIndex = 121
 *             if (blackCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                 if not(self.pgnBoard.has_castling_rights(False)):
 *                     print("BLACK CASTLING LOST")
 */
    }
  }
  __pyx_L14:;

  /* "ChessAI - Copy.pyx":270
 *                     blackCastledIndex = 121
 * 
 *         print(whiteCastledIndex,blackCastledIndex)             # <<<<<<<<<<<<<<
 * 
 *         # If less than 30 plies have been played, check the opening book
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_7ChessAI_whiteCastledIndex); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_7ChessAI_blackCastledIndex); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ChessAI - Copy.pyx":273
 * 
 *         # If less than 30 plies have been played, check the opening book
 *         if (len(self.pgnBoard.move_stack) < 30):             # <<<<<<<<<<<<<<
 *             result = self.opening_book(curDepth, depthLimit)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_move_stack); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_13 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((__pyx_t_13 < 30) != 0);
  if (__pyx_t_4) {

    /* "ChessAI - Copy.pyx":274
 *         # If less than 30 plies have been played, check the opening book
 *         if (len(self.pgnBoard.move_stack) < 30):
 *             result = self.opening_book(curDepth, depthLimit)             # <<<<<<<<<<<<<<
 * 
 *             a = result.a
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_curDepth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_depthLimit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_result = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->opening_book(__pyx_v_self, __pyx_t_2, __pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ChessAI - Copy.pyx":276
 *             result = self.opening_book(curDepth, depthLimit)
 * 
 *             a = result.a             # <<<<<<<<<<<<<<
 *             b = result.b
 *             c = result.c
 */
    __pyx_t_14 = __pyx_v_result.a;
    __pyx_v_a = __pyx_t_14;

    /* "ChessAI - Copy.pyx":277
 * 
 *             a = result.a
 *             b = result.b             # <<<<<<<<<<<<<<
 *             c = result.c
 *             d = result.d
 */
    __pyx_t_14 = __pyx_v_result.b;
    __pyx_v_b = __pyx_t_14;

    /* "ChessAI - Copy.pyx":278
 *             a = result.a
 *             b = result.b
 *             c = result.c             # <<<<<<<<<<<<<<
 *             d = result.d
 *             promo = result.promotion
 */
    __pyx_t_14 = __pyx_v_result.c;
    __pyx_v_c = __pyx_t_14;

    /* "ChessAI - Copy.pyx":279
 *             b = result.b
 *             c = result.c
 *             d = result.d             # <<<<<<<<<<<<<<
 *             promo = result.promotion
 *             val = result.score
 */
    __pyx_t_14 = __pyx_v_result.d;
    __pyx_v_d = __pyx_t_14;

    /* "ChessAI - Copy.pyx":280
 *             c = result.c
 *             d = result.d
 *             promo = result.promotion             # <<<<<<<<<<<<<<
 *             val = result.score
 * 
 */
    __pyx_t_14 = __pyx_v_result.promotion;
    __pyx_v_promo = __pyx_t_14;

    /* "ChessAI - Copy.pyx":281
 *             d = result.d
 *             promo = result.promotion
 *             val = result.score             # <<<<<<<<<<<<<<
 * 
 *             t1 = timer()
 */
    __pyx_t_14 = __pyx_v_result.score;
    __pyx_v_val = __pyx_t_14;

    /* "ChessAI - Copy.pyx":283
 *             val = result.score
 * 
 *             t1 = timer()             # <<<<<<<<<<<<<<
 *             # Check if an entry exists in the opening book
 *             if not((a,b,c,d) == (-1,-1,-1,-1)):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_timer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_t1 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ChessAI - Copy.pyx":285
 *             t1 = timer()
 *             # Check if an entry exists in the opening book
 *             if not((a,b,c,d) == (-1,-1,-1,-1)):             # <<<<<<<<<<<<<<
 *                 print(a,b,c,d)
 *                 print()
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_b); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_c); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_d); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_17 = PyTuple_New(4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_17, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_17, 3, __pyx_t_16);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_16 = 0;
    __pyx_t_16 = PyObject_RichCompare(__pyx_t_17, __pyx_tuple__5, Py_EQ); __Pyx_XGOTREF(__pyx_t_16); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_16); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_15 = ((!__pyx_t_4) != 0);
    if (__pyx_t_15) {

      /* "ChessAI - Copy.pyx":286
 *             # Check if an entry exists in the opening book
 *             if not((a,b,c,d) == (-1,-1,-1,-1)):
 *                 print(a,b,c,d)             # <<<<<<<<<<<<<<
 *                 print()
 *                 print("Evaluation: Book Move")
 */
      __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_a); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_b); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_c); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_d); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_17);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_17);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_2);
      __pyx_t_16 = 0;
      __pyx_t_17 = 0;
      __pyx_t_3 = 0;
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ChessAI - Copy.pyx":287
 *             if not((a,b,c,d) == (-1,-1,-1,-1)):
 *                 print(a,b,c,d)
 *                 print()             # <<<<<<<<<<<<<<
 *                 print("Evaluation: Book Move")
 *                 print ("Time Taken: ", t1 - t0)
 */
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_print); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ChessAI - Copy.pyx":288
 *                 print(a,b,c,d)
 *                 print()
 *                 print("Evaluation: Book Move")             # <<<<<<<<<<<<<<
 *                 print ("Time Taken: ", t1 - t0)
 *                 print("Move: ", self.pgnBoard.ply())
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ChessAI - Copy.pyx":289
 *                 print()
 *                 print("Evaluation: Book Move")
 *                 print ("Time Taken: ", t1 - t0)             # <<<<<<<<<<<<<<
 *                 print("Move: ", self.pgnBoard.ply())
 *                 print()
 */
      __pyx_t_2 = PyNumber_Subtract(__pyx_v_t1, __pyx_v_t0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_kp_u_Time_Taken);
      __Pyx_GIVEREF(__pyx_kp_u_Time_Taken);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Time_Taken);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ChessAI - Copy.pyx":290
 *                 print("Evaluation: Book Move")
 *                 print ("Time Taken: ", t1 - t0)
 *                 print("Move: ", self.pgnBoard.ply())             # <<<<<<<<<<<<<<
 *                 print()
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_ply); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_kp_u_Move);
      __Pyx_GIVEREF(__pyx_kp_u_Move);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Move);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ChessAI - Copy.pyx":291
 *                 print ("Time Taken: ", t1 - t0)
 *                 print("Move: ", self.pgnBoard.ply())
 *                 print()             # <<<<<<<<<<<<<<
 * 
 *                 # Convert the coordinates to alphanumeric representation
 */
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_print); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ChessAI - Copy.pyx":294
 * 
 *                 # Convert the coordinates to alphanumeric representation
 *                 x = chr(a + 96)             # <<<<<<<<<<<<<<
 *                 y = str(b)
 *                 i = chr(c + 96)
 */
      __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_a + 96)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 294, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_x = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "ChessAI - Copy.pyx":295
 *                 # Convert the coordinates to alphanumeric representation
 *                 x = chr(a + 96)
 *                 y = str(b)             # <<<<<<<<<<<<<<
 *                 i = chr(c + 96)
 *                 j = str(d)
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_y = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "ChessAI - Copy.pyx":296
 *                 x = chr(a + 96)
 *                 y = str(b)
 *                 i = chr(c + 96)             # <<<<<<<<<<<<<<
 *                 j = str(d)
 *                 if (promo == -1):
 */
      __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_c + 96)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_i = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "ChessAI - Copy.pyx":297
 *                 y = str(b)
 *                 i = chr(c + 96)
 *                 j = str(d)             # <<<<<<<<<<<<<<
 *                 if (promo == -1):
 *                     move = chess.Move.from_uci(x+y+i+j)
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_d); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_j = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "ChessAI - Copy.pyx":298
 *                 i = chr(c + 96)
 *                 j = str(d)
 *                 if (promo == -1):             # <<<<<<<<<<<<<<
 *                     move = chess.Move.from_uci(x+y+i+j)
 * 
 */
      __pyx_t_15 = ((__pyx_v_promo == -1L) != 0);
      if (__pyx_t_15) {

        /* "ChessAI - Copy.pyx":299
 *                 j = str(d)
 *                 if (promo == -1):
 *                     move = chess.Move.from_uci(x+y+i+j)             # <<<<<<<<<<<<<<
 * 
 *                     # Check if the engine has castled and set the castling index
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_chess); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Move_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_from_uci); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Add(__pyx_v_x, __pyx_v_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_17 = PyNumber_Add(__pyx_t_3, __pyx_v_i); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Add(__pyx_t_17, __pyx_v_j); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_2 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_17, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_move, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "ChessAI - Copy.pyx":302
 * 
 *                     # Check if the engine has castled and set the castling index
 *                     if (self.pgnBoard.turn):             # <<<<<<<<<<<<<<
 *                         if (whiteCastledIndex == -1):
 *                             if (self.pgnBoard.is_castling(move)):
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_turn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 302, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_15) {

          /* "ChessAI - Copy.pyx":303
 *                     # Check if the engine has castled and set the castling index
 *                     if (self.pgnBoard.turn):
 *                         if (whiteCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                             if (self.pgnBoard.is_castling(move)):
 *                                 print ("WHITE CASTLED")
 */
          __pyx_t_15 = ((__pyx_v_7ChessAI_whiteCastledIndex == -1L) != 0);
          if (__pyx_t_15) {

            /* "ChessAI - Copy.pyx":304
 *                     if (self.pgnBoard.turn):
 *                         if (whiteCastledIndex == -1):
 *                             if (self.pgnBoard.is_castling(move)):             # <<<<<<<<<<<<<<
 *                                 print ("WHITE CASTLED")
 *                                 whiteCastledIndex = self.pgnBoard.ply()
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_castling); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
              }
            }
            __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_move);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 304, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (__pyx_t_15) {

              /* "ChessAI - Copy.pyx":305
 *                         if (whiteCastledIndex == -1):
 *                             if (self.pgnBoard.is_castling(move)):
 *                                 print ("WHITE CASTLED")             # <<<<<<<<<<<<<<
 *                                 whiteCastledIndex = self.pgnBoard.ply()
 *                     else:
 */
              __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

              /* "ChessAI - Copy.pyx":306
 *                             if (self.pgnBoard.is_castling(move)):
 *                                 print ("WHITE CASTLED")
 *                                 whiteCastledIndex = self.pgnBoard.ply()             # <<<<<<<<<<<<<<
 *                     else:
 *                         if (blackCastledIndex == -1):
 */
              __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_ply); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_3 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
                __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
                if (likely(__pyx_t_3)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                  __Pyx_INCREF(__pyx_t_3);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_1, function);
                }
              }
              __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 306, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_v_7ChessAI_whiteCastledIndex = __pyx_t_14;

              /* "ChessAI - Copy.pyx":304
 *                     if (self.pgnBoard.turn):
 *                         if (whiteCastledIndex == -1):
 *                             if (self.pgnBoard.is_castling(move)):             # <<<<<<<<<<<<<<
 *                                 print ("WHITE CASTLED")
 *                                 whiteCastledIndex = self.pgnBoard.ply()
 */
            }

            /* "ChessAI - Copy.pyx":303
 *                     # Check if the engine has castled and set the castling index
 *                     if (self.pgnBoard.turn):
 *                         if (whiteCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                             if (self.pgnBoard.is_castling(move)):
 *                                 print ("WHITE CASTLED")
 */
          }

          /* "ChessAI - Copy.pyx":302
 * 
 *                     # Check if the engine has castled and set the castling index
 *                     if (self.pgnBoard.turn):             # <<<<<<<<<<<<<<
 *                         if (whiteCastledIndex == -1):
 *                             if (self.pgnBoard.is_castling(move)):
 */
          goto __pyx_L26;
        }

        /* "ChessAI - Copy.pyx":308
 *                                 whiteCastledIndex = self.pgnBoard.ply()
 *                     else:
 *                         if (blackCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                             if (self.pgnBoard.is_castling(move)):
 *                                 print ("BLACK CASTLED")
 */
        /*else*/ {
          __pyx_t_15 = ((__pyx_v_7ChessAI_blackCastledIndex == -1L) != 0);
          if (__pyx_t_15) {

            /* "ChessAI - Copy.pyx":309
 *                     else:
 *                         if (blackCastledIndex == -1):
 *                             if (self.pgnBoard.is_castling(move)):             # <<<<<<<<<<<<<<
 *                                 print ("BLACK CASTLED")
 *                                 blackCastledIndex = self.pgnBoard.ply()
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_castling); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
              }
            }
            __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_move);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 309, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (__pyx_t_15) {

              /* "ChessAI - Copy.pyx":310
 *                         if (blackCastledIndex == -1):
 *                             if (self.pgnBoard.is_castling(move)):
 *                                 print ("BLACK CASTLED")             # <<<<<<<<<<<<<<
 *                                 blackCastledIndex = self.pgnBoard.ply()
 * 
 */
              __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

              /* "ChessAI - Copy.pyx":311
 *                             if (self.pgnBoard.is_castling(move)):
 *                                 print ("BLACK CASTLED")
 *                                 blackCastledIndex = self.pgnBoard.ply()             # <<<<<<<<<<<<<<
 * 
 *                     return move
 */
              __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_ply); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_3 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
                __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
                if (likely(__pyx_t_3)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                  __Pyx_INCREF(__pyx_t_3);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_1, function);
                }
              }
              __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_v_7ChessAI_blackCastledIndex = __pyx_t_14;

              /* "ChessAI - Copy.pyx":309
 *                     else:
 *                         if (blackCastledIndex == -1):
 *                             if (self.pgnBoard.is_castling(move)):             # <<<<<<<<<<<<<<
 *                                 print ("BLACK CASTLED")
 *                                 blackCastledIndex = self.pgnBoard.ply()
 */
            }

            /* "ChessAI - Copy.pyx":308
 *                                 whiteCastledIndex = self.pgnBoard.ply()
 *                     else:
 *                         if (blackCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                             if (self.pgnBoard.is_castling(move)):
 *                                 print ("BLACK CASTLED")
 */
          }
        }
        __pyx_L26:;

        /* "ChessAI - Copy.pyx":313
 *                                 blackCastledIndex = self.pgnBoard.ply()
 * 
 *                     return move             # <<<<<<<<<<<<<<
 *                 else:
 *                     return chess.Move.from_uci(x+y+i+j+chr(promo + 96))
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_v_move);
        __pyx_r = __pyx_v_move;
        goto __pyx_L0;

        /* "ChessAI - Copy.pyx":298
 *                 i = chr(c + 96)
 *                 j = str(d)
 *                 if (promo == -1):             # <<<<<<<<<<<<<<
 *                     move = chess.Move.from_uci(x+y+i+j)
 * 
 */
      }

      /* "ChessAI - Copy.pyx":315
 *                     return move
 *                 else:
 *                     return chess.Move.from_uci(x+y+i+j+chr(promo + 96))             # <<<<<<<<<<<<<<
 * 
 *         # Call the alpha beta algorithm to make a move decision
 */
      /*else*/ {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_chess); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Move_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 315, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_from_uci); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Add(__pyx_v_x, __pyx_v_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 315, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_17 = PyNumber_Add(__pyx_t_3, __pyx_v_i); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 315, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Add(__pyx_t_17, __pyx_v_j); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 315, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = __Pyx_PyInt_From_long((__pyx_v_promo + 96)); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 315, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_17); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 315, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = PyNumber_Add(__pyx_t_3, __pyx_t_16); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 315, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_16)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_16);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_2 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_16, __pyx_t_17) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_17);
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L0;
      }

      /* "ChessAI - Copy.pyx":285
 *             t1 = timer()
 *             # Check if an entry exists in the opening book
 *             if not((a,b,c,d) == (-1,-1,-1,-1)):             # <<<<<<<<<<<<<<
 *                 print(a,b,c,d)
 *                 print()
 */
    }

    /* "ChessAI - Copy.pyx":273
 * 
 *         # If less than 30 plies have been played, check the opening book
 *         if (len(self.pgnBoard.move_stack) < 30):             # <<<<<<<<<<<<<<
 *             result = self.opening_book(curDepth, depthLimit)
 * 
 */
  }

  /* "ChessAI - Copy.pyx":318
 * 
 *         # Call the alpha beta algorithm to make a move decision
 *         result = self.alphaBeta(curDepth=0, depthLimit=4, t0 = timer())             # <<<<<<<<<<<<<<
 *         val = result.score
 *         t1 = timer()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_timer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_17 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_17)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->alphaBeta(__pyx_v_self, 0, 4, __pyx_t_18);

  /* "ChessAI - Copy.pyx":319
 *         # Call the alpha beta algorithm to make a move decision
 *         result = self.alphaBeta(curDepth=0, depthLimit=4, t0 = timer())
 *         val = result.score             # <<<<<<<<<<<<<<
 *         t1 = timer()
 *         dif = t1 - t0
 */
  __pyx_t_14 = __pyx_v_result.score;
  __pyx_v_val = __pyx_t_14;

  /* "ChessAI - Copy.pyx":320
 *         result = self.alphaBeta(curDepth=0, depthLimit=4, t0 = timer())
 *         val = result.score
 *         t1 = timer()             # <<<<<<<<<<<<<<
 *         dif = t1 - t0
 *         new_depth = 5
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_timer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_17 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_17)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XDECREF_SET(__pyx_v_t1, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "ChessAI - Copy.pyx":321
 *         val = result.score
 *         t1 = timer()
 *         dif = t1 - t0             # <<<<<<<<<<<<<<
 *         new_depth = 5
 * 
 */
  __pyx_t_2 = PyNumber_Subtract(__pyx_v_t1, __pyx_v_t0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_dif = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ChessAI - Copy.pyx":322
 *         t1 = timer()
 *         dif = t1 - t0
 *         new_depth = 5             # <<<<<<<<<<<<<<
 * 
 *         # Check if the move generation time and value is low enough to warrant a deeper search
 */
  __pyx_v_new_depth = 5;

  /* "ChessAI - Copy.pyx":325
 * 
 *         # Check if the move generation time and value is low enough to warrant a deeper search
 *         while(dif <= self.move_times[new_depth-1] and new_depth <= 25 and val < 9000000):             # <<<<<<<<<<<<<<
 * 
 *             a = result.a
 */
  while (1) {
    if (unlikely(__pyx_v_self->move_times == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 325, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_new_depth - 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->move_times, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_dif, __pyx_t_1, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_15 = __pyx_t_4;
      goto __pyx_L33_bool_binop_done;
    }
    __pyx_t_4 = ((__pyx_v_new_depth <= 25) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_15 = __pyx_t_4;
      goto __pyx_L33_bool_binop_done;
    }
    __pyx_t_4 = ((__pyx_v_val < 0x895440) != 0);
    __pyx_t_15 = __pyx_t_4;
    __pyx_L33_bool_binop_done:;
    if (!__pyx_t_15) break;

    /* "ChessAI - Copy.pyx":327
 *         while(dif <= self.move_times[new_depth-1] and new_depth <= 25 and val < 9000000):
 * 
 *             a = result.a             # <<<<<<<<<<<<<<
 *             b = result.b
 *             c = result.c
 */
    __pyx_t_14 = __pyx_v_result.a;
    __pyx_v_a = __pyx_t_14;

    /* "ChessAI - Copy.pyx":328
 * 
 *             a = result.a
 *             b = result.b             # <<<<<<<<<<<<<<
 *             c = result.c
 *             d = result.d
 */
    __pyx_t_14 = __pyx_v_result.b;
    __pyx_v_b = __pyx_t_14;

    /* "ChessAI - Copy.pyx":329
 *             a = result.a
 *             b = result.b
 *             c = result.c             # <<<<<<<<<<<<<<
 *             d = result.d
 *             promo = result.promotion
 */
    __pyx_t_14 = __pyx_v_result.c;
    __pyx_v_c = __pyx_t_14;

    /* "ChessAI - Copy.pyx":330
 *             b = result.b
 *             c = result.c
 *             d = result.d             # <<<<<<<<<<<<<<
 *             promo = result.promotion
 * 
 */
    __pyx_t_14 = __pyx_v_result.d;
    __pyx_v_d = __pyx_t_14;

    /* "ChessAI - Copy.pyx":331
 *             c = result.c
 *             d = result.d
 *             promo = result.promotion             # <<<<<<<<<<<<<<
 * 
 *             if (val <= -15000):
 */
    __pyx_t_14 = __pyx_v_result.promotion;
    __pyx_v_promo = __pyx_t_14;

    /* "ChessAI - Copy.pyx":333
 *             promo = result.promotion
 * 
 *             if (val <= -15000):             # <<<<<<<<<<<<<<
 *                 return None
 *             print(a,b,c,d)
 */
    __pyx_t_15 = ((__pyx_v_val <= -15000L) != 0);
    if (__pyx_t_15) {

      /* "ChessAI - Copy.pyx":334
 * 
 *             if (val <= -15000):
 *                 return None             # <<<<<<<<<<<<<<
 *             print(a,b,c,d)
 *             print()
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;

      /* "ChessAI - Copy.pyx":333
 *             promo = result.promotion
 * 
 *             if (val <= -15000):             # <<<<<<<<<<<<<<
 *                 return None
 *             print(a,b,c,d)
 */
    }

    /* "ChessAI - Copy.pyx":335
 *             if (val <= -15000):
 *                 return None
 *             print(a,b,c,d)             # <<<<<<<<<<<<<<
 *             print()
 *             print("TRYING DEPTH: ", new_depth)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_c); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_d); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_16);
    __pyx_t_2 = 0;
    __pyx_t_1 = 0;
    __pyx_t_17 = 0;
    __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

    /* "ChessAI - Copy.pyx":336
 *                 return None
 *             print(a,b,c,d)
 *             print()             # <<<<<<<<<<<<<<
 *             print("TRYING DEPTH: ", new_depth)
 *             t0_new = timer()
 */
    __pyx_t_16 = __Pyx_PyObject_CallNoArg(__pyx_builtin_print); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

    /* "ChessAI - Copy.pyx":337
 *             print(a,b,c,d)
 *             print()
 *             print("TRYING DEPTH: ", new_depth)             # <<<<<<<<<<<<<<
 *             t0_new = timer()
 *             result = self.alphaBeta(curDepth=0, depthLimit=new_depth,  t0 = timer())
 */
    __pyx_t_16 = __Pyx_PyInt_From_long(__pyx_v_new_depth); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_kp_u_TRYING_DEPTH);
    __Pyx_GIVEREF(__pyx_kp_u_TRYING_DEPTH);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_TRYING_DEPTH);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_16);
    __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

    /* "ChessAI - Copy.pyx":338
 *             print()
 *             print("TRYING DEPTH: ", new_depth)
 *             t0_new = timer()             # <<<<<<<<<<<<<<
 *             result = self.alphaBeta(curDepth=0, depthLimit=new_depth,  t0 = timer())
 *             new_depth += 1
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_timer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_17 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_17)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_16 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_t0_new, __pyx_t_16);
    __pyx_t_16 = 0;

    /* "ChessAI - Copy.pyx":339
 *             print("TRYING DEPTH: ", new_depth)
 *             t0_new = timer()
 *             result = self.alphaBeta(curDepth=0, depthLimit=new_depth,  t0 = timer())             # <<<<<<<<<<<<<<
 *             new_depth += 1
 *             val = result.score
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_timer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_17 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_17)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_16 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_16); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_v_result = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->alphaBeta(__pyx_v_self, 0, __pyx_v_new_depth, __pyx_t_18);

    /* "ChessAI - Copy.pyx":340
 *             t0_new = timer()
 *             result = self.alphaBeta(curDepth=0, depthLimit=new_depth,  t0 = timer())
 *             new_depth += 1             # <<<<<<<<<<<<<<
 *             val = result.score
 *             t1 = timer()
 */
    __pyx_v_new_depth = (__pyx_v_new_depth + 1);

    /* "ChessAI - Copy.pyx":341
 *             result = self.alphaBeta(curDepth=0, depthLimit=new_depth,  t0 = timer())
 *             new_depth += 1
 *             val = result.score             # <<<<<<<<<<<<<<
 *             t1 = timer()
 *             dif = t1 - t0_new
 */
    __pyx_t_14 = __pyx_v_result.score;
    __pyx_v_val = __pyx_t_14;

    /* "ChessAI - Copy.pyx":342
 *             new_depth += 1
 *             val = result.score
 *             t1 = timer()             # <<<<<<<<<<<<<<
 *             dif = t1 - t0_new
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_timer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_17 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_17)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_16 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_t1, __pyx_t_16);
    __pyx_t_16 = 0;

    /* "ChessAI - Copy.pyx":343
 *             val = result.score
 *             t1 = timer()
 *             dif = t1 - t0_new             # <<<<<<<<<<<<<<
 * 
 *         a = result.a
 */
    __pyx_t_16 = PyNumber_Subtract(__pyx_v_t1, __pyx_v_t0_new); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF_SET(__pyx_v_dif, __pyx_t_16);
    __pyx_t_16 = 0;
  }

  /* "ChessAI - Copy.pyx":345
 *             dif = t1 - t0_new
 * 
 *         a = result.a             # <<<<<<<<<<<<<<
 *         b = result.b
 *         c = result.c
 */
  __pyx_t_14 = __pyx_v_result.a;
  __pyx_v_a = __pyx_t_14;

  /* "ChessAI - Copy.pyx":346
 * 
 *         a = result.a
 *         b = result.b             # <<<<<<<<<<<<<<
 *         c = result.c
 *         d = result.d
 */
  __pyx_t_14 = __pyx_v_result.b;
  __pyx_v_b = __pyx_t_14;

  /* "ChessAI - Copy.pyx":347
 *         a = result.a
 *         b = result.b
 *         c = result.c             # <<<<<<<<<<<<<<
 *         d = result.d
 *         promo = result.promotion
 */
  __pyx_t_14 = __pyx_v_result.c;
  __pyx_v_c = __pyx_t_14;

  /* "ChessAI - Copy.pyx":348
 *         b = result.b
 *         c = result.c
 *         d = result.d             # <<<<<<<<<<<<<<
 *         promo = result.promotion
 *         val = result.score
 */
  __pyx_t_14 = __pyx_v_result.d;
  __pyx_v_d = __pyx_t_14;

  /* "ChessAI - Copy.pyx":349
 *         c = result.c
 *         d = result.d
 *         promo = result.promotion             # <<<<<<<<<<<<<<
 *         val = result.score
 *         print(a,b,c,d)
 */
  __pyx_t_14 = __pyx_v_result.promotion;
  __pyx_v_promo = __pyx_t_14;

  /* "ChessAI - Copy.pyx":350
 *         d = result.d
 *         promo = result.promotion
 *         val = result.score             # <<<<<<<<<<<<<<
 *         print(a,b,c,d)
 * 
 */
  __pyx_t_14 = __pyx_v_result.score;
  __pyx_v_val = __pyx_t_14;

  /* "ChessAI - Copy.pyx":351
 *         promo = result.promotion
 *         val = result.score
 *         print(a,b,c,d)             # <<<<<<<<<<<<<<
 * 
 *         if not((a,b,c,d) == (-1,-1,-1,-1)):
 */
  __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_a); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_b); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_c); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_d); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_16);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_1);
  __pyx_t_16 = 0;
  __pyx_t_3 = 0;
  __pyx_t_17 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":353
 *         print(a,b,c,d)
 * 
 *         if not((a,b,c,d) == (-1,-1,-1,-1)):             # <<<<<<<<<<<<<<
 * 
 *             print()
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_b); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_c); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_d); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_16 = PyTuple_New(4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_17 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_16, __pyx_tuple__5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = ((!__pyx_t_15) != 0);
  if (__pyx_t_4) {

    /* "ChessAI - Copy.pyx":355
 *         if not((a,b,c,d) == (-1,-1,-1,-1)):
 * 
 *             print()             # <<<<<<<<<<<<<<
 *             print("Evaluation: ", val)
 *             print("Positions Analyzed: ",self.numIterations)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_builtin_print); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ChessAI - Copy.pyx":356
 * 
 *             print()
 *             print("Evaluation: ", val)             # <<<<<<<<<<<<<<
 *             print("Positions Analyzed: ",self.numIterations)
 *             print("Average Static Analysis Speed: ",self.numIterations/ (t1 - t0))
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_val); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_INCREF(__pyx_kp_u_Evaluation);
    __Pyx_GIVEREF(__pyx_kp_u_Evaluation);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_kp_u_Evaluation);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ChessAI - Copy.pyx":357
 *             print()
 *             print("Evaluation: ", val)
 *             print("Positions Analyzed: ",self.numIterations)             # <<<<<<<<<<<<<<
 *             print("Average Static Analysis Speed: ",self.numIterations/ (t1 - t0))
 *             print ("Time Taken: ", t1 - t0)
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->numIterations); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_INCREF(__pyx_kp_u_Positions_Analyzed);
    __Pyx_GIVEREF(__pyx_kp_u_Positions_Analyzed);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_kp_u_Positions_Analyzed);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ChessAI - Copy.pyx":358
 *             print("Evaluation: ", val)
 *             print("Positions Analyzed: ",self.numIterations)
 *             print("Average Static Analysis Speed: ",self.numIterations/ (t1 - t0))             # <<<<<<<<<<<<<<
 *             print ("Time Taken: ", t1 - t0)
 *             print("Move: ", self.pgnBoard.ply())
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->numIterations); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_16 = PyNumber_Subtract(__pyx_v_t1, __pyx_v_t0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_17 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_16); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_INCREF(__pyx_kp_u_Average_Static_Analysis_Speed);
    __Pyx_GIVEREF(__pyx_kp_u_Average_Static_Analysis_Speed);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_kp_u_Average_Static_Analysis_Speed);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_17);
    __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_16, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

    /* "ChessAI - Copy.pyx":359
 *             print("Positions Analyzed: ",self.numIterations)
 *             print("Average Static Analysis Speed: ",self.numIterations/ (t1 - t0))
 *             print ("Time Taken: ", t1 - t0)             # <<<<<<<<<<<<<<
 *             print("Move: ", self.pgnBoard.ply())
 *             print()
 */
    __pyx_t_17 = PyNumber_Subtract(__pyx_v_t1, __pyx_v_t0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_INCREF(__pyx_kp_u_Time_Taken);
    __Pyx_GIVEREF(__pyx_kp_u_Time_Taken);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_kp_u_Time_Taken);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_17);
    __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_16, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

    /* "ChessAI - Copy.pyx":360
 *             print("Average Static Analysis Speed: ",self.numIterations/ (t1 - t0))
 *             print ("Time Taken: ", t1 - t0)
 *             print("Move: ", self.pgnBoard.ply())             # <<<<<<<<<<<<<<
 *             print()
 * 
 */
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_ply); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    __pyx_t_17 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_16);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_INCREF(__pyx_kp_u_Move);
    __Pyx_GIVEREF(__pyx_kp_u_Move);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_kp_u_Move);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_17);
    __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_16, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

    /* "ChessAI - Copy.pyx":361
 *             print ("Time Taken: ", t1 - t0)
 *             print("Move: ", self.pgnBoard.ply())
 *             print()             # <<<<<<<<<<<<<<
 * 
 *             # Convert the coordinates to alphanumeric representation
 */
    __pyx_t_17 = __Pyx_PyObject_CallNoArg(__pyx_builtin_print); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

    /* "ChessAI - Copy.pyx":364
 * 
 *             # Convert the coordinates to alphanumeric representation
 *             x = chr(a + 96)             # <<<<<<<<<<<<<<
 *             y = str(b)
 *             i = chr(c + 96)
 */
    __pyx_t_17 = __Pyx_PyInt_From_long((__pyx_v_a + 96)); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_17); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_v_x = __pyx_t_16;
    __pyx_t_16 = 0;

    /* "ChessAI - Copy.pyx":365
 *             # Convert the coordinates to alphanumeric representation
 *             x = chr(a + 96)
 *             y = str(b)             # <<<<<<<<<<<<<<
 *             i = chr(c + 96)
 *             j = str(d)
 */
    __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_b); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_17 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_16); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_v_y = __pyx_t_17;
    __pyx_t_17 = 0;

    /* "ChessAI - Copy.pyx":366
 *             x = chr(a + 96)
 *             y = str(b)
 *             i = chr(c + 96)             # <<<<<<<<<<<<<<
 *             j = str(d)
 * 
 */
    __pyx_t_17 = __Pyx_PyInt_From_long((__pyx_v_c + 96)); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_17); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_v_i = __pyx_t_16;
    __pyx_t_16 = 0;

    /* "ChessAI - Copy.pyx":367
 *             y = str(b)
 *             i = chr(c + 96)
 *             j = str(d)             # <<<<<<<<<<<<<<
 * 
 *             # Check if the move is a promoting move
 */
    __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_d); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_17 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_16); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_v_j = __pyx_t_17;
    __pyx_t_17 = 0;

    /* "ChessAI - Copy.pyx":370
 * 
 *             # Check if the move is a promoting move
 *             if (promo == -1):             # <<<<<<<<<<<<<<
 *                 move = chess.Move.from_uci(x+y+i+j)
 * 
 */
    __pyx_t_4 = ((__pyx_v_promo == -1L) != 0);
    if (__pyx_t_4) {

      /* "ChessAI - Copy.pyx":371
 *             # Check if the move is a promoting move
 *             if (promo == -1):
 *                 move = chess.Move.from_uci(x+y+i+j)             # <<<<<<<<<<<<<<
 * 
 *                 # Check if the engine has castled and set the castling index
 */
      __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_chess); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_Move_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_from_uci); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_v_x, __pyx_v_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_j); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_16);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_16, function);
        }
      }
      __pyx_t_17 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_XDECREF_SET(__pyx_v_move, __pyx_t_17);
      __pyx_t_17 = 0;

      /* "ChessAI - Copy.pyx":374
 * 
 *                 # Check if the engine has castled and set the castling index
 *                 if (self.pgnBoard.turn):             # <<<<<<<<<<<<<<
 *                     if (whiteCastledIndex == -1):
 *                         if (self.pgnBoard.is_castling(move)):
 */
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_turn); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_17); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 374, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (__pyx_t_4) {

        /* "ChessAI - Copy.pyx":375
 *                 # Check if the engine has castled and set the castling index
 *                 if (self.pgnBoard.turn):
 *                     if (whiteCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                         if (self.pgnBoard.is_castling(move)):
 *                             print ("WHITE CASTLED")
 */
        __pyx_t_4 = ((__pyx_v_7ChessAI_whiteCastledIndex == -1L) != 0);
        if (__pyx_t_4) {

          /* "ChessAI - Copy.pyx":376
 *                 if (self.pgnBoard.turn):
 *                     if (whiteCastledIndex == -1):
 *                         if (self.pgnBoard.is_castling(move)):             # <<<<<<<<<<<<<<
 *                             print ("WHITE CASTLED")
 *                             whiteCastledIndex = self.pgnBoard.ply()
 */
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_castling); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 376, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_16);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_16, function);
            }
          }
          __pyx_t_17 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_3, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_v_move);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 376, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_17); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 376, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (__pyx_t_4) {

            /* "ChessAI - Copy.pyx":377
 *                     if (whiteCastledIndex == -1):
 *                         if (self.pgnBoard.is_castling(move)):
 *                             print ("WHITE CASTLED")             # <<<<<<<<<<<<<<
 *                             whiteCastledIndex = self.pgnBoard.ply()
 *                 else:
 */
            __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 377, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

            /* "ChessAI - Copy.pyx":378
 *                         if (self.pgnBoard.is_castling(move)):
 *                             print ("WHITE CASTLED")
 *                             whiteCastledIndex = self.pgnBoard.ply()             # <<<<<<<<<<<<<<
 *                 else:
 *                     if (blackCastledIndex == -1):
 */
            __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_ply); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 378, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_16);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_16, function);
              }
            }
            __pyx_t_17 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_16);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 378, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_17); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 378, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __pyx_v_7ChessAI_whiteCastledIndex = __pyx_t_14;

            /* "ChessAI - Copy.pyx":376
 *                 if (self.pgnBoard.turn):
 *                     if (whiteCastledIndex == -1):
 *                         if (self.pgnBoard.is_castling(move)):             # <<<<<<<<<<<<<<
 *                             print ("WHITE CASTLED")
 *                             whiteCastledIndex = self.pgnBoard.ply()
 */
          }

          /* "ChessAI - Copy.pyx":375
 *                 # Check if the engine has castled and set the castling index
 *                 if (self.pgnBoard.turn):
 *                     if (whiteCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                         if (self.pgnBoard.is_castling(move)):
 *                             print ("WHITE CASTLED")
 */
        }

        /* "ChessAI - Copy.pyx":374
 * 
 *                 # Check if the engine has castled and set the castling index
 *                 if (self.pgnBoard.turn):             # <<<<<<<<<<<<<<
 *                     if (whiteCastledIndex == -1):
 *                         if (self.pgnBoard.is_castling(move)):
 */
        goto __pyx_L39;
      }

      /* "ChessAI - Copy.pyx":380
 *                             whiteCastledIndex = self.pgnBoard.ply()
 *                 else:
 *                     if (blackCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                         if (self.pgnBoard.is_castling(move)):
 *                             print ("BLACK CASTLED")
 */
      /*else*/ {
        __pyx_t_4 = ((__pyx_v_7ChessAI_blackCastledIndex == -1L) != 0);
        if (__pyx_t_4) {

          /* "ChessAI - Copy.pyx":381
 *                 else:
 *                     if (blackCastledIndex == -1):
 *                         if (self.pgnBoard.is_castling(move)):             # <<<<<<<<<<<<<<
 *                             print ("BLACK CASTLED")
 *                             blackCastledIndex = self.pgnBoard.ply()
 */
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_castling); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 381, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_16);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_16, function);
            }
          }
          __pyx_t_17 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_3, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_v_move);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 381, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_17); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 381, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (__pyx_t_4) {

            /* "ChessAI - Copy.pyx":382
 *                     if (blackCastledIndex == -1):
 *                         if (self.pgnBoard.is_castling(move)):
 *                             print ("BLACK CASTLED")             # <<<<<<<<<<<<<<
 *                             blackCastledIndex = self.pgnBoard.ply()
 * 
 */
            __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 382, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

            /* "ChessAI - Copy.pyx":383
 *                         if (self.pgnBoard.is_castling(move)):
 *                             print ("BLACK CASTLED")
 *                             blackCastledIndex = self.pgnBoard.ply()             # <<<<<<<<<<<<<<
 * 
 *                 return move
 */
            __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_ply); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 383, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_16);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_16, function);
              }
            }
            __pyx_t_17 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_16);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 383, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_17); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __pyx_v_7ChessAI_blackCastledIndex = __pyx_t_14;

            /* "ChessAI - Copy.pyx":381
 *                 else:
 *                     if (blackCastledIndex == -1):
 *                         if (self.pgnBoard.is_castling(move)):             # <<<<<<<<<<<<<<
 *                             print ("BLACK CASTLED")
 *                             blackCastledIndex = self.pgnBoard.ply()
 */
          }

          /* "ChessAI - Copy.pyx":380
 *                             whiteCastledIndex = self.pgnBoard.ply()
 *                 else:
 *                     if (blackCastledIndex == -1):             # <<<<<<<<<<<<<<
 *                         if (self.pgnBoard.is_castling(move)):
 *                             print ("BLACK CASTLED")
 */
        }
      }
      __pyx_L39:;

      /* "ChessAI - Copy.pyx":385
 *                             blackCastledIndex = self.pgnBoard.ply()
 * 
 *                 return move             # <<<<<<<<<<<<<<
 *             else:
 *                 return chess.Move.from_uci(x+y+i+j+chr(promo + 96))
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_move);
      __pyx_r = __pyx_v_move;
      goto __pyx_L0;

      /* "ChessAI - Copy.pyx":370
 * 
 *             # Check if the move is a promoting move
 *             if (promo == -1):             # <<<<<<<<<<<<<<
 *                 move = chess.Move.from_uci(x+y+i+j)
 * 
 */
    }

    /* "ChessAI - Copy.pyx":387
 *                 return move
 *             else:
 *                 return chess.Move.from_uci(x+y+i+j+chr(promo + 96))             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_chess); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_Move_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_from_uci); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_v_x, __pyx_v_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_j); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_promo + 96)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_16);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_16, function);
        }
      }
      __pyx_t_17 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_2);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_r = __pyx_t_17;
      __pyx_t_17 = 0;
      goto __pyx_L0;
    }

    /* "ChessAI - Copy.pyx":353
 *         print(a,b,c,d)
 * 
 *         if not((a,b,c,d) == (-1,-1,-1,-1)):             # <<<<<<<<<<<<<<
 * 
 *             print()
 */
  }

  /* "ChessAI - Copy.pyx":389
 *                 return chess.Move.from_uci(x+y+i+j+chr(promo + 96))
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     # Function for opening book moves
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "ChessAI - Copy.pyx":179
 * 
 *     # Function to wrap the
 *     def alphaBetaWrapper(self, int curDepth, int depthLimit):             # <<<<<<<<<<<<<<
 * 
 *         # Start timer
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("ChessAI.ChessAI.alphaBetaWrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t0);
  __Pyx_XDECREF(__pyx_v_move);
  __Pyx_XDECREF(__pyx_v_t1);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_dif);
  __Pyx_XDECREF(__pyx_v_t0_new);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ChessAI - Copy.pyx":412
 *             # Sort entries by weight to find the best move
 *             if entries:
 *                 best_entry = max(entries, key=lambda e: e.weight)             # <<<<<<<<<<<<<<
 *                 print(f"Best Move: {best_entry.move}, Weight: {best_entry.weight}, Learn: {best_entry.learn}")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ChessAI_7ChessAI_12opening_book_lambda(PyObject *__pyx_self, PyObject *__pyx_v_e); /*proto*/
static PyMethodDef __pyx_mdef_7ChessAI_7ChessAI_12opening_book_lambda = {"lambda", (PyCFunction)__pyx_pw_7ChessAI_7ChessAI_12opening_book_lambda, METH_O, 0};
static PyObject *__pyx_pw_7ChessAI_7ChessAI_12opening_book_lambda(PyObject *__pyx_self, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, ((PyObject *)__pyx_v_e));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_e, __pyx_n_s_weight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ChessAI.ChessAI.opening_book.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ChessAI - Copy.pyx":394
 *     @cython.ccall
 *     @cython.exceptval(check=False)
 *     cdef MoveData opening_book(self, curDepth, depthLimit):             # <<<<<<<<<<<<<<
 *         cdef MoveData best_move
 *         cdef str cur
 */

static struct __pyx_t_7ChessAI_MoveData __pyx_f_7ChessAI_7ChessAI_opening_book(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_curDepth, CYTHON_UNUSED PyObject *__pyx_v_depthLimit) {
  struct __pyx_t_7ChessAI_MoveData __pyx_v_best_move;
  PyObject *__pyx_v_cur = 0;
  PyObject *__pyx_v_reader = NULL;
  PyObject *__pyx_v_entries = NULL;
  PyObject *__pyx_v_best_entry = NULL;
  struct __pyx_t_7ChessAI_MoveData __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  struct __pyx_t_7ChessAI_MoveData __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("opening_book", 0);

  /* "ChessAI - Copy.pyx":398
 *         cdef str cur
 * 
 *         best_move.a = -1             # <<<<<<<<<<<<<<
 *         best_move.b = -1
 *         best_move.c = -1
 */
  __pyx_v_best_move.a = -1;

  /* "ChessAI - Copy.pyx":399
 * 
 *         best_move.a = -1
 *         best_move.b = -1             # <<<<<<<<<<<<<<
 *         best_move.c = -1
 *         best_move.d = -1
 */
  __pyx_v_best_move.b = -1;

  /* "ChessAI - Copy.pyx":400
 *         best_move.a = -1
 *         best_move.b = -1
 *         best_move.c = -1             # <<<<<<<<<<<<<<
 *         best_move.d = -1
 *         best_move.promotion = -1
 */
  __pyx_v_best_move.c = -1;

  /* "ChessAI - Copy.pyx":401
 *         best_move.b = -1
 *         best_move.c = -1
 *         best_move.d = -1             # <<<<<<<<<<<<<<
 *         best_move.promotion = -1
 *         best_move.score = -99999999
 */
  __pyx_v_best_move.d = -1;

  /* "ChessAI - Copy.pyx":402
 *         best_move.c = -1
 *         best_move.d = -1
 *         best_move.promotion = -1             # <<<<<<<<<<<<<<
 *         best_move.score = -99999999
 * 
 */
  __pyx_v_best_move.promotion = -1;

  /* "ChessAI - Copy.pyx":403
 *         best_move.d = -1
 *         best_move.promotion = -1
 *         best_move.score = -99999999             # <<<<<<<<<<<<<<
 * 
 *         # Open the polyglot book
 */
  __pyx_v_best_move.score = -99999999;

  /* "ChessAI - Copy.pyx":406
 * 
 *         # Open the polyglot book
 *         with chess.polyglot.open_reader("M11.2.bin") as reader:             # <<<<<<<<<<<<<<
 *             # Find all entries for the current board position
 *             entries = list(reader.find_all(self.pgnBoard))
 */
  /*with:*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_chess); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_polyglot); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_open_reader); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_M11_2_bin) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_M11_2_bin);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 406, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        /*try:*/ {
          __pyx_v_reader = __pyx_t_3;
          __pyx_t_3 = 0;

          /* "ChessAI - Copy.pyx":408
 *         with chess.polyglot.open_reader("M11.2.bin") as reader:
 *             # Find all entries for the current board position
 *             entries = list(reader.find_all(self.pgnBoard))             # <<<<<<<<<<<<<<
 * 
 *             # Sort entries by weight to find the best move
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_find_all); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 408, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_self->pgnBoard) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_self->pgnBoard);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 408, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 408, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_v_entries = ((PyObject*)__pyx_t_1);
          __pyx_t_1 = 0;

          /* "ChessAI - Copy.pyx":411
 * 
 *             # Sort entries by weight to find the best move
 *             if entries:             # <<<<<<<<<<<<<<
 *                 best_entry = max(entries, key=lambda e: e.weight)
 *                 print(f"Best Move: {best_entry.move}, Weight: {best_entry.weight}, Learn: {best_entry.learn}")
 */
          __pyx_t_9 = (PyList_GET_SIZE(__pyx_v_entries) != 0);
          if (__pyx_t_9) {

            /* "ChessAI - Copy.pyx":412
 *             # Sort entries by weight to find the best move
 *             if entries:
 *                 best_entry = max(entries, key=lambda e: e.weight)             # <<<<<<<<<<<<<<
 *                 print(f"Best Move: {best_entry.move}, Weight: {best_entry.weight}, Learn: {best_entry.learn}")
 * 
 */
            __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_INCREF(__pyx_v_entries);
            __Pyx_GIVEREF(__pyx_v_entries);
            PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_entries);
            __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 412, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7ChessAI_7ChessAI_12opening_book_lambda, 0, __pyx_n_s_ChessAI_opening_book_locals_lamb, NULL, __pyx_n_s_ChessAI, __pyx_d, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_2);
            if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_key, __pyx_t_2) < 0) __PYX_ERR(0, 412, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_v_best_entry = __pyx_t_2;
            __pyx_t_2 = 0;

            /* "ChessAI - Copy.pyx":413
 *             if entries:
 *                 best_entry = max(entries, key=lambda e: e.weight)
 *                 print(f"Best Move: {best_entry.move}, Weight: {best_entry.weight}, Learn: {best_entry.learn}")             # <<<<<<<<<<<<<<
 * 
 *                 cur = best_entry.move.uci()
 */
            __pyx_t_2 = PyTuple_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_10 = 0;
            __pyx_t_11 = 127;
            __Pyx_INCREF(__pyx_kp_u_Best_Move);
            __pyx_t_10 += 11;
            __Pyx_GIVEREF(__pyx_kp_u_Best_Move);
            PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Best_Move);
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_best_entry, __pyx_n_s_move); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 413, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
            __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
            __pyx_t_1 = 0;
            __Pyx_INCREF(__pyx_kp_u_Weight);
            __pyx_t_10 += 10;
            __Pyx_GIVEREF(__pyx_kp_u_Weight);
            PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_Weight);
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_best_entry, __pyx_n_s_weight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 413, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_11;
            __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
            __pyx_t_3 = 0;
            __Pyx_INCREF(__pyx_kp_u_Learn);
            __pyx_t_10 += 9;
            __Pyx_GIVEREF(__pyx_kp_u_Learn);
            PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_Learn);
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_best_entry, __pyx_n_s_learn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 413, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
            __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_2, 6, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "ChessAI - Copy.pyx":415
 *                 print(f"Best Move: {best_entry.move}, Weight: {best_entry.weight}, Learn: {best_entry.learn}")
 * 
 *                 cur = best_entry.move.uci()             # <<<<<<<<<<<<<<
 * 
 *                 best_move.score = 0
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_best_entry, __pyx_n_s_move); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_uci); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 415, __pyx_L7_error)
            __pyx_v_cur = ((PyObject*)__pyx_t_2);
            __pyx_t_2 = 0;

            /* "ChessAI - Copy.pyx":417
 *                 cur = best_entry.move.uci()
 * 
 *                 best_move.score = 0             # <<<<<<<<<<<<<<
 *                 best_move.a = ord(cur[0]) - 96
 *                 best_move.b = ord(cur[1]) - ord('0')
 */
            __pyx_v_best_move.score = 0;

            /* "ChessAI - Copy.pyx":418
 * 
 *                 best_move.score = 0
 *                 best_move.a = ord(cur[0]) - 96             # <<<<<<<<<<<<<<
 *                 best_move.b = ord(cur[1]) - ord('0')
 *                 best_move.c = ord(cur[2]) - 96
 */
            __pyx_t_11 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_11 == (Py_UCS4)-1)) __PYX_ERR(0, 418, __pyx_L7_error)
            __pyx_v_best_move.a = (((long)__pyx_t_11) - 96);

            /* "ChessAI - Copy.pyx":419
 *                 best_move.score = 0
 *                 best_move.a = ord(cur[0]) - 96
 *                 best_move.b = ord(cur[1]) - ord('0')             # <<<<<<<<<<<<<<
 *                 best_move.c = ord(cur[2]) - 96
 *                 best_move.d = ord(cur[3]) - ord('0')
 */
            __pyx_t_11 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_11 == (Py_UCS4)-1)) __PYX_ERR(0, 419, __pyx_L7_error)
            __pyx_v_best_move.b = (((long)__pyx_t_11) - 48);

            /* "ChessAI - Copy.pyx":420
 *                 best_move.a = ord(cur[0]) - 96
 *                 best_move.b = ord(cur[1]) - ord('0')
 *                 best_move.c = ord(cur[2]) - 96             # <<<<<<<<<<<<<<
 *                 best_move.d = ord(cur[3]) - ord('0')
 * 
 */
            __pyx_t_11 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_11 == (Py_UCS4)-1)) __PYX_ERR(0, 420, __pyx_L7_error)
            __pyx_v_best_move.c = (((long)__pyx_t_11) - 96);

            /* "ChessAI - Copy.pyx":421
 *                 best_move.b = ord(cur[1]) - ord('0')
 *                 best_move.c = ord(cur[2]) - 96
 *                 best_move.d = ord(cur[3]) - ord('0')             # <<<<<<<<<<<<<<
 * 
 * 
 */
            __pyx_t_11 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_11 == (Py_UCS4)-1)) __PYX_ERR(0, 421, __pyx_L7_error)
            __pyx_v_best_move.d = (((long)__pyx_t_11) - 48);

            /* "ChessAI - Copy.pyx":411
 * 
 *             # Sort entries by weight to find the best move
 *             if entries:             # <<<<<<<<<<<<<<
 *                 best_entry = max(entries, key=lambda e: e.weight)
 *                 print(f"Best Move: {best_entry.move}, Weight: {best_entry.weight}, Learn: {best_entry.learn}")
 */
          }

          /* "ChessAI - Copy.pyx":424
 * 
 * 
 *             return best_move             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_r = __pyx_v_best_move;
          goto __pyx_L11_try_return;

          /* "ChessAI - Copy.pyx":406
 * 
 *         # Open the polyglot book
 *         with chess.polyglot.open_reader("M11.2.bin") as reader:             # <<<<<<<<<<<<<<
 *             # Find all entries for the current board position
 *             entries = list(reader.find_all(self.pgnBoard))
 */
        }
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("ChessAI.ChessAI.opening_book", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_1) < 0) __PYX_ERR(0, 406, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 406, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 406, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__pyx_t_9 < 0) __PYX_ERR(0, 406, __pyx_L9_except_error)
          __pyx_t_13 = ((!(__pyx_t_9 != 0)) != 0);
          if (__pyx_t_13) {
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_XGIVEREF(__pyx_t_1);
            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_3, __pyx_t_1);
            __pyx_t_2 = 0; __pyx_t_3 = 0; __pyx_t_1 = 0; 
            __PYX_ERR(0, 406, __pyx_L9_except_error)
          }
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        goto __pyx_L1_error;
        __pyx_L11_try_return:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        goto __pyx_L4_return;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_4) {
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__7, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 406, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L4_return: {
        __pyx_t_14 = __pyx_r;
        if (__pyx_t_4) {
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__7, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 406, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_r = __pyx_t_14;
        goto __pyx_L0;
      }
      __pyx_L6:;
    }
    goto __pyx_L17;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L1_error;
    __pyx_L17:;
  }

  /* "ChessAI - Copy.pyx":394
 *     @cython.ccall
 *     @cython.exceptval(check=False)
 *     cdef MoveData opening_book(self, curDepth, depthLimit):             # <<<<<<<<<<<<<<
 *         cdef MoveData best_move
 *         cdef str cur
 */

  /* function exit code */
  __Pyx_pretend_to_initialize(&__pyx_r);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("ChessAI.ChessAI.opening_book", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cur);
  __Pyx_XDECREF(__pyx_v_reader);
  __Pyx_XDECREF(__pyx_v_entries);
  __Pyx_XDECREF(__pyx_v_best_entry);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ChessAI - Copy.pyx":434
 *     @cython.ccall
 *     @cython.inline
 *     cdef MoveData alphaBeta(self, int curDepth, int depthLimit, double t0):             # <<<<<<<<<<<<<<
 * 
 *         # Initialize alpha and beta values
 */

static struct __pyx_t_7ChessAI_MoveData __pyx_f_7ChessAI_7ChessAI_alphaBeta(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_curDepth, int __pyx_v_depthLimit, double __pyx_v_t0) {
  int __pyx_v_alpha;
  int __pyx_v_beta;
  int __pyx_v_score;
  PyObject *__pyx_v_move = 0;
  PyObject *__pyx_v_cur = 0;
  struct __pyx_t_7ChessAI_MoveData __pyx_v_bestMove;
  uint64_t __pyx_v_pawns;
  uint64_t __pyx_v_knights;
  uint64_t __pyx_v_bishops;
  uint64_t __pyx_v_rooks;
  uint64_t __pyx_v_queens;
  uint64_t __pyx_v_kings;
  uint64_t __pyx_v_occupied_white;
  uint64_t __pyx_v_occupied_black;
  CYTHON_UNUSED uint64_t __pyx_v_occupied;
  PyObject *__pyx_v_moves_list = 0;
  PyObject *__pyx_v_alpha_list = 0;
  PyObject *__pyx_v_beta_list = 0;
  PyObject *__pyx_v_beta_move_list = 0;
  uint64_t __pyx_v_curHash;
  int __pyx_v_razorThreshold;
  int __pyx_v_num_legal_moves;
  int __pyx_v_best_move_index;
  int __pyx_v_count;
  int __pyx_v_depthUsage;
  int __pyx_v_isCapture;
  int __pyx_v_promotion;
  int __pyx_v_repetitionFlag;
  PyObject *__pyx_v_repetitionMove = 0;
  int __pyx_v_repetitionScore;
  CYTHON_UNUSED int __pyx_v_i;
  struct __pyx_t_7ChessAI_MoveData __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  uint64_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  long __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  uint8_t __pyx_t_11;
  uint8_t __pyx_t_12;
  int __pyx_t_13;
  Py_UCS4 __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("alphaBeta", 0);

  /* "ChessAI - Copy.pyx":437
 * 
 *         # Initialize alpha and beta values
 *         cdef int alpha = -9999998             # <<<<<<<<<<<<<<
 *         cdef int beta = 9999998
 * 
 */
  __pyx_v_alpha = -9999998;

  /* "ChessAI - Copy.pyx":438
 *         # Initialize alpha and beta values
 *         cdef int alpha = -9999998
 *         cdef int beta = 9999998             # <<<<<<<<<<<<<<
 * 
 *         # Initialize variables to hold the current move, its string representation and score
 */
  __pyx_v_beta = 0x98967E;

  /* "ChessAI - Copy.pyx":447
 *         # Define and initialize the struct to return the best move
 *         cdef MoveData bestMove
 *         bestMove.a = -1             # <<<<<<<<<<<<<<
 *         bestMove.b = -1
 *         bestMove.c = -1
 */
  __pyx_v_bestMove.a = -1;

  /* "ChessAI - Copy.pyx":448
 *         cdef MoveData bestMove
 *         bestMove.a = -1
 *         bestMove.b = -1             # <<<<<<<<<<<<<<
 *         bestMove.c = -1
 *         bestMove.d = -1
 */
  __pyx_v_bestMove.b = -1;

  /* "ChessAI - Copy.pyx":449
 *         bestMove.a = -1
 *         bestMove.b = -1
 *         bestMove.c = -1             # <<<<<<<<<<<<<<
 *         bestMove.d = -1
 *         bestMove.promotion = -1
 */
  __pyx_v_bestMove.c = -1;

  /* "ChessAI - Copy.pyx":450
 *         bestMove.b = -1
 *         bestMove.c = -1
 *         bestMove.d = -1             # <<<<<<<<<<<<<<
 *         bestMove.promotion = -1
 *         bestMove.score = -99999999
 */
  __pyx_v_bestMove.d = -1;

  /* "ChessAI - Copy.pyx":451
 *         bestMove.c = -1
 *         bestMove.d = -1
 *         bestMove.promotion = -1             # <<<<<<<<<<<<<<
 *         bestMove.score = -99999999
 * 
 */
  __pyx_v_bestMove.promotion = -1;

  /* "ChessAI - Copy.pyx":452
 *         bestMove.d = -1
 *         bestMove.promotion = -1
 *         bestMove.score = -99999999             # <<<<<<<<<<<<<<
 * 
 *         # Initialize bitmasks for the current board state
 */
  __pyx_v_bestMove.score = -99999999;

  /* "ChessAI - Copy.pyx":455
 * 
 *         # Initialize bitmasks for the current board state
 *         cdef uint64_t pawns = self.pgnBoard.pawns             # <<<<<<<<<<<<<<
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_pawns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pawns = __pyx_t_2;

  /* "ChessAI - Copy.pyx":456
 *         # Initialize bitmasks for the current board state
 *         cdef uint64_t pawns = self.pgnBoard.pawns
 *         cdef uint64_t knights = self.pgnBoard.knights             # <<<<<<<<<<<<<<
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_knights); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_knights = __pyx_t_2;

  /* "ChessAI - Copy.pyx":457
 *         cdef uint64_t pawns = self.pgnBoard.pawns
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops             # <<<<<<<<<<<<<<
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_bishops); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_bishops = __pyx_t_2;

  /* "ChessAI - Copy.pyx":458
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks             # <<<<<<<<<<<<<<
 *         cdef uint64_t queens = self.pgnBoard.queens
 *         cdef uint64_t kings = self.pgnBoard.kings
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_rooks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rooks = __pyx_t_2;

  /* "ChessAI - Copy.pyx":459
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens             # <<<<<<<<<<<<<<
 *         cdef uint64_t kings = self.pgnBoard.kings
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_queens); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_queens = __pyx_t_2;

  /* "ChessAI - Copy.pyx":460
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens
 *         cdef uint64_t kings = self.pgnBoard.kings             # <<<<<<<<<<<<<<
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_kings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_kings = __pyx_t_2;

  /* "ChessAI - Copy.pyx":462
 *         cdef uint64_t kings = self.pgnBoard.kings
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]             # <<<<<<<<<<<<<<
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]
 *         cdef uint64_t occupied = self.pgnBoard.occupied
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 1, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_occupied_white = __pyx_t_2;

  /* "ChessAI - Copy.pyx":463
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]             # <<<<<<<<<<<<<<
 *         cdef uint64_t occupied = self.pgnBoard.occupied
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 0, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_occupied_black = __pyx_t_2;

  /* "ChessAI - Copy.pyx":464
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]
 *         cdef uint64_t occupied = self.pgnBoard.occupied             # <<<<<<<<<<<<<<
 * 
 *         # Define lists to hold move lists and respective scores acquired in previous search
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_occupied = __pyx_t_2;

  /* "ChessAI - Copy.pyx":473
 * 
 *         # Define variable to hold the zobrist hash for the current board state
 *         cdef uint64_t curHash = self.zobrist             # <<<<<<<<<<<<<<
 * 
 *         # Call function to sort moves based on a previous search
 */
  __pyx_t_2 = __pyx_v_self->zobrist;
  __pyx_v_curHash = __pyx_t_2;

  /* "ChessAI - Copy.pyx":476
 * 
 *         # Call function to sort moves based on a previous search
 *         moves_list, alpha_list,beta_list, beta_move_list = self.reorder_legal_moves(alpha,beta, depthLimit)             # <<<<<<<<<<<<<<
 * 
 *         # Define the razor threshold, if not the first move search iteration, razor more aggressively
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_depthLimit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->reorder_legal_moves(__pyx_v_self, __pyx_v_alpha, __pyx_v_beta, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 476, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
    __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 476, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 476, __pyx_L1_error)
  }
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 476, __pyx_L1_error)
  if (!(likely(PyList_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 476, __pyx_L1_error)
  if (!(likely(PyList_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 476, __pyx_L1_error)
  if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 476, __pyx_L1_error)
  __pyx_v_moves_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_alpha_list = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_v_beta_list = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_v_beta_move_list = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "ChessAI - Copy.pyx":480
 *         # Define the razor threshold, if not the first move search iteration, razor more aggressively
 *         cdef int razorThreshold
 *         if (self.alpha_list == []):             # <<<<<<<<<<<<<<
 *             razorThreshold = max (int(750 * .75** (depthLimit - 5)), 200)
 *         else:
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyObject_RichCompare(__pyx_v_self->alpha_list, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_7) {

    /* "ChessAI - Copy.pyx":481
 *         cdef int razorThreshold
 *         if (self.alpha_list == []):
 *             razorThreshold = max (int(750 * .75** (depthLimit - 5)), 200)             # <<<<<<<<<<<<<<
 *         else:
 *             razorThreshold = max (int(300 * .75** (depthLimit - 5)), 50)
 */
    __pyx_t_8 = 0xC8;
    __pyx_t_6 = __Pyx_PyInt_FromDouble((750.0 * pow(.75, ((double)(__pyx_v_depthLimit - 5))))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 481, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 481, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 481, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __pyx_t_4;
      __pyx_t_4 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_3 = __pyx_t_6;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_razorThreshold = __pyx_t_9;

    /* "ChessAI - Copy.pyx":480
 *         # Define the razor threshold, if not the first move search iteration, razor more aggressively
 *         cdef int razorThreshold
 *         if (self.alpha_list == []):             # <<<<<<<<<<<<<<
 *             razorThreshold = max (int(750 * .75** (depthLimit - 5)), 200)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "ChessAI - Copy.pyx":483
 *             razorThreshold = max (int(750 * .75** (depthLimit - 5)), 200)
 *         else:
 *             razorThreshold = max (int(300 * .75** (depthLimit - 5)), 50)             # <<<<<<<<<<<<<<
 * 
 *         # After the in scope lists have been initialized, the global ones can be reset
 */
  /*else*/ {
    __pyx_t_8 = 50;
    __pyx_t_3 = __Pyx_PyInt_FromDouble((300.0 * pow(.75, ((double)(__pyx_v_depthLimit - 5))))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_7) {
      __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 483, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_t_5;
      __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_6 = __pyx_t_3;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_razorThreshold = __pyx_t_9;
  }
  __pyx_L3:;

  /* "ChessAI - Copy.pyx":486
 * 
 *         # After the in scope lists have been initialized, the global ones can be reset
 *         self.alpha_list = []             # <<<<<<<<<<<<<<
 *         self.beta_list = []
 *         self.beta_move_list = []
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->alpha_list);
  __Pyx_DECREF(__pyx_v_self->alpha_list);
  __pyx_v_self->alpha_list = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "ChessAI - Copy.pyx":487
 *         # After the in scope lists have been initialized, the global ones can be reset
 *         self.alpha_list = []
 *         self.beta_list = []             # <<<<<<<<<<<<<<
 *         self.beta_move_list = []
 * 
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->beta_list);
  __Pyx_DECREF(__pyx_v_self->beta_list);
  __pyx_v_self->beta_list = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "ChessAI - Copy.pyx":488
 *         self.alpha_list = []
 *         self.beta_list = []
 *         self.beta_move_list = []             # <<<<<<<<<<<<<<
 * 
 *         # Define the number of moves, the best move index and the current index
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->beta_move_list);
  __Pyx_DECREF(__pyx_v_self->beta_move_list);
  __pyx_v_self->beta_move_list = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "ChessAI - Copy.pyx":491
 * 
 *         # Define the number of moves, the best move index and the current index
 *         cdef int num_legal_moves = len(moves_list)             # <<<<<<<<<<<<<<
 *         cdef int best_move_index = -1
 *         cdef int count = 1
 */
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 491, __pyx_L1_error)
  }
  __pyx_t_10 = PyList_GET_SIZE(__pyx_v_moves_list); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 491, __pyx_L1_error)
  __pyx_v_num_legal_moves = __pyx_t_10;

  /* "ChessAI - Copy.pyx":492
 *         # Define the number of moves, the best move index and the current index
 *         cdef int num_legal_moves = len(moves_list)
 *         cdef int best_move_index = -1             # <<<<<<<<<<<<<<
 *         cdef int count = 1
 * 
 */
  __pyx_v_best_move_index = -1;

  /* "ChessAI - Copy.pyx":493
 *         cdef int num_legal_moves = len(moves_list)
 *         cdef int best_move_index = -1
 *         cdef int count = 1             # <<<<<<<<<<<<<<
 * 
 *         # Define the depth that should be used
 */
  __pyx_v_count = 1;

  /* "ChessAI - Copy.pyx":496
 * 
 *         # Define the depth that should be used
 *         cdef int depthUsage = 0             # <<<<<<<<<<<<<<
 * 
 *         # Define variables to hold information for zobrist hashing
 */
  __pyx_v_depthUsage = 0;

  /* "ChessAI - Copy.pyx":500
 *         # Define variables to hold information for zobrist hashing
 *         cdef bint isCapture
 *         cdef int promotion = 0             # <<<<<<<<<<<<<<
 * 
 *         # Define variables to hold information on repeating moves
 */
  __pyx_v_promotion = 0;

  /* "ChessAI - Copy.pyx":503
 * 
 *         # Define variables to hold information on repeating moves
 *         cdef bint repetitionFlag = False             # <<<<<<<<<<<<<<
 *         cdef object repetitionMove = None
 *         cdef int repetitionScore = 0
 */
  __pyx_v_repetitionFlag = 0;

  /* "ChessAI - Copy.pyx":504
 *         # Define variables to hold information on repeating moves
 *         cdef bint repetitionFlag = False
 *         cdef object repetitionMove = None             # <<<<<<<<<<<<<<
 *         cdef int repetitionScore = 0
 * 
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_repetitionMove = Py_None;

  /* "ChessAI - Copy.pyx":505
 *         cdef bint repetitionFlag = False
 *         cdef object repetitionMove = None
 *         cdef int repetitionScore = 0             # <<<<<<<<<<<<<<
 * 
 *         if (depthLimit >= 5):
 */
  __pyx_v_repetitionScore = 0;

  /* "ChessAI - Copy.pyx":507
 *         cdef int repetitionScore = 0
 * 
 *         if (depthLimit >= 5):             # <<<<<<<<<<<<<<
 *             print("Num Moves: ", num_legal_moves)
 * 
 */
  __pyx_t_7 = ((__pyx_v_depthLimit >= 5) != 0);
  if (__pyx_t_7) {

    /* "ChessAI - Copy.pyx":508
 * 
 *         if (depthLimit >= 5):
 *             print("Num Moves: ", num_legal_moves)             # <<<<<<<<<<<<<<
 * 
 *         # Check if the move is a promoting move
 */
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_num_legal_moves); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_kp_u_Num_Moves);
    __Pyx_GIVEREF(__pyx_kp_u_Num_Moves);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Num_Moves);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ChessAI - Copy.pyx":507
 *         cdef int repetitionScore = 0
 * 
 *         if (depthLimit >= 5):             # <<<<<<<<<<<<<<
 *             print("Num Moves: ", num_legal_moves)
 * 
 */
  }

  /* "ChessAI - Copy.pyx":511
 * 
 *         # Check if the move is a promoting move
 *         if (moves_list[0].promotion):             # <<<<<<<<<<<<<<
 *             promotion = moves_list[0].promotion
 *         else:
 */
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 511, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_moves_list, 0), __pyx_n_s_promotion); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_7) {

    /* "ChessAI - Copy.pyx":512
 *         # Check if the move is a promoting move
 *         if (moves_list[0].promotion):
 *             promotion = moves_list[0].promotion             # <<<<<<<<<<<<<<
 *         else:
 *             promotion = 0
 */
    if (unlikely(__pyx_v_moves_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 512, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_moves_list, 0), __pyx_n_s_promotion); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_promotion = __pyx_t_9;

    /* "ChessAI - Copy.pyx":511
 * 
 *         # Check if the move is a promoting move
 *         if (moves_list[0].promotion):             # <<<<<<<<<<<<<<
 *             promotion = moves_list[0].promotion
 *         else:
 */
    goto __pyx_L5;
  }

  /* "ChessAI - Copy.pyx":514
 *             promotion = moves_list[0].promotion
 *         else:
 *             promotion = 0             # <<<<<<<<<<<<<<
 * 
 *         # Acquire the zobrist hash for the new position if the given move was made
 */
  /*else*/ {
    __pyx_v_promotion = 0;
  }
  __pyx_L5:;

  /* "ChessAI - Copy.pyx":517
 * 
 *         # Acquire the zobrist hash for the new position if the given move was made
 *         isCapture = is_capture(moves_list[0].from_square, moves_list[0].to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(moves_list[0]))             # <<<<<<<<<<<<<<
 *         updateZobristHashForMove(self.zobrist, moves_list[0].from_square, moves_list[0].to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)
 * 
 */
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 517, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_moves_list, 0), __pyx_n_s_from_square); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_11 = __Pyx_PyInt_As_uint8_t(__pyx_t_6); if (unlikely((__pyx_t_11 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 517, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_moves_list, 0), __pyx_n_s_to_square); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_12 = __Pyx_PyInt_As_uint8_t(__pyx_t_6); if (unlikely((__pyx_t_12 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_turn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_13 = (!__pyx_t_7);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_6, __pyx_t_13, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_en_passant); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 517, __pyx_L1_error)
  }
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, PyList_GET_ITEM(__pyx_v_moves_list, 0)) : __Pyx_PyObject_CallOneArg(__pyx_t_6, PyList_GET_ITEM(__pyx_v_moves_list, 0));
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_isCapture = is_capture(__pyx_t_11, __pyx_t_12, __pyx_t_2, __pyx_t_13);

  /* "ChessAI - Copy.pyx":518
 *         # Acquire the zobrist hash for the new position if the given move was made
 *         isCapture = is_capture(moves_list[0].from_square, moves_list[0].to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(moves_list[0]))
 *         updateZobristHashForMove(self.zobrist, moves_list[0].from_square, moves_list[0].to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)             # <<<<<<<<<<<<<<
 * 
 *         # Make the move and call the minimizer
 */
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 518, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_moves_list, 0), __pyx_n_s_from_square); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = __Pyx_PyInt_As_uint8_t(__pyx_t_3); if (unlikely((__pyx_t_12 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 518, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_moves_list, 0), __pyx_n_s_to_square); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = __Pyx_PyInt_As_uint8_t(__pyx_t_3); if (unlikely((__pyx_t_11 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  updateZobristHashForMove(__pyx_v_self->zobrist, __pyx_t_12, __pyx_t_11, __pyx_v_isCapture, __pyx_v_pawns, __pyx_v_knights, __pyx_v_bishops, __pyx_v_rooks, __pyx_v_queens, __pyx_v_kings, __pyx_v_occupied_white, __pyx_v_occupied_black, __pyx_v_promotion);

  /* "ChessAI - Copy.pyx":521
 * 
 *         # Make the move and call the minimizer
 *         self.pgnBoard.push(moves_list[0])             # <<<<<<<<<<<<<<
 *         score = self.minimizer(curDepth + 1, depthLimit, alpha, beta, beta_list[0], beta_move_list[0])
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_push); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 521, __pyx_L1_error)
  }
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, PyList_GET_ITEM(__pyx_v_moves_list, 0)) : __Pyx_PyObject_CallOneArg(__pyx_t_6, PyList_GET_ITEM(__pyx_v_moves_list, 0));
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ChessAI - Copy.pyx":522
 *         # Make the move and call the minimizer
 *         self.pgnBoard.push(moves_list[0])
 *         score = self.minimizer(curDepth + 1, depthLimit, alpha, beta, beta_list[0], beta_move_list[0])             # <<<<<<<<<<<<<<
 * 
 *         # Check if the position is repeating after the move
 */
  if (unlikely(__pyx_v_beta_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 522, __pyx_L1_error)
  }
  if (!(likely(PyList_CheckExact(PyList_GET_ITEM(__pyx_v_beta_list, 0)))||((PyList_GET_ITEM(__pyx_v_beta_list, 0)) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(PyList_GET_ITEM(__pyx_v_beta_list, 0))->tp_name), 0))) __PYX_ERR(0, 522, __pyx_L1_error)
  __pyx_t_3 = PyList_GET_ITEM(__pyx_v_beta_list, 0);
  __Pyx_INCREF(__pyx_t_3);
  if (unlikely(__pyx_v_beta_move_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 522, __pyx_L1_error)
  }
  if (!(likely(PyList_CheckExact(PyList_GET_ITEM(__pyx_v_beta_move_list, 0)))||((PyList_GET_ITEM(__pyx_v_beta_move_list, 0)) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(PyList_GET_ITEM(__pyx_v_beta_move_list, 0))->tp_name), 0))) __PYX_ERR(0, 522, __pyx_L1_error)
  __pyx_t_6 = PyList_GET_ITEM(__pyx_v_beta_move_list, 0);
  __Pyx_INCREF(__pyx_t_6);
  __pyx_v_score = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->minimizer(__pyx_v_self, (__pyx_v_curDepth + 1), __pyx_v_depthLimit, __pyx_v_alpha, __pyx_v_beta, ((PyObject*)__pyx_t_3), ((PyObject*)__pyx_t_6));
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "ChessAI - Copy.pyx":525
 * 
 *         # Check if the position is repeating after the move
 *         if (self.pgnBoard.is_repetition(2)):             # <<<<<<<<<<<<<<
 *             repetitionFlag = True
 *             repetitionMove = moves_list[0]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_repetition); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_int_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_int_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_13) {

    /* "ChessAI - Copy.pyx":526
 *         # Check if the position is repeating after the move
 *         if (self.pgnBoard.is_repetition(2)):
 *             repetitionFlag = True             # <<<<<<<<<<<<<<
 *             repetitionMove = moves_list[0]
 *             repetitionScore = score
 */
    __pyx_v_repetitionFlag = 1;

    /* "ChessAI - Copy.pyx":527
 *         if (self.pgnBoard.is_repetition(2)):
 *             repetitionFlag = True
 *             repetitionMove = moves_list[0]             # <<<<<<<<<<<<<<
 *             repetitionScore = score
 *             score = -100000000
 */
    if (unlikely(__pyx_v_moves_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 527, __pyx_L1_error)
    }
    __pyx_t_6 = PyList_GET_ITEM(__pyx_v_moves_list, 0);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_repetitionMove, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "ChessAI - Copy.pyx":528
 *             repetitionFlag = True
 *             repetitionMove = moves_list[0]
 *             repetitionScore = score             # <<<<<<<<<<<<<<
 *             score = -100000000
 * 
 */
    __pyx_v_repetitionScore = __pyx_v_score;

    /* "ChessAI - Copy.pyx":529
 *             repetitionMove = moves_list[0]
 *             repetitionScore = score
 *             score = -100000000             # <<<<<<<<<<<<<<
 * 
 *         # Check if the move causes a stalemate
 */
    __pyx_v_score = -100000000;

    /* "ChessAI - Copy.pyx":525
 * 
 *         # Check if the position is repeating after the move
 *         if (self.pgnBoard.is_repetition(2)):             # <<<<<<<<<<<<<<
 *             repetitionFlag = True
 *             repetitionMove = moves_list[0]
 */
  }

  /* "ChessAI - Copy.pyx":532
 * 
 *         # Check if the move causes a stalemate
 *         if (self.pgnBoard.is_stalemate()):             # <<<<<<<<<<<<<<
 *             score = -100000000
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_stalemate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_13) {

    /* "ChessAI - Copy.pyx":533
 *         # Check if the move causes a stalemate
 *         if (self.pgnBoard.is_stalemate()):
 *             score = -100000000             # <<<<<<<<<<<<<<
 * 
 *         # Undo the move and restore the zobrist hash
 */
    __pyx_v_score = -100000000;

    /* "ChessAI - Copy.pyx":532
 * 
 *         # Check if the move causes a stalemate
 *         if (self.pgnBoard.is_stalemate()):             # <<<<<<<<<<<<<<
 *             score = -100000000
 * 
 */
  }

  /* "ChessAI - Copy.pyx":536
 * 
 *         # Undo the move and restore the zobrist hash
 *         self.pgnBoard.pop()             # <<<<<<<<<<<<<<
 *         self.zobrist = curHash
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_Pop(__pyx_v_self->pgnBoard); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "ChessAI - Copy.pyx":537
 *         # Undo the move and restore the zobrist hash
 *         self.pgnBoard.pop()
 *         self.zobrist = curHash             # <<<<<<<<<<<<<<
 * 
 *         if (depthLimit >= 5):
 */
  __pyx_v_self->zobrist = __pyx_v_curHash;

  /* "ChessAI - Copy.pyx":539
 *         self.zobrist = curHash
 * 
 *         if (depthLimit >= 5):             # <<<<<<<<<<<<<<
 *             print(0,score,alpha_list[0],moves_list[0])
 * 
 */
  __pyx_t_13 = ((__pyx_v_depthLimit >= 5) != 0);
  if (__pyx_t_13) {

    /* "ChessAI - Copy.pyx":540
 * 
 *         if (depthLimit >= 5):
 *             print(0,score,alpha_list[0],moves_list[0])             # <<<<<<<<<<<<<<
 * 
 *         # Assign the best move struct and alpha
 */
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_score); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__pyx_v_alpha_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 540, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_moves_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 540, __pyx_L1_error)
    }
    __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
    __Pyx_INCREF(PyList_GET_ITEM(__pyx_v_alpha_list, 0));
    __Pyx_GIVEREF(PyList_GET_ITEM(__pyx_v_alpha_list, 0));
    PyTuple_SET_ITEM(__pyx_t_3, 2, PyList_GET_ITEM(__pyx_v_alpha_list, 0));
    __Pyx_INCREF(PyList_GET_ITEM(__pyx_v_moves_list, 0));
    __Pyx_GIVEREF(PyList_GET_ITEM(__pyx_v_moves_list, 0));
    PyTuple_SET_ITEM(__pyx_t_3, 3, PyList_GET_ITEM(__pyx_v_moves_list, 0));
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ChessAI - Copy.pyx":539
 *         self.zobrist = curHash
 * 
 *         if (depthLimit >= 5):             # <<<<<<<<<<<<<<
 *             print(0,score,alpha_list[0],moves_list[0])
 * 
 */
  }

  /* "ChessAI - Copy.pyx":543
 * 
 *         # Assign the best move struct and alpha
 *         if score > bestMove.score:             # <<<<<<<<<<<<<<
 *             cur = moves_list[0].uci()
 * 
 */
  __pyx_t_13 = ((__pyx_v_score > __pyx_v_bestMove.score) != 0);
  if (__pyx_t_13) {

    /* "ChessAI - Copy.pyx":544
 *         # Assign the best move struct and alpha
 *         if score > bestMove.score:
 *             cur = moves_list[0].uci()             # <<<<<<<<<<<<<<
 * 
 *             bestMove.score = score
 */
    if (unlikely(__pyx_v_moves_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 544, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_moves_list, 0), __pyx_n_s_uci); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 544, __pyx_L1_error)
    __pyx_v_cur = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "ChessAI - Copy.pyx":546
 *             cur = moves_list[0].uci()
 * 
 *             bestMove.score = score             # <<<<<<<<<<<<<<
 *             bestMove.a = ord(cur[0]) - 96
 *             bestMove.b = ord(cur[1]) - ord('0')
 */
    __pyx_v_bestMove.score = __pyx_v_score;

    /* "ChessAI - Copy.pyx":547
 * 
 *             bestMove.score = score
 *             bestMove.a = ord(cur[0]) - 96             # <<<<<<<<<<<<<<
 *             bestMove.b = ord(cur[1]) - ord('0')
 *             bestMove.c = ord(cur[2]) - 96
 */
    __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 547, __pyx_L1_error)
    __pyx_v_bestMove.a = (((long)__pyx_t_14) - 96);

    /* "ChessAI - Copy.pyx":548
 *             bestMove.score = score
 *             bestMove.a = ord(cur[0]) - 96
 *             bestMove.b = ord(cur[1]) - ord('0')             # <<<<<<<<<<<<<<
 *             bestMove.c = ord(cur[2]) - 96
 *             bestMove.d = ord(cur[3]) - ord('0')
 */
    __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 548, __pyx_L1_error)
    __pyx_v_bestMove.b = (((long)__pyx_t_14) - 48);

    /* "ChessAI - Copy.pyx":549
 *             bestMove.a = ord(cur[0]) - 96
 *             bestMove.b = ord(cur[1]) - ord('0')
 *             bestMove.c = ord(cur[2]) - 96             # <<<<<<<<<<<<<<
 *             bestMove.d = ord(cur[3]) - ord('0')
 *             if (moves_list[0].promotion):
 */
    __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 549, __pyx_L1_error)
    __pyx_v_bestMove.c = (((long)__pyx_t_14) - 96);

    /* "ChessAI - Copy.pyx":550
 *             bestMove.b = ord(cur[1]) - ord('0')
 *             bestMove.c = ord(cur[2]) - 96
 *             bestMove.d = ord(cur[3]) - ord('0')             # <<<<<<<<<<<<<<
 *             if (moves_list[0].promotion):
 *                 bestMove.promotion = ord(cur[4]) - 96
 */
    __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 550, __pyx_L1_error)
    __pyx_v_bestMove.d = (((long)__pyx_t_14) - 48);

    /* "ChessAI - Copy.pyx":551
 *             bestMove.c = ord(cur[2]) - 96
 *             bestMove.d = ord(cur[3]) - ord('0')
 *             if (moves_list[0].promotion):             # <<<<<<<<<<<<<<
 *                 bestMove.promotion = ord(cur[4]) - 96
 *             else:
 */
    if (unlikely(__pyx_v_moves_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 551, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_moves_list, 0), __pyx_n_s_promotion); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_13) {

      /* "ChessAI - Copy.pyx":552
 *             bestMove.d = ord(cur[3]) - ord('0')
 *             if (moves_list[0].promotion):
 *                 bestMove.promotion = ord(cur[4]) - 96             # <<<<<<<<<<<<<<
 *             else:
 *                 bestMove.promotion = -1
 */
      __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 552, __pyx_L1_error)
      __pyx_v_bestMove.promotion = (((long)__pyx_t_14) - 96);

      /* "ChessAI - Copy.pyx":551
 *             bestMove.c = ord(cur[2]) - 96
 *             bestMove.d = ord(cur[3]) - ord('0')
 *             if (moves_list[0].promotion):             # <<<<<<<<<<<<<<
 *                 bestMove.promotion = ord(cur[4]) - 96
 *             else:
 */
      goto __pyx_L10;
    }

    /* "ChessAI - Copy.pyx":554
 *                 bestMove.promotion = ord(cur[4]) - 96
 *             else:
 *                 bestMove.promotion = -1             # <<<<<<<<<<<<<<
 *             best_move_index = 0
 * 
 */
    /*else*/ {
      __pyx_v_bestMove.promotion = -1;
    }
    __pyx_L10:;

    /* "ChessAI - Copy.pyx":555
 *             else:
 *                 bestMove.promotion = -1
 *             best_move_index = 0             # <<<<<<<<<<<<<<
 * 
 *         alpha = max(alpha, bestMove.score)
 */
    __pyx_v_best_move_index = 0;

    /* "ChessAI - Copy.pyx":543
 * 
 *         # Assign the best move struct and alpha
 *         if score > bestMove.score:             # <<<<<<<<<<<<<<
 *             cur = moves_list[0].uci()
 * 
 */
  }

  /* "ChessAI - Copy.pyx":557
 *             best_move_index = 0
 * 
 *         alpha = max(alpha, bestMove.score)             # <<<<<<<<<<<<<<
 * 
 *         # Append the global moves list and alpha list to store the current score
 */
  __pyx_t_9 = __pyx_v_bestMove.score;
  __pyx_t_15 = __pyx_v_alpha;
  if (((__pyx_t_9 > __pyx_t_15) != 0)) {
    __pyx_t_16 = __pyx_t_9;
  } else {
    __pyx_t_16 = __pyx_t_15;
  }
  __pyx_v_alpha = __pyx_t_16;

  /* "ChessAI - Copy.pyx":560
 * 
 *         # Append the global moves list and alpha list to store the current score
 *         self.moves_list = moves_list             # <<<<<<<<<<<<<<
 *         self.alpha_list.append(score)
 * 
 */
  __Pyx_INCREF(__pyx_v_moves_list);
  __Pyx_GIVEREF(__pyx_v_moves_list);
  __Pyx_GOTREF(__pyx_v_self->moves_list);
  __Pyx_DECREF(__pyx_v_self->moves_list);
  __pyx_v_self->moves_list = __pyx_v_moves_list;

  /* "ChessAI - Copy.pyx":561
 *         # Append the global moves list and alpha list to store the current score
 *         self.moves_list = moves_list
 *         self.alpha_list.append(score)             # <<<<<<<<<<<<<<
 * 
 *         # Check if the search time has exceeded
 */
  if (unlikely(__pyx_v_self->alpha_list == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 561, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_score); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_self->alpha_list, __pyx_t_6); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "ChessAI - Copy.pyx":564
 * 
 *         # Check if the search time has exceeded
 *         if (timer() - t0 >= self.time_limit):             # <<<<<<<<<<<<<<
 *             return bestMove
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_timer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_t0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyNumber_Subtract(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->time_limit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_t_3, Py_GE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_13) {

    /* "ChessAI - Copy.pyx":565
 *         # Check if the search time has exceeded
 *         if (timer() - t0 >= self.time_limit):
 *             return bestMove             # <<<<<<<<<<<<<<
 * 
 *         for move in moves_list[1:]:
 */
    __pyx_r = __pyx_v_bestMove;
    goto __pyx_L0;

    /* "ChessAI - Copy.pyx":564
 * 
 *         # Check if the search time has exceeded
 *         if (timer() - t0 >= self.time_limit):             # <<<<<<<<<<<<<<
 *             return bestMove
 * 
 */
  }

  /* "ChessAI - Copy.pyx":567
 *             return bestMove
 * 
 *         for move in moves_list[1:]:             # <<<<<<<<<<<<<<
 * 
 *             # Razoring
 */
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 567, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyList_GetSlice(__pyx_v_moves_list, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __pyx_t_6; __Pyx_INCREF(__pyx_t_3); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_6); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 567, __pyx_L1_error)
    #else
    __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_move, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "ChessAI - Copy.pyx":570
 * 
 *             # Razoring
 *             if (not(alpha_list[count] == None)):             # <<<<<<<<<<<<<<
 *                 if (alpha - alpha_list[count] > razorThreshold) and alpha < 9000000:
 *                     break
 */
    if (unlikely(__pyx_v_alpha_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 570, __pyx_L1_error)
    }
    __pyx_t_6 = PyObject_RichCompare(PyList_GET_ITEM(__pyx_v_alpha_list, __pyx_v_count), Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 570, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = ((!__pyx_t_13) != 0);
    if (__pyx_t_7) {

      /* "ChessAI - Copy.pyx":571
 *             # Razoring
 *             if (not(alpha_list[count] == None)):
 *                 if (alpha - alpha_list[count] > razorThreshold) and alpha < 9000000:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_alpha); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 571, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__pyx_v_alpha_list == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 571, __pyx_L1_error)
      }
      __pyx_t_5 = PyNumber_Subtract(__pyx_t_6, PyList_GET_ITEM(__pyx_v_alpha_list, __pyx_v_count)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 571, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_razorThreshold); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 571, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 571, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 571, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_13) {
      } else {
        __pyx_t_7 = __pyx_t_13;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_13 = ((__pyx_v_alpha < 0x895440) != 0);
      __pyx_t_7 = __pyx_t_13;
      __pyx_L16_bool_binop_done:;
      if (__pyx_t_7) {

        /* "ChessAI - Copy.pyx":572
 *             if (not(alpha_list[count] == None)):
 *                 if (alpha - alpha_list[count] > razorThreshold) and alpha < 9000000:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             # Late move reduction
 */
        goto __pyx_L13_break;

        /* "ChessAI - Copy.pyx":571
 *             # Razoring
 *             if (not(alpha_list[count] == None)):
 *                 if (alpha - alpha_list[count] > razorThreshold) and alpha < 9000000:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      }

      /* "ChessAI - Copy.pyx":570
 * 
 *             # Razoring
 *             if (not(alpha_list[count] == None)):             # <<<<<<<<<<<<<<
 *                 if (alpha - alpha_list[count] > razorThreshold) and alpha < 9000000:
 *                     break
 */
    }

    /* "ChessAI - Copy.pyx":575
 * 
 *             # Late move reduction
 *             if (count >= 35):             # <<<<<<<<<<<<<<
 *                 depthUsage = depthLimit - 1
 *             else:
 */
    __pyx_t_7 = ((__pyx_v_count >= 35) != 0);
    if (__pyx_t_7) {

      /* "ChessAI - Copy.pyx":576
 *             # Late move reduction
 *             if (count >= 35):
 *                 depthUsage = depthLimit - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 depthUsage = depthLimit
 */
      __pyx_v_depthUsage = (__pyx_v_depthLimit - 1);

      /* "ChessAI - Copy.pyx":575
 * 
 *             # Late move reduction
 *             if (count >= 35):             # <<<<<<<<<<<<<<
 *                 depthUsage = depthLimit - 1
 *             else:
 */
      goto __pyx_L18;
    }

    /* "ChessAI - Copy.pyx":578
 *                 depthUsage = depthLimit - 1
 *             else:
 *                 depthUsage = depthLimit             # <<<<<<<<<<<<<<
 * 
 *             # Check if the move is a promoting move
 */
    /*else*/ {
      __pyx_v_depthUsage = __pyx_v_depthLimit;
    }
    __pyx_L18:;

    /* "ChessAI - Copy.pyx":581
 * 
 *             # Check if the move is a promoting move
 *             if (move.promotion):             # <<<<<<<<<<<<<<
 *                 promotion = move.promotion
 *             else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_7) {

      /* "ChessAI - Copy.pyx":582
 *             # Check if the move is a promoting move
 *             if (move.promotion):
 *                 promotion = move.promotion             # <<<<<<<<<<<<<<
 *             else:
 *                 promotion = 0
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 582, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_promotion = __pyx_t_16;

      /* "ChessAI - Copy.pyx":581
 * 
 *             # Check if the move is a promoting move
 *             if (move.promotion):             # <<<<<<<<<<<<<<
 *                 promotion = move.promotion
 *             else:
 */
      goto __pyx_L19;
    }

    /* "ChessAI - Copy.pyx":584
 *                 promotion = move.promotion
 *             else:
 *                 promotion = 0             # <<<<<<<<<<<<<<
 * 
 *             # Acquire the zobrist hash for the new position if the given move was made
 */
    /*else*/ {
      __pyx_v_promotion = 0;
    }
    __pyx_L19:;

    /* "ChessAI - Copy.pyx":587
 * 
 *             # Acquire the zobrist hash for the new position if the given move was made
 *             isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))             # <<<<<<<<<<<<<<
 *             updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = __Pyx_PyInt_As_uint8_t(__pyx_t_4); if (unlikely((__pyx_t_11 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = __Pyx_PyInt_As_uint8_t(__pyx_t_4); if (unlikely((__pyx_t_12 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_turn); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_13 = (!__pyx_t_7);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_4, __pyx_t_13, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_6); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_en_passant); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_move);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_isCapture = is_capture(__pyx_t_11, __pyx_t_12, __pyx_t_2, __pyx_t_13);

    /* "ChessAI - Copy.pyx":588
 *             # Acquire the zobrist hash for the new position if the given move was made
 *             isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))
 *             updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)             # <<<<<<<<<<<<<<
 * 
 *             # Make the move and call the minimizer
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_12 = __Pyx_PyInt_As_uint8_t(__pyx_t_6); if (unlikely((__pyx_t_12 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 588, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = __Pyx_PyInt_As_uint8_t(__pyx_t_6); if (unlikely((__pyx_t_11 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 588, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    updateZobristHashForMove(__pyx_v_self->zobrist, __pyx_t_12, __pyx_t_11, __pyx_v_isCapture, __pyx_v_pawns, __pyx_v_knights, __pyx_v_bishops, __pyx_v_rooks, __pyx_v_queens, __pyx_v_kings, __pyx_v_occupied_white, __pyx_v_occupied_black, __pyx_v_promotion);

    /* "ChessAI - Copy.pyx":591
 * 
 *             # Make the move and call the minimizer
 *             self.pgnBoard.push(move)             # <<<<<<<<<<<<<<
 *             score = self.minimizer(curDepth + 1, depthUsage, alpha, alpha+1, beta_list[count], beta_move_list[count])
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_push); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_move);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ChessAI - Copy.pyx":592
 *             # Make the move and call the minimizer
 *             self.pgnBoard.push(move)
 *             score = self.minimizer(curDepth + 1, depthUsage, alpha, alpha+1, beta_list[count], beta_move_list[count])             # <<<<<<<<<<<<<<
 * 
 *             # If the score is within the window, re-search with full window
 */
    if (unlikely(__pyx_v_beta_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 592, __pyx_L1_error)
    }
    if (!(likely(PyList_CheckExact(PyList_GET_ITEM(__pyx_v_beta_list, __pyx_v_count)))||((PyList_GET_ITEM(__pyx_v_beta_list, __pyx_v_count)) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(PyList_GET_ITEM(__pyx_v_beta_list, __pyx_v_count))->tp_name), 0))) __PYX_ERR(0, 592, __pyx_L1_error)
    __pyx_t_6 = PyList_GET_ITEM(__pyx_v_beta_list, __pyx_v_count);
    __Pyx_INCREF(__pyx_t_6);
    if (unlikely(__pyx_v_beta_move_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 592, __pyx_L1_error)
    }
    if (!(likely(PyList_CheckExact(PyList_GET_ITEM(__pyx_v_beta_move_list, __pyx_v_count)))||((PyList_GET_ITEM(__pyx_v_beta_move_list, __pyx_v_count)) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(PyList_GET_ITEM(__pyx_v_beta_move_list, __pyx_v_count))->tp_name), 0))) __PYX_ERR(0, 592, __pyx_L1_error)
    __pyx_t_4 = PyList_GET_ITEM(__pyx_v_beta_move_list, __pyx_v_count);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_v_score = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->minimizer(__pyx_v_self, (__pyx_v_curDepth + 1), __pyx_v_depthUsage, __pyx_v_alpha, (__pyx_v_alpha + 1), ((PyObject*)__pyx_t_6), ((PyObject*)__pyx_t_4));
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ChessAI - Copy.pyx":595
 * 
 *             # If the score is within the window, re-search with full window
 *             if alpha < score and score < beta:             # <<<<<<<<<<<<<<
 * 
 *                 # Ensure there is a score for the given index
 */
    __pyx_t_7 = ((__pyx_v_alpha < __pyx_v_score) != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_13 = __pyx_t_7;
      goto __pyx_L21_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_score < __pyx_v_beta) != 0);
    __pyx_t_13 = __pyx_t_7;
    __pyx_L21_bool_binop_done:;
    if (__pyx_t_13) {

      /* "ChessAI - Copy.pyx":598
 * 
 *                 # Ensure there is a score for the given index
 *                 if (not(alpha_list[count] == None)):             # <<<<<<<<<<<<<<
 * 
 *                     # Pop the lists for the re-search
 */
      if (unlikely(__pyx_v_alpha_list == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 598, __pyx_L1_error)
      }
      __pyx_t_4 = PyObject_RichCompare(PyList_GET_ITEM(__pyx_v_alpha_list, __pyx_v_count), Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = ((!__pyx_t_13) != 0);
      if (__pyx_t_7) {

        /* "ChessAI - Copy.pyx":601
 * 
 *                     # Pop the lists for the re-search
 *                     self.beta_list.pop()             # <<<<<<<<<<<<<<
 *                     self.beta_move_list.pop()
 *                     score = self.minimizer(curDepth + 1, depthUsage, alpha, beta, beta_list[count],beta_move_list[count])
 */
        if (unlikely(__pyx_v_self->beta_list == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
          __PYX_ERR(0, 601, __pyx_L1_error)
        }
        __pyx_t_4 = __Pyx_PyList_Pop(__pyx_v_self->beta_list); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 601, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "ChessAI - Copy.pyx":602
 *                     # Pop the lists for the re-search
 *                     self.beta_list.pop()
 *                     self.beta_move_list.pop()             # <<<<<<<<<<<<<<
 *                     score = self.minimizer(curDepth + 1, depthUsage, alpha, beta, beta_list[count],beta_move_list[count])
 *                 else:
 */
        if (unlikely(__pyx_v_self->beta_move_list == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
          __PYX_ERR(0, 602, __pyx_L1_error)
        }
        __pyx_t_4 = __Pyx_PyList_Pop(__pyx_v_self->beta_move_list); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 602, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "ChessAI - Copy.pyx":603
 *                     self.beta_list.pop()
 *                     self.beta_move_list.pop()
 *                     score = self.minimizer(curDepth + 1, depthUsage, alpha, beta, beta_list[count],beta_move_list[count])             # <<<<<<<<<<<<<<
 *                 else:
 * 
 */
        if (unlikely(__pyx_v_beta_list == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 603, __pyx_L1_error)
        }
        if (!(likely(PyList_CheckExact(PyList_GET_ITEM(__pyx_v_beta_list, __pyx_v_count)))||((PyList_GET_ITEM(__pyx_v_beta_list, __pyx_v_count)) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(PyList_GET_ITEM(__pyx_v_beta_list, __pyx_v_count))->tp_name), 0))) __PYX_ERR(0, 603, __pyx_L1_error)
        __pyx_t_4 = PyList_GET_ITEM(__pyx_v_beta_list, __pyx_v_count);
        __Pyx_INCREF(__pyx_t_4);
        if (unlikely(__pyx_v_beta_move_list == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 603, __pyx_L1_error)
        }
        if (!(likely(PyList_CheckExact(PyList_GET_ITEM(__pyx_v_beta_move_list, __pyx_v_count)))||((PyList_GET_ITEM(__pyx_v_beta_move_list, __pyx_v_count)) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(PyList_GET_ITEM(__pyx_v_beta_move_list, __pyx_v_count))->tp_name), 0))) __PYX_ERR(0, 603, __pyx_L1_error)
        __pyx_t_6 = PyList_GET_ITEM(__pyx_v_beta_move_list, __pyx_v_count);
        __Pyx_INCREF(__pyx_t_6);
        __pyx_v_score = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->minimizer(__pyx_v_self, (__pyx_v_curDepth + 1), __pyx_v_depthUsage, __pyx_v_alpha, __pyx_v_beta, ((PyObject*)__pyx_t_4), ((PyObject*)__pyx_t_6));
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "ChessAI - Copy.pyx":598
 * 
 *                 # Ensure there is a score for the given index
 *                 if (not(alpha_list[count] == None)):             # <<<<<<<<<<<<<<
 * 
 *                     # Pop the lists for the re-search
 */
        goto __pyx_L23;
      }

      /* "ChessAI - Copy.pyx":607
 * 
 *                     # Pop the lists for the re-search
 *                     self.beta_list.pop()             # <<<<<<<<<<<<<<
 *                     self.beta_move_list.pop()
 *                     score = self.minimizer(curDepth + 1, depthUsage, alpha, beta, beta_list[count],beta_move_list[count])
 */
      /*else*/ {
        if (unlikely(__pyx_v_self->beta_list == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
          __PYX_ERR(0, 607, __pyx_L1_error)
        }
        __pyx_t_6 = __Pyx_PyList_Pop(__pyx_v_self->beta_list); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 607, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "ChessAI - Copy.pyx":608
 *                     # Pop the lists for the re-search
 *                     self.beta_list.pop()
 *                     self.beta_move_list.pop()             # <<<<<<<<<<<<<<
 *                     score = self.minimizer(curDepth + 1, depthUsage, alpha, beta, beta_list[count],beta_move_list[count])
 * 
 */
        if (unlikely(__pyx_v_self->beta_move_list == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
          __PYX_ERR(0, 608, __pyx_L1_error)
        }
        __pyx_t_6 = __Pyx_PyList_Pop(__pyx_v_self->beta_move_list); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 608, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "ChessAI - Copy.pyx":609
 *                     self.beta_list.pop()
 *                     self.beta_move_list.pop()
 *                     score = self.minimizer(curDepth + 1, depthUsage, alpha, beta, beta_list[count],beta_move_list[count])             # <<<<<<<<<<<<<<
 * 
 *             # Check if the position is repeating after the move
 */
        if (unlikely(__pyx_v_beta_list == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 609, __pyx_L1_error)
        }
        if (!(likely(PyList_CheckExact(PyList_GET_ITEM(__pyx_v_beta_list, __pyx_v_count)))||((PyList_GET_ITEM(__pyx_v_beta_list, __pyx_v_count)) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(PyList_GET_ITEM(__pyx_v_beta_list, __pyx_v_count))->tp_name), 0))) __PYX_ERR(0, 609, __pyx_L1_error)
        __pyx_t_6 = PyList_GET_ITEM(__pyx_v_beta_list, __pyx_v_count);
        __Pyx_INCREF(__pyx_t_6);
        if (unlikely(__pyx_v_beta_move_list == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 609, __pyx_L1_error)
        }
        if (!(likely(PyList_CheckExact(PyList_GET_ITEM(__pyx_v_beta_move_list, __pyx_v_count)))||((PyList_GET_ITEM(__pyx_v_beta_move_list, __pyx_v_count)) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(PyList_GET_ITEM(__pyx_v_beta_move_list, __pyx_v_count))->tp_name), 0))) __PYX_ERR(0, 609, __pyx_L1_error)
        __pyx_t_4 = PyList_GET_ITEM(__pyx_v_beta_move_list, __pyx_v_count);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_v_score = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->minimizer(__pyx_v_self, (__pyx_v_curDepth + 1), __pyx_v_depthUsage, __pyx_v_alpha, __pyx_v_beta, ((PyObject*)__pyx_t_6), ((PyObject*)__pyx_t_4));
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_L23:;

      /* "ChessAI - Copy.pyx":595
 * 
 *             # If the score is within the window, re-search with full window
 *             if alpha < score and score < beta:             # <<<<<<<<<<<<<<
 * 
 *                 # Ensure there is a score for the given index
 */
    }

    /* "ChessAI - Copy.pyx":612
 * 
 *             # Check if the position is repeating after the move
 *             if (self.pgnBoard.is_repetition(2)):             # <<<<<<<<<<<<<<
 *                 repetitionFlag = True
 *                 repetitionMove = move
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_repetition); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_int_2) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_int_2);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_7) {

      /* "ChessAI - Copy.pyx":613
 *             # Check if the position is repeating after the move
 *             if (self.pgnBoard.is_repetition(2)):
 *                 repetitionFlag = True             # <<<<<<<<<<<<<<
 *                 repetitionMove = move
 *                 repetitionScore = score
 */
      __pyx_v_repetitionFlag = 1;

      /* "ChessAI - Copy.pyx":614
 *             if (self.pgnBoard.is_repetition(2)):
 *                 repetitionFlag = True
 *                 repetitionMove = move             # <<<<<<<<<<<<<<
 *                 repetitionScore = score
 *                 score = -100000000
 */
      __Pyx_INCREF(__pyx_v_move);
      __Pyx_DECREF_SET(__pyx_v_repetitionMove, __pyx_v_move);

      /* "ChessAI - Copy.pyx":615
 *                 repetitionFlag = True
 *                 repetitionMove = move
 *                 repetitionScore = score             # <<<<<<<<<<<<<<
 *                 score = -100000000
 * 
 */
      __pyx_v_repetitionScore = __pyx_v_score;

      /* "ChessAI - Copy.pyx":616
 *                 repetitionMove = move
 *                 repetitionScore = score
 *                 score = -100000000             # <<<<<<<<<<<<<<
 * 
 *             # Check if the move causes a stalemate
 */
      __pyx_v_score = -100000000;

      /* "ChessAI - Copy.pyx":612
 * 
 *             # Check if the position is repeating after the move
 *             if (self.pgnBoard.is_repetition(2)):             # <<<<<<<<<<<<<<
 *                 repetitionFlag = True
 *                 repetitionMove = move
 */
    }

    /* "ChessAI - Copy.pyx":619
 * 
 *             # Check if the move causes a stalemate
 *             if (self.pgnBoard.is_stalemate()):             # <<<<<<<<<<<<<<
 *                 score = -100000000
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_stalemate); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_7) {

      /* "ChessAI - Copy.pyx":620
 *             # Check if the move causes a stalemate
 *             if (self.pgnBoard.is_stalemate()):
 *                 score = -100000000             # <<<<<<<<<<<<<<
 * 
 *             # Undo the move, restore the zobrist hash and append the score list for the current move
 */
      __pyx_v_score = -100000000;

      /* "ChessAI - Copy.pyx":619
 * 
 *             # Check if the move causes a stalemate
 *             if (self.pgnBoard.is_stalemate()):             # <<<<<<<<<<<<<<
 *                 score = -100000000
 * 
 */
    }

    /* "ChessAI - Copy.pyx":623
 * 
 *             # Undo the move, restore the zobrist hash and append the score list for the current move
 *             self.pgnBoard.pop()             # <<<<<<<<<<<<<<
 *             self.zobrist = curHash
 *             self.alpha_list.append(score)
 */
    __pyx_t_4 = __Pyx_PyObject_Pop(__pyx_v_self->pgnBoard); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ChessAI - Copy.pyx":624
 *             # Undo the move, restore the zobrist hash and append the score list for the current move
 *             self.pgnBoard.pop()
 *             self.zobrist = curHash             # <<<<<<<<<<<<<<
 *             self.alpha_list.append(score)
 * 
 */
    __pyx_v_self->zobrist = __pyx_v_curHash;

    /* "ChessAI - Copy.pyx":625
 *             self.pgnBoard.pop()
 *             self.zobrist = curHash
 *             self.alpha_list.append(score)             # <<<<<<<<<<<<<<
 * 
 *             if (depthLimit >= 5):
 */
    if (unlikely(__pyx_v_self->alpha_list == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 625, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_score); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_self->alpha_list, __pyx_t_4); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 625, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ChessAI - Copy.pyx":627
 *             self.alpha_list.append(score)
 * 
 *             if (depthLimit >= 5):             # <<<<<<<<<<<<<<
 *                 print(count,score,alpha_list[count], move)
 * 
 */
    __pyx_t_7 = ((__pyx_v_depthLimit >= 5) != 0);
    if (__pyx_t_7) {

      /* "ChessAI - Copy.pyx":628
 * 
 *             if (depthLimit >= 5):
 *                 print(count,score,alpha_list[count], move)             # <<<<<<<<<<<<<<
 * 
 *             # Check if the current move's score is better than the existing best move
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_score); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__pyx_v_alpha_list == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 628, __pyx_L1_error)
      }
      __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
      __Pyx_INCREF(PyList_GET_ITEM(__pyx_v_alpha_list, __pyx_v_count));
      __Pyx_GIVEREF(PyList_GET_ITEM(__pyx_v_alpha_list, __pyx_v_count));
      PyTuple_SET_ITEM(__pyx_t_5, 2, PyList_GET_ITEM(__pyx_v_alpha_list, __pyx_v_count));
      __Pyx_INCREF(__pyx_v_move);
      __Pyx_GIVEREF(__pyx_v_move);
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_v_move);
      __pyx_t_4 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "ChessAI - Copy.pyx":627
 *             self.alpha_list.append(score)
 * 
 *             if (depthLimit >= 5):             # <<<<<<<<<<<<<<
 *                 print(count,score,alpha_list[count], move)
 * 
 */
    }

    /* "ChessAI - Copy.pyx":631
 * 
 *             # Check if the current move's score is better than the existing best move
 *             if score > bestMove.score:             # <<<<<<<<<<<<<<
 *                 cur = move.uci()
 * 
 */
    __pyx_t_7 = ((__pyx_v_score > __pyx_v_bestMove.score) != 0);
    if (__pyx_t_7) {

      /* "ChessAI - Copy.pyx":632
 *             # Check if the current move's score is better than the existing best move
 *             if score > bestMove.score:
 *                 cur = move.uci()             # <<<<<<<<<<<<<<
 * 
 *                 bestMove.score = score
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_uci); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 632, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_cur, ((PyObject*)__pyx_t_6));
      __pyx_t_6 = 0;

      /* "ChessAI - Copy.pyx":634
 *                 cur = move.uci()
 * 
 *                 bestMove.score = score             # <<<<<<<<<<<<<<
 *                 bestMove.a = ord(cur[0]) - 96
 *                 bestMove.b = ord(cur[1]) - ord('0')
 */
      __pyx_v_bestMove.score = __pyx_v_score;

      /* "ChessAI - Copy.pyx":635
 * 
 *                 bestMove.score = score
 *                 bestMove.a = ord(cur[0]) - 96             # <<<<<<<<<<<<<<
 *                 bestMove.b = ord(cur[1]) - ord('0')
 *                 bestMove.c = ord(cur[2]) - 96
 */
      __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 635, __pyx_L1_error)
      __pyx_v_bestMove.a = (((long)__pyx_t_14) - 96);

      /* "ChessAI - Copy.pyx":636
 *                 bestMove.score = score
 *                 bestMove.a = ord(cur[0]) - 96
 *                 bestMove.b = ord(cur[1]) - ord('0')             # <<<<<<<<<<<<<<
 *                 bestMove.c = ord(cur[2]) - 96
 *                 bestMove.d = ord(cur[3]) - ord('0')
 */
      __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 636, __pyx_L1_error)
      __pyx_v_bestMove.b = (((long)__pyx_t_14) - 48);

      /* "ChessAI - Copy.pyx":637
 *                 bestMove.a = ord(cur[0]) - 96
 *                 bestMove.b = ord(cur[1]) - ord('0')
 *                 bestMove.c = ord(cur[2]) - 96             # <<<<<<<<<<<<<<
 *                 bestMove.d = ord(cur[3]) - ord('0')
 * 
 */
      __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 637, __pyx_L1_error)
      __pyx_v_bestMove.c = (((long)__pyx_t_14) - 96);

      /* "ChessAI - Copy.pyx":638
 *                 bestMove.b = ord(cur[1]) - ord('0')
 *                 bestMove.c = ord(cur[2]) - 96
 *                 bestMove.d = ord(cur[3]) - ord('0')             # <<<<<<<<<<<<<<
 * 
 *                 if (move.promotion):
 */
      __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 638, __pyx_L1_error)
      __pyx_v_bestMove.d = (((long)__pyx_t_14) - 48);

      /* "ChessAI - Copy.pyx":640
 *                 bestMove.d = ord(cur[3]) - ord('0')
 * 
 *                 if (move.promotion):             # <<<<<<<<<<<<<<
 *                     bestMove.promotion = ord(cur[4]) - 96
 *                 else:
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 640, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_7) {

        /* "ChessAI - Copy.pyx":641
 * 
 *                 if (move.promotion):
 *                     bestMove.promotion = ord(cur[4]) - 96             # <<<<<<<<<<<<<<
 *                 else:
 *                     bestMove.promotion = -1
 */
        __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 641, __pyx_L1_error)
        __pyx_v_bestMove.promotion = (((long)__pyx_t_14) - 96);

        /* "ChessAI - Copy.pyx":640
 *                 bestMove.d = ord(cur[3]) - ord('0')
 * 
 *                 if (move.promotion):             # <<<<<<<<<<<<<<
 *                     bestMove.promotion = ord(cur[4]) - 96
 *                 else:
 */
        goto __pyx_L28;
      }

      /* "ChessAI - Copy.pyx":643
 *                     bestMove.promotion = ord(cur[4]) - 96
 *                 else:
 *                     bestMove.promotion = -1             # <<<<<<<<<<<<<<
 *                 best_move_index = count
 * 
 */
      /*else*/ {
        __pyx_v_bestMove.promotion = -1;
      }
      __pyx_L28:;

      /* "ChessAI - Copy.pyx":644
 *                 else:
 *                     bestMove.promotion = -1
 *                 best_move_index = count             # <<<<<<<<<<<<<<
 * 
 *             alpha = max(alpha, bestMove.score)
 */
      __pyx_v_best_move_index = __pyx_v_count;

      /* "ChessAI - Copy.pyx":631
 * 
 *             # Check if the current move's score is better than the existing best move
 *             if score > bestMove.score:             # <<<<<<<<<<<<<<
 *                 cur = move.uci()
 * 
 */
    }

    /* "ChessAI - Copy.pyx":646
 *                 best_move_index = count
 * 
 *             alpha = max(alpha, bestMove.score)             # <<<<<<<<<<<<<<
 *             count += 1
 * 
 */
    __pyx_t_16 = __pyx_v_bestMove.score;
    __pyx_t_9 = __pyx_v_alpha;
    if (((__pyx_t_16 > __pyx_t_9) != 0)) {
      __pyx_t_15 = __pyx_t_16;
    } else {
      __pyx_t_15 = __pyx_t_9;
    }
    __pyx_v_alpha = __pyx_t_15;

    /* "ChessAI - Copy.pyx":647
 * 
 *             alpha = max(alpha, bestMove.score)
 *             count += 1             # <<<<<<<<<<<<<<
 * 
 *             # Check for a beta cutoff
 */
    __pyx_v_count = (__pyx_v_count + 1);

    /* "ChessAI - Copy.pyx":650
 * 
 *             # Check for a beta cutoff
 *             if beta <= alpha:             # <<<<<<<<<<<<<<
 *                 self.numMove += 1
 *                 if (depthLimit >= 5):
 */
    __pyx_t_7 = ((__pyx_v_beta <= __pyx_v_alpha) != 0);
    if (__pyx_t_7) {

      /* "ChessAI - Copy.pyx":651
 *             # Check for a beta cutoff
 *             if beta <= alpha:
 *                 self.numMove += 1             # <<<<<<<<<<<<<<
 *                 if (depthLimit >= 5):
 *                     print()
 */
      __pyx_v_self->numMove = (__pyx_v_self->numMove + 1);

      /* "ChessAI - Copy.pyx":652
 *             if beta <= alpha:
 *                 self.numMove += 1
 *                 if (depthLimit >= 5):             # <<<<<<<<<<<<<<
 *                     print()
 *                     print("Best: ", best_move_index)
 */
      __pyx_t_7 = ((__pyx_v_depthLimit >= 5) != 0);
      if (__pyx_t_7) {

        /* "ChessAI - Copy.pyx":653
 *                 self.numMove += 1
 *                 if (depthLimit >= 5):
 *                     print()             # <<<<<<<<<<<<<<
 *                     print("Best: ", best_move_index)
 * 
 */
        __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_builtin_print); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 653, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "ChessAI - Copy.pyx":654
 *                 if (depthLimit >= 5):
 *                     print()
 *                     print("Best: ", best_move_index)             # <<<<<<<<<<<<<<
 * 
 *                 for i in range(num_legal_moves - count):
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_best_move_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 654, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 654, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_kp_u_Best);
        __Pyx_GIVEREF(__pyx_kp_u_Best);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Best);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 654, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "ChessAI - Copy.pyx":652
 *             if beta <= alpha:
 *                 self.numMove += 1
 *                 if (depthLimit >= 5):             # <<<<<<<<<<<<<<
 *                     print()
 *                     print("Best: ", best_move_index)
 */
      }

      /* "ChessAI - Copy.pyx":656
 *                     print("Best: ", best_move_index)
 * 
 *                 for i in range(num_legal_moves - count):             # <<<<<<<<<<<<<<
 *                     self.alpha_list.append(None)
 *                 # print(self.alpha_list)
 */
      __pyx_t_15 = (__pyx_v_num_legal_moves - __pyx_v_count);
      __pyx_t_16 = __pyx_t_15;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_16; __pyx_t_9+=1) {
        __pyx_v_i = __pyx_t_9;

        /* "ChessAI - Copy.pyx":657
 * 
 *                 for i in range(num_legal_moves - count):
 *                     self.alpha_list.append(None)             # <<<<<<<<<<<<<<
 *                 # print(self.alpha_list)
 *                 return bestMove
 */
        if (unlikely(__pyx_v_self->alpha_list == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 657, __pyx_L1_error)
        }
        __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_self->alpha_list, Py_None); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 657, __pyx_L1_error)
      }

      /* "ChessAI - Copy.pyx":659
 *                     self.alpha_list.append(None)
 *                 # print(self.alpha_list)
 *                 return bestMove             # <<<<<<<<<<<<<<
 * 
 *             # Check if the time limit is exceeded
 */
      __pyx_r = __pyx_v_bestMove;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "ChessAI - Copy.pyx":650
 * 
 *             # Check for a beta cutoff
 *             if beta <= alpha:             # <<<<<<<<<<<<<<
 *                 self.numMove += 1
 *                 if (depthLimit >= 5):
 */
    }

    /* "ChessAI - Copy.pyx":662
 * 
 *             # Check if the time limit is exceeded
 *             if (timer() - t0 >= self.time_limit):             # <<<<<<<<<<<<<<
 * 
 *                 # Check if a repeating move is detected
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_timer); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_t0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->time_limit); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_5, Py_GE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_7) {

      /* "ChessAI - Copy.pyx":665
 * 
 *                 # Check if a repeating move is detected
 *                 if (repetitionFlag):             # <<<<<<<<<<<<<<
 *                     # Check if the best move excluding the repeating move is not good enough to be played
 *                     if (alpha < repetitionScore):
 */
      __pyx_t_7 = (__pyx_v_repetitionFlag != 0);
      if (__pyx_t_7) {

        /* "ChessAI - Copy.pyx":667
 *                 if (repetitionFlag):
 *                     # Check if the best move excluding the repeating move is not good enough to be played
 *                     if (alpha < repetitionScore):             # <<<<<<<<<<<<<<
 *                         if (alpha <= -500):
 *                             cur = repetitionMove.uci()
 */
        __pyx_t_7 = ((__pyx_v_alpha < __pyx_v_repetitionScore) != 0);
        if (__pyx_t_7) {

          /* "ChessAI - Copy.pyx":668
 *                     # Check if the best move excluding the repeating move is not good enough to be played
 *                     if (alpha < repetitionScore):
 *                         if (alpha <= -500):             # <<<<<<<<<<<<<<
 *                             cur = repetitionMove.uci()
 * 
 */
          __pyx_t_7 = ((__pyx_v_alpha <= -500L) != 0);
          if (__pyx_t_7) {

            /* "ChessAI - Copy.pyx":669
 *                     if (alpha < repetitionScore):
 *                         if (alpha <= -500):
 *                             cur = repetitionMove.uci()             # <<<<<<<<<<<<<<
 * 
 *                             bestMove.score = 0
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_repetitionMove, __pyx_n_s_uci); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 669, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 669, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 669, __pyx_L1_error)
            __Pyx_XDECREF_SET(__pyx_v_cur, ((PyObject*)__pyx_t_6));
            __pyx_t_6 = 0;

            /* "ChessAI - Copy.pyx":671
 *                             cur = repetitionMove.uci()
 * 
 *                             bestMove.score = 0             # <<<<<<<<<<<<<<
 *                             bestMove.a = ord(cur[0]) - 96
 *                             bestMove.b = ord(cur[1]) - ord('0')
 */
            __pyx_v_bestMove.score = 0;

            /* "ChessAI - Copy.pyx":672
 * 
 *                             bestMove.score = 0
 *                             bestMove.a = ord(cur[0]) - 96             # <<<<<<<<<<<<<<
 *                             bestMove.b = ord(cur[1]) - ord('0')
 *                             bestMove.c = ord(cur[2]) - 96
 */
            __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 672, __pyx_L1_error)
            __pyx_v_bestMove.a = (((long)__pyx_t_14) - 96);

            /* "ChessAI - Copy.pyx":673
 *                             bestMove.score = 0
 *                             bestMove.a = ord(cur[0]) - 96
 *                             bestMove.b = ord(cur[1]) - ord('0')             # <<<<<<<<<<<<<<
 *                             bestMove.c = ord(cur[2]) - 96
 *                             bestMove.d = ord(cur[3]) - ord('0')
 */
            __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 673, __pyx_L1_error)
            __pyx_v_bestMove.b = (((long)__pyx_t_14) - 48);

            /* "ChessAI - Copy.pyx":674
 *                             bestMove.a = ord(cur[0]) - 96
 *                             bestMove.b = ord(cur[1]) - ord('0')
 *                             bestMove.c = ord(cur[2]) - 96             # <<<<<<<<<<<<<<
 *                             bestMove.d = ord(cur[3]) - ord('0')
 * 
 */
            __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 674, __pyx_L1_error)
            __pyx_v_bestMove.c = (((long)__pyx_t_14) - 96);

            /* "ChessAI - Copy.pyx":675
 *                             bestMove.b = ord(cur[1]) - ord('0')
 *                             bestMove.c = ord(cur[2]) - 96
 *                             bestMove.d = ord(cur[3]) - ord('0')             # <<<<<<<<<<<<<<
 * 
 *                             bestMove.promotion = -1
 */
            __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 675, __pyx_L1_error)
            __pyx_v_bestMove.d = (((long)__pyx_t_14) - 48);

            /* "ChessAI - Copy.pyx":677
 *                             bestMove.d = ord(cur[3]) - ord('0')
 * 
 *                             bestMove.promotion = -1             # <<<<<<<<<<<<<<
 * 
 *                             return bestMove
 */
            __pyx_v_bestMove.promotion = -1;

            /* "ChessAI - Copy.pyx":679
 *                             bestMove.promotion = -1
 * 
 *                             return bestMove             # <<<<<<<<<<<<<<
 * 
 *                 if (repetitionFlag):
 */
            __pyx_r = __pyx_v_bestMove;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            goto __pyx_L0;

            /* "ChessAI - Copy.pyx":668
 *                     # Check if the best move excluding the repeating move is not good enough to be played
 *                     if (alpha < repetitionScore):
 *                         if (alpha <= -500):             # <<<<<<<<<<<<<<
 *                             cur = repetitionMove.uci()
 * 
 */
          }

          /* "ChessAI - Copy.pyx":667
 *                 if (repetitionFlag):
 *                     # Check if the best move excluding the repeating move is not good enough to be played
 *                     if (alpha < repetitionScore):             # <<<<<<<<<<<<<<
 *                         if (alpha <= -500):
 *                             cur = repetitionMove.uci()
 */
        }

        /* "ChessAI - Copy.pyx":665
 * 
 *                 # Check if a repeating move is detected
 *                 if (repetitionFlag):             # <<<<<<<<<<<<<<
 *                     # Check if the best move excluding the repeating move is not good enough to be played
 *                     if (alpha < repetitionScore):
 */
      }

      /* "ChessAI - Copy.pyx":681
 *                             return bestMove
 * 
 *                 if (repetitionFlag):             # <<<<<<<<<<<<<<
 *                     if (alpha < repetitionScore):
 *                         if (alpha <= -500):
 */
      __pyx_t_7 = (__pyx_v_repetitionFlag != 0);
      if (__pyx_t_7) {

        /* "ChessAI - Copy.pyx":682
 * 
 *                 if (repetitionFlag):
 *                     if (alpha < repetitionScore):             # <<<<<<<<<<<<<<
 *                         if (alpha <= -500):
 *                             cur = repetitionMove.uci()
 */
        __pyx_t_7 = ((__pyx_v_alpha < __pyx_v_repetitionScore) != 0);
        if (__pyx_t_7) {

          /* "ChessAI - Copy.pyx":683
 *                 if (repetitionFlag):
 *                     if (alpha < repetitionScore):
 *                         if (alpha <= -500):             # <<<<<<<<<<<<<<
 *                             cur = repetitionMove.uci()
 * 
 */
          __pyx_t_7 = ((__pyx_v_alpha <= -500L) != 0);
          if (__pyx_t_7) {

            /* "ChessAI - Copy.pyx":684
 *                     if (alpha < repetitionScore):
 *                         if (alpha <= -500):
 *                             cur = repetitionMove.uci()             # <<<<<<<<<<<<<<
 * 
 *                             bestMove.score = 0
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_repetitionMove, __pyx_n_s_uci); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 684, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 684, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 684, __pyx_L1_error)
            __Pyx_XDECREF_SET(__pyx_v_cur, ((PyObject*)__pyx_t_6));
            __pyx_t_6 = 0;

            /* "ChessAI - Copy.pyx":686
 *                             cur = repetitionMove.uci()
 * 
 *                             bestMove.score = 0             # <<<<<<<<<<<<<<
 *                             bestMove.a = ord(cur[0]) - 96
 *                             bestMove.b = ord(cur[1]) - ord('0')
 */
            __pyx_v_bestMove.score = 0;

            /* "ChessAI - Copy.pyx":687
 * 
 *                             bestMove.score = 0
 *                             bestMove.a = ord(cur[0]) - 96             # <<<<<<<<<<<<<<
 *                             bestMove.b = ord(cur[1]) - ord('0')
 *                             bestMove.c = ord(cur[2]) - 96
 */
            __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 687, __pyx_L1_error)
            __pyx_v_bestMove.a = (((long)__pyx_t_14) - 96);

            /* "ChessAI - Copy.pyx":688
 *                             bestMove.score = 0
 *                             bestMove.a = ord(cur[0]) - 96
 *                             bestMove.b = ord(cur[1]) - ord('0')             # <<<<<<<<<<<<<<
 *                             bestMove.c = ord(cur[2]) - 96
 *                             bestMove.d = ord(cur[3]) - ord('0')
 */
            __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 688, __pyx_L1_error)
            __pyx_v_bestMove.b = (((long)__pyx_t_14) - 48);

            /* "ChessAI - Copy.pyx":689
 *                             bestMove.a = ord(cur[0]) - 96
 *                             bestMove.b = ord(cur[1]) - ord('0')
 *                             bestMove.c = ord(cur[2]) - 96             # <<<<<<<<<<<<<<
 *                             bestMove.d = ord(cur[3]) - ord('0')
 * 
 */
            __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 689, __pyx_L1_error)
            __pyx_v_bestMove.c = (((long)__pyx_t_14) - 96);

            /* "ChessAI - Copy.pyx":690
 *                             bestMove.b = ord(cur[1]) - ord('0')
 *                             bestMove.c = ord(cur[2]) - 96
 *                             bestMove.d = ord(cur[3]) - ord('0')             # <<<<<<<<<<<<<<
 * 
 *                             bestMove.promotion = -1
 */
            __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 690, __pyx_L1_error)
            __pyx_v_bestMove.d = (((long)__pyx_t_14) - 48);

            /* "ChessAI - Copy.pyx":692
 *                             bestMove.d = ord(cur[3]) - ord('0')
 * 
 *                             bestMove.promotion = -1             # <<<<<<<<<<<<<<
 * 
 *                             return bestMove
 */
            __pyx_v_bestMove.promotion = -1;

            /* "ChessAI - Copy.pyx":694
 *                             bestMove.promotion = -1
 * 
 *                             return bestMove             # <<<<<<<<<<<<<<
 *                 return bestMove
 * 
 */
            __pyx_r = __pyx_v_bestMove;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            goto __pyx_L0;

            /* "ChessAI - Copy.pyx":683
 *                 if (repetitionFlag):
 *                     if (alpha < repetitionScore):
 *                         if (alpha <= -500):             # <<<<<<<<<<<<<<
 *                             cur = repetitionMove.uci()
 * 
 */
          }

          /* "ChessAI - Copy.pyx":682
 * 
 *                 if (repetitionFlag):
 *                     if (alpha < repetitionScore):             # <<<<<<<<<<<<<<
 *                         if (alpha <= -500):
 *                             cur = repetitionMove.uci()
 */
        }

        /* "ChessAI - Copy.pyx":681
 *                             return bestMove
 * 
 *                 if (repetitionFlag):             # <<<<<<<<<<<<<<
 *                     if (alpha < repetitionScore):
 *                         if (alpha <= -500):
 */
      }

      /* "ChessAI - Copy.pyx":695
 * 
 *                             return bestMove
 *                 return bestMove             # <<<<<<<<<<<<<<
 * 
 *         # Fill the non utilized alpha list to full capacity
 */
      __pyx_r = __pyx_v_bestMove;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "ChessAI - Copy.pyx":662
 * 
 *             # Check if the time limit is exceeded
 *             if (timer() - t0 >= self.time_limit):             # <<<<<<<<<<<<<<
 * 
 *                 # Check if a repeating move is detected
 */
    }

    /* "ChessAI - Copy.pyx":567
 *             return bestMove
 * 
 *         for move in moves_list[1:]:             # <<<<<<<<<<<<<<
 * 
 *             # Razoring
 */
  }
  __pyx_L13_break:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ChessAI - Copy.pyx":698
 * 
 *         # Fill the non utilized alpha list to full capacity
 *         for i in range(num_legal_moves - count):             # <<<<<<<<<<<<<<
 *             self.alpha_list.append(None)
 * 
 */
  __pyx_t_15 = (__pyx_v_num_legal_moves - __pyx_v_count);
  __pyx_t_16 = __pyx_t_15;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_16; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "ChessAI - Copy.pyx":699
 *         # Fill the non utilized alpha list to full capacity
 *         for i in range(num_legal_moves - count):
 *             self.alpha_list.append(None)             # <<<<<<<<<<<<<<
 * 
 *         if curDepth == 0:
 */
    if (unlikely(__pyx_v_self->alpha_list == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 699, __pyx_L1_error)
    }
    __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_self->alpha_list, Py_None); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 699, __pyx_L1_error)
  }

  /* "ChessAI - Copy.pyx":701
 *             self.alpha_list.append(None)
 * 
 *         if curDepth == 0:             # <<<<<<<<<<<<<<
 *             self.numMove += 1
 *             print(repetitionFlag, repetitionMove, repetitionScore, alpha)
 */
  __pyx_t_7 = ((__pyx_v_curDepth == 0) != 0);
  if (__pyx_t_7) {

    /* "ChessAI - Copy.pyx":702
 * 
 *         if curDepth == 0:
 *             self.numMove += 1             # <<<<<<<<<<<<<<
 *             print(repetitionFlag, repetitionMove, repetitionScore, alpha)
 *             # Check if a repeating move is detected
 */
    __pyx_v_self->numMove = (__pyx_v_self->numMove + 1);

    /* "ChessAI - Copy.pyx":703
 *         if curDepth == 0:
 *             self.numMove += 1
 *             print(repetitionFlag, repetitionMove, repetitionScore, alpha)             # <<<<<<<<<<<<<<
 *             # Check if a repeating move is detected
 *             if (repetitionFlag):
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_repetitionFlag); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_repetitionScore); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_alpha); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_repetitionMove);
    __Pyx_GIVEREF(__pyx_v_repetitionMove);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_repetitionMove);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "ChessAI - Copy.pyx":705
 *             print(repetitionFlag, repetitionMove, repetitionScore, alpha)
 *             # Check if a repeating move is detected
 *             if (repetitionFlag):             # <<<<<<<<<<<<<<
 * 
 *                 # Check if the best move excluding the repeating move is not good enough to be played
 */
    __pyx_t_7 = (__pyx_v_repetitionFlag != 0);
    if (__pyx_t_7) {

      /* "ChessAI - Copy.pyx":708
 * 
 *                 # Check if the best move excluding the repeating move is not good enough to be played
 *                 if (alpha < repetitionScore):             # <<<<<<<<<<<<<<
 *                     if (alpha <= -500):
 * 
 */
      __pyx_t_7 = ((__pyx_v_alpha < __pyx_v_repetitionScore) != 0);
      if (__pyx_t_7) {

        /* "ChessAI - Copy.pyx":709
 *                 # Check if the best move excluding the repeating move is not good enough to be played
 *                 if (alpha < repetitionScore):
 *                     if (alpha <= -500):             # <<<<<<<<<<<<<<
 * 
 *                         cur = repetitionMove.uci()
 */
        __pyx_t_7 = ((__pyx_v_alpha <= -500L) != 0);
        if (__pyx_t_7) {

          /* "ChessAI - Copy.pyx":711
 *                     if (alpha <= -500):
 * 
 *                         cur = repetitionMove.uci()             # <<<<<<<<<<<<<<
 * 
 *                         bestMove.score = 0
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_repetitionMove, __pyx_n_s_uci); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 711, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 711, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 711, __pyx_L1_error)
          __Pyx_XDECREF_SET(__pyx_v_cur, ((PyObject*)__pyx_t_5));
          __pyx_t_5 = 0;

          /* "ChessAI - Copy.pyx":713
 *                         cur = repetitionMove.uci()
 * 
 *                         bestMove.score = 0             # <<<<<<<<<<<<<<
 *                         bestMove.a = ord(cur[0]) - 96
 *                         bestMove.b = ord(cur[1]) - ord('0')
 */
          __pyx_v_bestMove.score = 0;

          /* "ChessAI - Copy.pyx":714
 * 
 *                         bestMove.score = 0
 *                         bestMove.a = ord(cur[0]) - 96             # <<<<<<<<<<<<<<
 *                         bestMove.b = ord(cur[1]) - ord('0')
 *                         bestMove.c = ord(cur[2]) - 96
 */
          __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 714, __pyx_L1_error)
          __pyx_v_bestMove.a = (((long)__pyx_t_14) - 96);

          /* "ChessAI - Copy.pyx":715
 *                         bestMove.score = 0
 *                         bestMove.a = ord(cur[0]) - 96
 *                         bestMove.b = ord(cur[1]) - ord('0')             # <<<<<<<<<<<<<<
 *                         bestMove.c = ord(cur[2]) - 96
 *                         bestMove.d = ord(cur[3]) - ord('0')
 */
          __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 715, __pyx_L1_error)
          __pyx_v_bestMove.b = (((long)__pyx_t_14) - 48);

          /* "ChessAI - Copy.pyx":716
 *                         bestMove.a = ord(cur[0]) - 96
 *                         bestMove.b = ord(cur[1]) - ord('0')
 *                         bestMove.c = ord(cur[2]) - 96             # <<<<<<<<<<<<<<
 *                         bestMove.d = ord(cur[3]) - ord('0')
 * 
 */
          __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 716, __pyx_L1_error)
          __pyx_v_bestMove.c = (((long)__pyx_t_14) - 96);

          /* "ChessAI - Copy.pyx":717
 *                         bestMove.b = ord(cur[1]) - ord('0')
 *                         bestMove.c = ord(cur[2]) - 96
 *                         bestMove.d = ord(cur[3]) - ord('0')             # <<<<<<<<<<<<<<
 * 
 *                         bestMove.promotion = -1
 */
          __pyx_t_14 = __Pyx_GetItemInt_Unicode(__pyx_v_cur, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == (Py_UCS4)-1)) __PYX_ERR(0, 717, __pyx_L1_error)
          __pyx_v_bestMove.d = (((long)__pyx_t_14) - 48);

          /* "ChessAI - Copy.pyx":719
 *                         bestMove.d = ord(cur[3]) - ord('0')
 * 
 *                         bestMove.promotion = -1             # <<<<<<<<<<<<<<
 * 
 *             if (depthLimit >= 5):
 */
          __pyx_v_bestMove.promotion = -1;

          /* "ChessAI - Copy.pyx":709
 *                 # Check if the best move excluding the repeating move is not good enough to be played
 *                 if (alpha < repetitionScore):
 *                     if (alpha <= -500):             # <<<<<<<<<<<<<<
 * 
 *                         cur = repetitionMove.uci()
 */
        }

        /* "ChessAI - Copy.pyx":708
 * 
 *                 # Check if the best move excluding the repeating move is not good enough to be played
 *                 if (alpha < repetitionScore):             # <<<<<<<<<<<<<<
 *                     if (alpha <= -500):
 * 
 */
      }

      /* "ChessAI - Copy.pyx":705
 *             print(repetitionFlag, repetitionMove, repetitionScore, alpha)
 *             # Check if a repeating move is detected
 *             if (repetitionFlag):             # <<<<<<<<<<<<<<
 * 
 *                 # Check if the best move excluding the repeating move is not good enough to be played
 */
    }

    /* "ChessAI - Copy.pyx":721
 *                         bestMove.promotion = -1
 * 
 *             if (depthLimit >= 5):             # <<<<<<<<<<<<<<
 *                 print()
 *                 print("Best: ", best_move_index)
 */
    __pyx_t_7 = ((__pyx_v_depthLimit >= 5) != 0);
    if (__pyx_t_7) {

      /* "ChessAI - Copy.pyx":722
 * 
 *             if (depthLimit >= 5):
 *                 print()             # <<<<<<<<<<<<<<
 *                 print("Best: ", best_move_index)
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_builtin_print); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "ChessAI - Copy.pyx":723
 *             if (depthLimit >= 5):
 *                 print()
 *                 print("Best: ", best_move_index)             # <<<<<<<<<<<<<<
 * 
 *             return bestMove
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_best_move_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 723, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 723, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_kp_u_Best);
      __Pyx_GIVEREF(__pyx_kp_u_Best);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Best);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 723, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "ChessAI - Copy.pyx":721
 *                         bestMove.promotion = -1
 * 
 *             if (depthLimit >= 5):             # <<<<<<<<<<<<<<
 *                 print()
 *                 print("Best: ", best_move_index)
 */
    }

    /* "ChessAI - Copy.pyx":725
 *                 print("Best: ", best_move_index)
 * 
 *             return bestMove             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = __pyx_v_bestMove;
    goto __pyx_L0;

    /* "ChessAI - Copy.pyx":701
 *             self.alpha_list.append(None)
 * 
 *         if curDepth == 0:             # <<<<<<<<<<<<<<
 *             self.numMove += 1
 *             print(repetitionFlag, repetitionMove, repetitionScore, alpha)
 */
  }

  /* "ChessAI - Copy.pyx":434
 *     @cython.ccall
 *     @cython.inline
 *     cdef MoveData alphaBeta(self, int curDepth, int depthLimit, double t0):             # <<<<<<<<<<<<<<
 * 
 *         # Initialize alpha and beta values
 */

  /* function exit code */
  __Pyx_pretend_to_initialize(&__pyx_r);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("ChessAI.ChessAI.alphaBeta", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_move);
  __Pyx_XDECREF(__pyx_v_cur);
  __Pyx_XDECREF(__pyx_v_moves_list);
  __Pyx_XDECREF(__pyx_v_alpha_list);
  __Pyx_XDECREF(__pyx_v_beta_list);
  __Pyx_XDECREF(__pyx_v_beta_move_list);
  __Pyx_XDECREF(__pyx_v_repetitionMove);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ChessAI - Copy.pyx":735
 *     @cython.ccall
 *     @cython.inline
 *     cdef int maximizer(self, int curDepth, int depthLimit, int alpha, int beta):             # <<<<<<<<<<<<<<
 * 
 *         # If the depth limit is reached, evaluate the current position
 */

static int __pyx_f_7ChessAI_7ChessAI_maximizer(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_curDepth, int __pyx_v_depthLimit, int __pyx_v_alpha, int __pyx_v_beta) {
  int __pyx_v_highestScore;
  int __pyx_v_score;
  PyObject *__pyx_v_move = 0;
  uint64_t __pyx_v_curHash;
  uint64_t __pyx_v_pawns;
  uint64_t __pyx_v_knights;
  uint64_t __pyx_v_bishops;
  uint64_t __pyx_v_rooks;
  uint64_t __pyx_v_queens;
  uint64_t __pyx_v_kings;
  uint64_t __pyx_v_occupied_white;
  uint64_t __pyx_v_occupied_black;
  CYTHON_UNUSED uint64_t __pyx_v_occupied;
  int __pyx_v_promotion;
  int __pyx_v_isCapture;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  uint64_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  uint8_t __pyx_t_11;
  uint8_t __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("maximizer", 0);

  /* "ChessAI - Copy.pyx":738
 * 
 *         # If the depth limit is reached, evaluate the current position
 *         if curDepth >= depthLimit:             # <<<<<<<<<<<<<<
 *             self.numIterations += 1
 *             return evaluate_board(self.pgnBoard,self.zobrist)
 */
  __pyx_t_1 = ((__pyx_v_curDepth >= __pyx_v_depthLimit) != 0);
  if (__pyx_t_1) {

    /* "ChessAI - Copy.pyx":739
 *         # If the depth limit is reached, evaluate the current position
 *         if curDepth >= depthLimit:
 *             self.numIterations += 1             # <<<<<<<<<<<<<<
 *             return evaluate_board(self.pgnBoard,self.zobrist)
 *             # return self.quiescenceMax(alpha, beta, 0)
 */
    __pyx_v_self->numIterations = (__pyx_v_self->numIterations + 1);

    /* "ChessAI - Copy.pyx":740
 *         if curDepth >= depthLimit:
 *             self.numIterations += 1
 *             return evaluate_board(self.pgnBoard,self.zobrist)             # <<<<<<<<<<<<<<
 *             # return self.quiescenceMax(alpha, beta, 0)
 * 
 */
    __pyx_t_2 = __pyx_v_self->pgnBoard;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_r = __pyx_f_7ChessAI_evaluate_board(__pyx_t_2, __pyx_v_self->zobrist);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "ChessAI - Copy.pyx":738
 * 
 *         # If the depth limit is reached, evaluate the current position
 *         if curDepth >= depthLimit:             # <<<<<<<<<<<<<<
 *             self.numIterations += 1
 *             return evaluate_board(self.pgnBoard,self.zobrist)
 */
  }

  /* "ChessAI - Copy.pyx":744
 * 
 *         # Initialize variables to hold the highest score, the current score and current move
 *         cdef int highestScore = -9999999             # <<<<<<<<<<<<<<
 *         cdef int score
 *         cdef object move
 */
  __pyx_v_highestScore = -9999999;

  /* "ChessAI - Copy.pyx":749
 * 
 *         # Define variable to hold the zobrist hash for the current board state
 *         cdef uint64_t curHash = self.zobrist             # <<<<<<<<<<<<<<
 * 
 *         # Initialize bitmasks for the current board state
 */
  __pyx_t_3 = __pyx_v_self->zobrist;
  __pyx_v_curHash = __pyx_t_3;

  /* "ChessAI - Copy.pyx":752
 * 
 *         # Initialize bitmasks for the current board state
 *         cdef uint64_t pawns = self.pgnBoard.pawns             # <<<<<<<<<<<<<<
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_pawns); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_pawns = __pyx_t_3;

  /* "ChessAI - Copy.pyx":753
 *         # Initialize bitmasks for the current board state
 *         cdef uint64_t pawns = self.pgnBoard.pawns
 *         cdef uint64_t knights = self.pgnBoard.knights             # <<<<<<<<<<<<<<
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_knights); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_knights = __pyx_t_3;

  /* "ChessAI - Copy.pyx":754
 *         cdef uint64_t pawns = self.pgnBoard.pawns
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops             # <<<<<<<<<<<<<<
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_bishops); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bishops = __pyx_t_3;

  /* "ChessAI - Copy.pyx":755
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks             # <<<<<<<<<<<<<<
 *         cdef uint64_t queens = self.pgnBoard.queens
 *         cdef uint64_t kings = self.pgnBoard.kings
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_rooks); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_rooks = __pyx_t_3;

  /* "ChessAI - Copy.pyx":756
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens             # <<<<<<<<<<<<<<
 *         cdef uint64_t kings = self.pgnBoard.kings
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_queens); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_queens = __pyx_t_3;

  /* "ChessAI - Copy.pyx":757
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens
 *         cdef uint64_t kings = self.pgnBoard.kings             # <<<<<<<<<<<<<<
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_kings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_kings = __pyx_t_3;

  /* "ChessAI - Copy.pyx":759
 *         cdef uint64_t kings = self.pgnBoard.kings
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]             # <<<<<<<<<<<<<<
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]
 *         cdef uint64_t occupied = self.pgnBoard.occupied
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, 1, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_occupied_white = __pyx_t_3;

  /* "ChessAI - Copy.pyx":760
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]             # <<<<<<<<<<<<<<
 *         cdef uint64_t occupied = self.pgnBoard.occupied
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 0, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_occupied_black = __pyx_t_3;

  /* "ChessAI - Copy.pyx":761
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]
 *         cdef uint64_t occupied = self.pgnBoard.occupied             # <<<<<<<<<<<<<<
 * 
 *         # Define variables to hold information for zobrist hashing
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_occupied = __pyx_t_3;

  /* "ChessAI - Copy.pyx":764
 * 
 *         # Define variables to hold information for zobrist hashing
 *         cdef int promotion = 0             # <<<<<<<<<<<<<<
 *         cdef bint isCapture
 * 
 */
  __pyx_v_promotion = 0;

  /* "ChessAI - Copy.pyx":770
 *         # cdef list moves_list = list(self.reorder_capture_moves(chess.BB_ALL, self.pgnBoard))
 * 
 *         for move in self.reorder_capture_moves(chess.BB_ALL, self.pgnBoard):             # <<<<<<<<<<<<<<
 * 
 *             # Check if the move is a promoting move
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reorder_capture_moves); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_chess); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_BB_ALL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_6, __pyx_v_self->pgnBoard};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_6, __pyx_v_self->pgnBoard};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_6);
    __Pyx_INCREF(__pyx_v_self->pgnBoard);
    __Pyx_GIVEREF(__pyx_v_self->pgnBoard);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_self->pgnBoard);
    __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 770, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 770, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 770, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_10(__pyx_t_4);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 770, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_move, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ChessAI - Copy.pyx":773
 * 
 *             # Check if the move is a promoting move
 *             if (move.promotion):             # <<<<<<<<<<<<<<
 *                 promotion = move.promotion
 *             else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ChessAI - Copy.pyx":774
 *             # Check if the move is a promoting move
 *             if (move.promotion):
 *                 promotion = move.promotion             # <<<<<<<<<<<<<<
 *             else:
 *                 promotion = 0
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 774, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_promotion = __pyx_t_7;

      /* "ChessAI - Copy.pyx":773
 * 
 *             # Check if the move is a promoting move
 *             if (move.promotion):             # <<<<<<<<<<<<<<
 *                 promotion = move.promotion
 *             else:
 */
      goto __pyx_L6;
    }

    /* "ChessAI - Copy.pyx":776
 *                 promotion = move.promotion
 *             else:
 *                 promotion = 0             # <<<<<<<<<<<<<<
 * 
 *             # Acquire the zobrist hash for the new position if the given move was made
 */
    /*else*/ {
      __pyx_v_promotion = 0;
    }
    __pyx_L6:;

    /* "ChessAI - Copy.pyx":779
 * 
 *             # Acquire the zobrist hash for the new position if the given move was made
 *             isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))             # <<<<<<<<<<<<<<
 *             updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyInt_As_uint8_t(__pyx_t_2); if (unlikely((__pyx_t_11 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_12 = __Pyx_PyInt_As_uint8_t(__pyx_t_2); if (unlikely((__pyx_t_12 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_turn); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_13 = (!__pyx_t_1);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_2, __pyx_t_13, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_8); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_en_passant); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_8 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_move);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_isCapture = is_capture(__pyx_t_11, __pyx_t_12, __pyx_t_3, __pyx_t_13);

    /* "ChessAI - Copy.pyx":780
 *             # Acquire the zobrist hash for the new position if the given move was made
 *             isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))
 *             updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)             # <<<<<<<<<<<<<<
 * 
 *             # Push the given move and call the minimizer
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_12 = __Pyx_PyInt_As_uint8_t(__pyx_t_8); if (unlikely((__pyx_t_12 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = __Pyx_PyInt_As_uint8_t(__pyx_t_8); if (unlikely((__pyx_t_11 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    updateZobristHashForMove(__pyx_v_self->zobrist, __pyx_t_12, __pyx_t_11, __pyx_v_isCapture, __pyx_v_pawns, __pyx_v_knights, __pyx_v_bishops, __pyx_v_rooks, __pyx_v_queens, __pyx_v_kings, __pyx_v_occupied_white, __pyx_v_occupied_black, __pyx_v_promotion);

    /* "ChessAI - Copy.pyx":783
 * 
 *             # Push the given move and call the minimizer
 *             self.pgnBoard.push(move)             # <<<<<<<<<<<<<<
 *             score = self.minimizer(curDepth + 1, depthLimit, alpha, beta, [],[])
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_push); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_8 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_move);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "ChessAI - Copy.pyx":784
 *             # Push the given move and call the minimizer
 *             self.pgnBoard.push(move)
 *             score = self.minimizer(curDepth + 1, depthLimit, alpha, beta, [],[])             # <<<<<<<<<<<<<<
 * 
 *             # Undo the move and restore the zobrist hash
 */
    __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_score = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->minimizer(__pyx_v_self, (__pyx_v_curDepth + 1), __pyx_v_depthLimit, __pyx_v_alpha, __pyx_v_beta, ((PyObject*)__pyx_t_8), ((PyObject*)__pyx_t_2));
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ChessAI - Copy.pyx":787
 * 
 *             # Undo the move and restore the zobrist hash
 *             self.pgnBoard.pop()             # <<<<<<<<<<<<<<
 *             self.zobrist = curHash
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Pop(__pyx_v_self->pgnBoard); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ChessAI - Copy.pyx":788
 *             # Undo the move and restore the zobrist hash
 *             self.pgnBoard.pop()
 *             self.zobrist = curHash             # <<<<<<<<<<<<<<
 * 
 *             # ** Code for testing purposes **
 */
    __pyx_v_self->zobrist = __pyx_v_curHash;

    /* "ChessAI - Copy.pyx":802
 * 
 *             # Acquire the highest score and alpha
 *             if score > highestScore:             # <<<<<<<<<<<<<<
 *                 highestScore = score
 * 
 */
    __pyx_t_13 = ((__pyx_v_score > __pyx_v_highestScore) != 0);
    if (__pyx_t_13) {

      /* "ChessAI - Copy.pyx":803
 *             # Acquire the highest score and alpha
 *             if score > highestScore:
 *                 highestScore = score             # <<<<<<<<<<<<<<
 * 
 *             alpha = max(alpha, highestScore)
 */
      __pyx_v_highestScore = __pyx_v_score;

      /* "ChessAI - Copy.pyx":802
 * 
 *             # Acquire the highest score and alpha
 *             if score > highestScore:             # <<<<<<<<<<<<<<
 *                 highestScore = score
 * 
 */
    }

    /* "ChessAI - Copy.pyx":805
 *                 highestScore = score
 * 
 *             alpha = max(alpha, highestScore)             # <<<<<<<<<<<<<<
 * 
 *             # Beta cutoff
 */
    __pyx_t_7 = __pyx_v_highestScore;
    __pyx_t_14 = __pyx_v_alpha;
    if (((__pyx_t_7 > __pyx_t_14) != 0)) {
      __pyx_t_15 = __pyx_t_7;
    } else {
      __pyx_t_15 = __pyx_t_14;
    }
    __pyx_v_alpha = __pyx_t_15;

    /* "ChessAI - Copy.pyx":808
 * 
 *             # Beta cutoff
 *             if beta <= alpha:             # <<<<<<<<<<<<<<
 *                 return highestScore
 * 
 */
    __pyx_t_13 = ((__pyx_v_beta <= __pyx_v_alpha) != 0);
    if (__pyx_t_13) {

      /* "ChessAI - Copy.pyx":809
 *             # Beta cutoff
 *             if beta <= alpha:
 *                 return highestScore             # <<<<<<<<<<<<<<
 * 
 *         # Check if the last move resulted in a checkmate for the opposing player
 */
      __pyx_r = __pyx_v_highestScore;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "ChessAI - Copy.pyx":808
 * 
 *             # Beta cutoff
 *             if beta <= alpha:             # <<<<<<<<<<<<<<
 *                 return highestScore
 * 
 */
    }

    /* "ChessAI - Copy.pyx":770
 *         # cdef list moves_list = list(self.reorder_capture_moves(chess.BB_ALL, self.pgnBoard))
 * 
 *         for move in self.reorder_capture_moves(chess.BB_ALL, self.pgnBoard):             # <<<<<<<<<<<<<<
 * 
 *             # Check if the move is a promoting move
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ChessAI - Copy.pyx":812
 * 
 *         # Check if the last move resulted in a checkmate for the opposing player
 *         if (highestScore == -9999999):             # <<<<<<<<<<<<<<
 *             self.numIterations += 1
 *             if self.pgnBoard.is_checkmate():
 */
  __pyx_t_13 = ((__pyx_v_highestScore == -9999999L) != 0);
  if (__pyx_t_13) {

    /* "ChessAI - Copy.pyx":813
 *         # Check if the last move resulted in a checkmate for the opposing player
 *         if (highestScore == -9999999):
 *             self.numIterations += 1             # <<<<<<<<<<<<<<
 *             if self.pgnBoard.is_checkmate():
 *                 return -100000000
 */
    __pyx_v_self->numIterations = (__pyx_v_self->numIterations + 1);

    /* "ChessAI - Copy.pyx":814
 *         if (highestScore == -9999999):
 *             self.numIterations += 1
 *             if self.pgnBoard.is_checkmate():             # <<<<<<<<<<<<<<
 *                 return -100000000
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_checkmate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_13) {

      /* "ChessAI - Copy.pyx":815
 *             self.numIterations += 1
 *             if self.pgnBoard.is_checkmate():
 *                 return -100000000             # <<<<<<<<<<<<<<
 * 
 *         return highestScore
 */
      __pyx_r = -100000000;
      goto __pyx_L0;

      /* "ChessAI - Copy.pyx":814
 *         if (highestScore == -9999999):
 *             self.numIterations += 1
 *             if self.pgnBoard.is_checkmate():             # <<<<<<<<<<<<<<
 *                 return -100000000
 * 
 */
    }

    /* "ChessAI - Copy.pyx":812
 * 
 *         # Check if the last move resulted in a checkmate for the opposing player
 *         if (highestScore == -9999999):             # <<<<<<<<<<<<<<
 *             self.numIterations += 1
 *             if self.pgnBoard.is_checkmate():
 */
  }

  /* "ChessAI - Copy.pyx":817
 *                 return -100000000
 * 
 *         return highestScore             # <<<<<<<<<<<<<<
 * 
 *     # Define the minimizer function
 */
  __pyx_r = __pyx_v_highestScore;
  goto __pyx_L0;

  /* "ChessAI - Copy.pyx":735
 *     @cython.ccall
 *     @cython.inline
 *     cdef int maximizer(self, int curDepth, int depthLimit, int alpha, int beta):             # <<<<<<<<<<<<<<
 * 
 *         # If the depth limit is reached, evaluate the current position
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("ChessAI.ChessAI.maximizer", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_move);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ChessAI - Copy.pyx":826
 *     @cython.ccall
 *     @cython.inline
 *     cdef int minimizer(self, int curDepth, int depthLimit, int alpha, int beta, list beta_list_og, list beta_moves_list):             # <<<<<<<<<<<<<<
 * 
 *         # If the depth limit is reached, evaluate the current position
 */

static int __pyx_f_7ChessAI_7ChessAI_minimizer(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_curDepth, int __pyx_v_depthLimit, int __pyx_v_alpha, int __pyx_v_beta, PyObject *__pyx_v_beta_list_og, PyObject *__pyx_v_beta_moves_list) {
  int __pyx_v_lowestScore;
  int __pyx_v_score;
  PyObject *__pyx_v_move = 0;
  int __pyx_v_count;
  int __pyx_v_razorThreshold;
  uint64_t __pyx_v_curHash;
  PyObject *__pyx_v_cur_beta_list = 0;
  PyObject *__pyx_v_beta_list = 0;
  uint64_t __pyx_v_pawns;
  uint64_t __pyx_v_knights;
  uint64_t __pyx_v_bishops;
  uint64_t __pyx_v_rooks;
  uint64_t __pyx_v_queens;
  uint64_t __pyx_v_kings;
  uint64_t __pyx_v_occupied_white;
  uint64_t __pyx_v_occupied_black;
  CYTHON_UNUSED uint64_t __pyx_v_occupied;
  int __pyx_v_promotion;
  int __pyx_v_isCapture;
  int __pyx_v_length;
  PyObject *__pyx_v_moves_list = 0;
  CYTHON_UNUSED int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  uint64_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  uint8_t __pyx_t_12;
  uint8_t __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *(*__pyx_t_17)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("minimizer", 0);

  /* "ChessAI - Copy.pyx":829
 * 
 *         # If the depth limit is reached, evaluate the current position
 *         if curDepth >= depthLimit:             # <<<<<<<<<<<<<<
 *             self.numIterations += 1
 *             return evaluate_board(self.pgnBoard,self.zobrist)
 */
  __pyx_t_1 = ((__pyx_v_curDepth >= __pyx_v_depthLimit) != 0);
  if (__pyx_t_1) {

    /* "ChessAI - Copy.pyx":830
 *         # If the depth limit is reached, evaluate the current position
 *         if curDepth >= depthLimit:
 *             self.numIterations += 1             # <<<<<<<<<<<<<<
 *             return evaluate_board(self.pgnBoard,self.zobrist)
 *             # return self.quiescenceMin(alpha, beta, 0)
 */
    __pyx_v_self->numIterations = (__pyx_v_self->numIterations + 1);

    /* "ChessAI - Copy.pyx":831
 *         if curDepth >= depthLimit:
 *             self.numIterations += 1
 *             return evaluate_board(self.pgnBoard,self.zobrist)             # <<<<<<<<<<<<<<
 *             # return self.quiescenceMin(alpha, beta, 0)
 * 
 */
    __pyx_t_2 = __pyx_v_self->pgnBoard;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_r = __pyx_f_7ChessAI_evaluate_board(__pyx_t_2, __pyx_v_self->zobrist);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "ChessAI - Copy.pyx":829
 * 
 *         # If the depth limit is reached, evaluate the current position
 *         if curDepth >= depthLimit:             # <<<<<<<<<<<<<<
 *             self.numIterations += 1
 *             return evaluate_board(self.pgnBoard,self.zobrist)
 */
  }

  /* "ChessAI - Copy.pyx":835
 * 
 *         # Define the lowest score with respect to the number of moves played
 *         cdef int lowestScore = 9999999 - len(self.pgnBoard.move_stack)             # <<<<<<<<<<<<<<
 * 
 *         # Define variables to hold the current move, score and index
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_move_stack); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_lowestScore = (0x98967F - __pyx_t_3);

  /* "ChessAI - Copy.pyx":840
 *         cdef int score
 *         cdef object move
 *         cdef int count = 0             # <<<<<<<<<<<<<<
 * 
 *         # Define and initialize the razoring threshold
 */
  __pyx_v_count = 0;

  /* "ChessAI - Copy.pyx":844
 *         # Define and initialize the razoring threshold
 *         cdef int razorThreshold
 *         if (depthLimit == 4):             # <<<<<<<<<<<<<<
 *             razorThreshold = max (int(1000 * .75** (depthLimit - 5)), 200)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_depthLimit == 4) != 0);
  if (__pyx_t_1) {

    /* "ChessAI - Copy.pyx":845
 *         cdef int razorThreshold
 *         if (depthLimit == 4):
 *             razorThreshold = max (int(1000 * .75** (depthLimit - 5)), 200)             # <<<<<<<<<<<<<<
 *         else:
 *             razorThreshold = max (int(750 * .75** (depthLimit - 5)), 50)
 */
    __pyx_t_4 = 0xC8;
    __pyx_t_2 = __Pyx_PyInt_FromDouble((1000.0 * pow(.75, ((double)(__pyx_v_depthLimit - 5))))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_6, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_1) {
      __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __pyx_t_7;
      __pyx_t_7 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_5 = __pyx_t_2;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_razorThreshold = __pyx_t_8;

    /* "ChessAI - Copy.pyx":844
 *         # Define and initialize the razoring threshold
 *         cdef int razorThreshold
 *         if (depthLimit == 4):             # <<<<<<<<<<<<<<
 *             razorThreshold = max (int(1000 * .75** (depthLimit - 5)), 200)
 *         else:
 */
    goto __pyx_L4;
  }

  /* "ChessAI - Copy.pyx":847
 *             razorThreshold = max (int(1000 * .75** (depthLimit - 5)), 200)
 *         else:
 *             razorThreshold = max (int(750 * .75** (depthLimit - 5)), 50)             # <<<<<<<<<<<<<<
 * 
 *         # Define variable to hold the zobrist hash for the current board state
 */
  /*else*/ {
    __pyx_t_4 = 50;
    __pyx_t_5 = __Pyx_PyInt_FromDouble((750.0 * pow(.75, ((double)(__pyx_v_depthLimit - 5))))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_7, __pyx_t_5, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_1) {
      __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __pyx_t_6;
      __pyx_t_6 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_2 = __pyx_t_5;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_razorThreshold = __pyx_t_8;
  }
  __pyx_L4:;

  /* "ChessAI - Copy.pyx":850
 * 
 *         # Define variable to hold the zobrist hash for the current board state
 *         cdef uint64_t curHash = self.zobrist             # <<<<<<<<<<<<<<
 * 
 *         # Define lists to hold the current scores and copy of the expected scores
 */
  __pyx_t_9 = __pyx_v_self->zobrist;
  __pyx_v_curHash = __pyx_t_9;

  /* "ChessAI - Copy.pyx":853
 * 
 *         # Define lists to hold the current scores and copy of the expected scores
 *         cdef list cur_beta_list = []             # <<<<<<<<<<<<<<
 *         cdef list beta_list = beta_list_og.copy()
 * 
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_cur_beta_list = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ChessAI - Copy.pyx":854
 *         # Define lists to hold the current scores and copy of the expected scores
 *         cdef list cur_beta_list = []
 *         cdef list beta_list = beta_list_og.copy()             # <<<<<<<<<<<<<<
 * 
 *         # Initialize bitmasks for the current board state
 */
  __pyx_t_2 = __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyList_Type_copy, __pyx_v_beta_list_og); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 854, __pyx_L1_error)
  __pyx_v_beta_list = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ChessAI - Copy.pyx":857
 * 
 *         # Initialize bitmasks for the current board state
 *         cdef uint64_t pawns = self.pgnBoard.pawns             # <<<<<<<<<<<<<<
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_pawns); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_pawns = __pyx_t_9;

  /* "ChessAI - Copy.pyx":858
 *         # Initialize bitmasks for the current board state
 *         cdef uint64_t pawns = self.pgnBoard.pawns
 *         cdef uint64_t knights = self.pgnBoard.knights             # <<<<<<<<<<<<<<
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_knights); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_knights = __pyx_t_9;

  /* "ChessAI - Copy.pyx":859
 *         cdef uint64_t pawns = self.pgnBoard.pawns
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops             # <<<<<<<<<<<<<<
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_bishops); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bishops = __pyx_t_9;

  /* "ChessAI - Copy.pyx":860
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks             # <<<<<<<<<<<<<<
 *         cdef uint64_t queens = self.pgnBoard.queens
 *         cdef uint64_t kings = self.pgnBoard.kings
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_rooks); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_rooks = __pyx_t_9;

  /* "ChessAI - Copy.pyx":861
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens             # <<<<<<<<<<<<<<
 *         cdef uint64_t kings = self.pgnBoard.kings
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_queens); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_queens = __pyx_t_9;

  /* "ChessAI - Copy.pyx":862
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens
 *         cdef uint64_t kings = self.pgnBoard.kings             # <<<<<<<<<<<<<<
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_kings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_kings = __pyx_t_9;

  /* "ChessAI - Copy.pyx":864
 *         cdef uint64_t kings = self.pgnBoard.kings
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]             # <<<<<<<<<<<<<<
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]
 *         cdef uint64_t occupied = self.pgnBoard.occupied
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, 1, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_5); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_occupied_white = __pyx_t_9;

  /* "ChessAI - Copy.pyx":865
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]             # <<<<<<<<<<<<<<
 *         cdef uint64_t occupied = self.pgnBoard.occupied
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, 0, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_occupied_black = __pyx_t_9;

  /* "ChessAI - Copy.pyx":866
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]
 *         cdef uint64_t occupied = self.pgnBoard.occupied             # <<<<<<<<<<<<<<
 * 
 *         # Define variables to hold information for zobrist hashing
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_occupied = __pyx_t_9;

  /* "ChessAI - Copy.pyx":869
 * 
 *         # Define variables to hold information for zobrist hashing
 *         cdef int promotion = 0             # <<<<<<<<<<<<<<
 *         cdef bint isCapture
 * 
 */
  __pyx_v_promotion = 0;

  /* "ChessAI - Copy.pyx":873
 * 
 *         # Variable to hold full length of the list
 *         cdef int length = 0             # <<<<<<<<<<<<<<
 * 
 *         # Check for the second recursive depth to use the stored moves list instead of generating it
 */
  __pyx_v_length = 0;

  /* "ChessAI - Copy.pyx":877
 *         # Check for the second recursive depth to use the stored moves list instead of generating it
 *         cdef list moves_list
 *         if (curDepth == 1):             # <<<<<<<<<<<<<<
 *             moves_list = beta_moves_list.copy()
 *             quicksort_ascending_wrapper(beta_list, moves_list)
 */
  __pyx_t_1 = ((__pyx_v_curDepth == 1) != 0);
  if (__pyx_t_1) {

    /* "ChessAI - Copy.pyx":878
 *         cdef list moves_list
 *         if (curDepth == 1):
 *             moves_list = beta_moves_list.copy()             # <<<<<<<<<<<<<<
 *             quicksort_ascending_wrapper(beta_list, moves_list)
 *             self.beta_move_list.append(moves_list)
 */
    __pyx_t_2 = __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyList_Type_copy, __pyx_v_beta_moves_list); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 878, __pyx_L1_error)
    __pyx_v_moves_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ChessAI - Copy.pyx":879
 *         if (curDepth == 1):
 *             moves_list = beta_moves_list.copy()
 *             quicksort_ascending_wrapper(beta_list, moves_list)             # <<<<<<<<<<<<<<
 *             self.beta_move_list.append(moves_list)
 *             length = len(moves_list)
 */
    __pyx_f_7ChessAI_quicksort_ascending_wrapper(__pyx_v_beta_list, __pyx_v_moves_list);

    /* "ChessAI - Copy.pyx":880
 *             moves_list = beta_moves_list.copy()
 *             quicksort_ascending_wrapper(beta_list, moves_list)
 *             self.beta_move_list.append(moves_list)             # <<<<<<<<<<<<<<
 *             length = len(moves_list)
 * 
 */
    if (unlikely(__pyx_v_self->beta_move_list == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 880, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_self->beta_move_list, __pyx_v_moves_list); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 880, __pyx_L1_error)

    /* "ChessAI - Copy.pyx":881
 *             quicksort_ascending_wrapper(beta_list, moves_list)
 *             self.beta_move_list.append(moves_list)
 *             length = len(moves_list)             # <<<<<<<<<<<<<<
 * 
 *         # Check for the second recursive depth
 */
    if (unlikely(__pyx_v_moves_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 881, __pyx_L1_error)
    }
    __pyx_t_3 = PyList_GET_SIZE(__pyx_v_moves_list); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 881, __pyx_L1_error)
    __pyx_v_length = __pyx_t_3;

    /* "ChessAI - Copy.pyx":877
 *         # Check for the second recursive depth to use the stored moves list instead of generating it
 *         cdef list moves_list
 *         if (curDepth == 1):             # <<<<<<<<<<<<<<
 *             moves_list = beta_moves_list.copy()
 *             quicksort_ascending_wrapper(beta_list, moves_list)
 */
  }

  /* "ChessAI - Copy.pyx":884
 * 
 *         # Check for the second recursive depth
 *         if curDepth == 1:             # <<<<<<<<<<<<<<
 *             for move in moves_list:
 * 
 */
  __pyx_t_1 = ((__pyx_v_curDepth == 1) != 0);
  if (__pyx_t_1) {

    /* "ChessAI - Copy.pyx":885
 *         # Check for the second recursive depth
 *         if curDepth == 1:
 *             for move in moves_list:             # <<<<<<<<<<<<<<
 * 
 *                 # Razoring
 */
    if (unlikely(!__pyx_v_moves_list)) { __Pyx_RaiseUnboundLocalError("moves_list"); __PYX_ERR(0, 885, __pyx_L1_error) }
    if (unlikely(__pyx_v_moves_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 885, __pyx_L1_error)
    }
    __pyx_t_2 = __pyx_v_moves_list; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 885, __pyx_L1_error)
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 885, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_move, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "ChessAI - Copy.pyx":888
 * 
 *                 # Razoring
 *                 if (not(beta_list[count] == None)):             # <<<<<<<<<<<<<<
 *                     if (beta_list[count] - beta > razorThreshold):
 *                         count+=1
 */
      if (unlikely(__pyx_v_beta_list == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 888, __pyx_L1_error)
      }
      __pyx_t_5 = PyObject_RichCompare(PyList_GET_ITEM(__pyx_v_beta_list, __pyx_v_count), Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 888, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_11 = ((!__pyx_t_1) != 0);
      if (__pyx_t_11) {

        /* "ChessAI - Copy.pyx":889
 *                 # Razoring
 *                 if (not(beta_list[count] == None)):
 *                     if (beta_list[count] - beta > razorThreshold):             # <<<<<<<<<<<<<<
 *                         count+=1
 *                         cur_beta_list.append(None)
 */
        if (unlikely(__pyx_v_beta_list == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 889, __pyx_L1_error)
        }
        __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_beta); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 889, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PyNumber_Subtract(PyList_GET_ITEM(__pyx_v_beta_list, __pyx_v_count), __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 889, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_razorThreshold); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 889, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = PyObject_RichCompare(__pyx_t_6, __pyx_t_5, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 889, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 889, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (__pyx_t_11) {

          /* "ChessAI - Copy.pyx":890
 *                 if (not(beta_list[count] == None)):
 *                     if (beta_list[count] - beta > razorThreshold):
 *                         count+=1             # <<<<<<<<<<<<<<
 *                         cur_beta_list.append(None)
 *                         continue
 */
          __pyx_v_count = (__pyx_v_count + 1);

          /* "ChessAI - Copy.pyx":891
 *                     if (beta_list[count] - beta > razorThreshold):
 *                         count+=1
 *                         cur_beta_list.append(None)             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_cur_beta_list, Py_None); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 891, __pyx_L1_error)

          /* "ChessAI - Copy.pyx":892
 *                         count+=1
 *                         cur_beta_list.append(None)
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                 # Check if the move is a promoting move
 */
          goto __pyx_L7_continue;

          /* "ChessAI - Copy.pyx":889
 *                 # Razoring
 *                 if (not(beta_list[count] == None)):
 *                     if (beta_list[count] - beta > razorThreshold):             # <<<<<<<<<<<<<<
 *                         count+=1
 *                         cur_beta_list.append(None)
 */
        }

        /* "ChessAI - Copy.pyx":888
 * 
 *                 # Razoring
 *                 if (not(beta_list[count] == None)):             # <<<<<<<<<<<<<<
 *                     if (beta_list[count] - beta > razorThreshold):
 *                         count+=1
 */
      }

      /* "ChessAI - Copy.pyx":895
 * 
 *                 # Check if the move is a promoting move
 *                 if (move.promotion):             # <<<<<<<<<<<<<<
 *                     promotion = move.promotion
 *                 else:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_11) {

        /* "ChessAI - Copy.pyx":896
 *                 # Check if the move is a promoting move
 *                 if (move.promotion):
 *                     promotion = move.promotion             # <<<<<<<<<<<<<<
 *                 else:
 *                     promotion = 0
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 896, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 896, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_v_promotion = __pyx_t_8;

        /* "ChessAI - Copy.pyx":895
 * 
 *                 # Check if the move is a promoting move
 *                 if (move.promotion):             # <<<<<<<<<<<<<<
 *                     promotion = move.promotion
 *                 else:
 */
        goto __pyx_L11;
      }

      /* "ChessAI - Copy.pyx":898
 *                     promotion = move.promotion
 *                 else:
 *                     promotion = 0             # <<<<<<<<<<<<<<
 * 
 *                 # Acquire the zobrist hash for the new position if the given move was made
 */
      /*else*/ {
        __pyx_v_promotion = 0;
      }
      __pyx_L11:;

      /* "ChessAI - Copy.pyx":901
 * 
 *                 # Acquire the zobrist hash for the new position if the given move was made
 *                 isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))             # <<<<<<<<<<<<<<
 *                 updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)
 * 
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = __Pyx_PyInt_As_uint8_t(__pyx_t_7); if (unlikely((__pyx_t_12 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_13 = __Pyx_PyInt_As_uint8_t(__pyx_t_7); if (unlikely((__pyx_t_13 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_turn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_1 = (!__pyx_t_11);
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_7, __pyx_t_1, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_5); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_en_passant); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_move);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_isCapture = is_capture(__pyx_t_12, __pyx_t_13, __pyx_t_9, __pyx_t_1);

      /* "ChessAI - Copy.pyx":902
 *                 # Acquire the zobrist hash for the new position if the given move was made
 *                 isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))
 *                 updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)             # <<<<<<<<<<<<<<
 * 
 *                 # Push the given move and call the maximizer
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 902, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = __Pyx_PyInt_As_uint8_t(__pyx_t_5); if (unlikely((__pyx_t_13 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 902, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 902, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = __Pyx_PyInt_As_uint8_t(__pyx_t_5); if (unlikely((__pyx_t_12 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 902, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      updateZobristHashForMove(__pyx_v_self->zobrist, __pyx_t_13, __pyx_t_12, __pyx_v_isCapture, __pyx_v_pawns, __pyx_v_knights, __pyx_v_bishops, __pyx_v_rooks, __pyx_v_queens, __pyx_v_kings, __pyx_v_occupied_white, __pyx_v_occupied_black, __pyx_v_promotion);

      /* "ChessAI - Copy.pyx":905
 * 
 *                 # Push the given move and call the maximizer
 *                 self.pgnBoard.push(move)             # <<<<<<<<<<<<<<
 *                 score = self.maximizer(curDepth + 1, depthLimit, alpha, beta)
 * 
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_push); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_move);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "ChessAI - Copy.pyx":906
 *                 # Push the given move and call the maximizer
 *                 self.pgnBoard.push(move)
 *                 score = self.maximizer(curDepth + 1, depthLimit, alpha, beta)             # <<<<<<<<<<<<<<
 * 
 *                 # Undo the move and reset the zobrist hash
 */
      __pyx_v_score = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->maximizer(__pyx_v_self, (__pyx_v_curDepth + 1), __pyx_v_depthLimit, __pyx_v_alpha, __pyx_v_beta);

      /* "ChessAI - Copy.pyx":909
 * 
 *                 # Undo the move and reset the zobrist hash
 *                 self.pgnBoard.pop()             # <<<<<<<<<<<<<<
 *                 self.zobrist = curHash
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Pop(__pyx_v_self->pgnBoard); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 909, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "ChessAI - Copy.pyx":910
 *                 # Undo the move and reset the zobrist hash
 *                 self.pgnBoard.pop()
 *                 self.zobrist = curHash             # <<<<<<<<<<<<<<
 * 
 *                 # ** Code for testing purposes **
 */
      __pyx_v_self->zobrist = __pyx_v_curHash;

      /* "ChessAI - Copy.pyx":925
 * 
 *                 # Store the move scores
 *                 cur_beta_list.append(score)             # <<<<<<<<<<<<<<
 * 
 *                 # Find the lowest score and beta
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_score); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_cur_beta_list, __pyx_t_5); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 925, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "ChessAI - Copy.pyx":928
 * 
 *                 # Find the lowest score and beta
 *                 if score < lowestScore:             # <<<<<<<<<<<<<<
 *                     lowestScore = score
 * 
 */
      __pyx_t_1 = ((__pyx_v_score < __pyx_v_lowestScore) != 0);
      if (__pyx_t_1) {

        /* "ChessAI - Copy.pyx":929
 *                 # Find the lowest score and beta
 *                 if score < lowestScore:
 *                     lowestScore = score             # <<<<<<<<<<<<<<
 * 
 *                 beta = min(beta, lowestScore)
 */
        __pyx_v_lowestScore = __pyx_v_score;

        /* "ChessAI - Copy.pyx":928
 * 
 *                 # Find the lowest score and beta
 *                 if score < lowestScore:             # <<<<<<<<<<<<<<
 *                     lowestScore = score
 * 
 */
      }

      /* "ChessAI - Copy.pyx":931
 *                     lowestScore = score
 * 
 *                 beta = min(beta, lowestScore)             # <<<<<<<<<<<<<<
 *                 count+=1
 * 
 */
      __pyx_t_8 = __pyx_v_lowestScore;
      __pyx_t_14 = __pyx_v_beta;
      if (((__pyx_t_8 < __pyx_t_14) != 0)) {
        __pyx_t_15 = __pyx_t_8;
      } else {
        __pyx_t_15 = __pyx_t_14;
      }
      __pyx_v_beta = __pyx_t_15;

      /* "ChessAI - Copy.pyx":932
 * 
 *                 beta = min(beta, lowestScore)
 *                 count+=1             # <<<<<<<<<<<<<<
 * 
 *                 if beta <= alpha:
 */
      __pyx_v_count = (__pyx_v_count + 1);

      /* "ChessAI - Copy.pyx":934
 *                 count+=1
 * 
 *                 if beta <= alpha:             # <<<<<<<<<<<<<<
 * 
 *                     # Fill up the remaining list to capacity
 */
      __pyx_t_1 = ((__pyx_v_beta <= __pyx_v_alpha) != 0);
      if (__pyx_t_1) {

        /* "ChessAI - Copy.pyx":937
 * 
 *                     # Fill up the remaining list to capacity
 *                     for i in range(length - count):             # <<<<<<<<<<<<<<
 *                         cur_beta_list.append(None)
 *                     self.beta_list.append(cur_beta_list)
 */
        __pyx_t_15 = (__pyx_v_length - __pyx_v_count);
        __pyx_t_8 = __pyx_t_15;
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_8; __pyx_t_14+=1) {
          __pyx_v_i = __pyx_t_14;

          /* "ChessAI - Copy.pyx":938
 *                     # Fill up the remaining list to capacity
 *                     for i in range(length - count):
 *                         cur_beta_list.append(None)             # <<<<<<<<<<<<<<
 *                     self.beta_list.append(cur_beta_list)
 *                     return score
 */
          __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_cur_beta_list, Py_None); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 938, __pyx_L1_error)
        }

        /* "ChessAI - Copy.pyx":939
 *                     for i in range(length - count):
 *                         cur_beta_list.append(None)
 *                     self.beta_list.append(cur_beta_list)             # <<<<<<<<<<<<<<
 *                     return score
 * 
 */
        if (unlikely(__pyx_v_self->beta_list == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 939, __pyx_L1_error)
        }
        __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_self->beta_list, __pyx_v_cur_beta_list); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 939, __pyx_L1_error)

        /* "ChessAI - Copy.pyx":940
 *                         cur_beta_list.append(None)
 *                     self.beta_list.append(cur_beta_list)
 *                     return score             # <<<<<<<<<<<<<<
 * 
 *             # Check if no moves are available, inidicating a game ending move was made previously
 */
        __pyx_r = __pyx_v_score;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "ChessAI - Copy.pyx":934
 *                 count+=1
 * 
 *                 if beta <= alpha:             # <<<<<<<<<<<<<<
 * 
 *                     # Fill up the remaining list to capacity
 */
      }

      /* "ChessAI - Copy.pyx":885
 *         # Check for the second recursive depth
 *         if curDepth == 1:
 *             for move in moves_list:             # <<<<<<<<<<<<<<
 * 
 *                 # Razoring
 */
      __pyx_L7_continue:;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ChessAI - Copy.pyx":943
 * 
 *             # Check if no moves are available, inidicating a game ending move was made previously
 *             if (lowestScore == 9999999 - len(self.pgnBoard.move_stack)):             # <<<<<<<<<<<<<<
 *                 self.numIterations += 1
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_move_stack); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 943, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 943, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = ((__pyx_v_lowestScore == (0x98967F - __pyx_t_3)) != 0);
    if (__pyx_t_1) {

      /* "ChessAI - Copy.pyx":944
 *             # Check if no moves are available, inidicating a game ending move was made previously
 *             if (lowestScore == 9999999 - len(self.pgnBoard.move_stack)):
 *                 self.numIterations += 1             # <<<<<<<<<<<<<<
 * 
 *                 # Fill up the remaining list to capacity
 */
      __pyx_v_self->numIterations = (__pyx_v_self->numIterations + 1);

      /* "ChessAI - Copy.pyx":947
 * 
 *                 # Fill up the remaining list to capacity
 *                 for i in range(length - count):             # <<<<<<<<<<<<<<
 *                     cur_beta_list.append(None)
 *                 self.beta_list.append(cur_beta_list)
 */
      __pyx_t_15 = (__pyx_v_length - __pyx_v_count);
      __pyx_t_8 = __pyx_t_15;
      for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_8; __pyx_t_14+=1) {
        __pyx_v_i = __pyx_t_14;

        /* "ChessAI - Copy.pyx":948
 *                 # Fill up the remaining list to capacity
 *                 for i in range(length - count):
 *                     cur_beta_list.append(None)             # <<<<<<<<<<<<<<
 *                 self.beta_list.append(cur_beta_list)
 * 
 */
        __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_cur_beta_list, Py_None); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 948, __pyx_L1_error)
      }

      /* "ChessAI - Copy.pyx":949
 *                 for i in range(length - count):
 *                     cur_beta_list.append(None)
 *                 self.beta_list.append(cur_beta_list)             # <<<<<<<<<<<<<<
 * 
 *                 if self.pgnBoard.is_checkmate():
 */
      if (unlikely(__pyx_v_self->beta_list == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
        __PYX_ERR(0, 949, __pyx_L1_error)
      }
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_self->beta_list, __pyx_v_cur_beta_list); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 949, __pyx_L1_error)

      /* "ChessAI - Copy.pyx":951
 *                 self.beta_list.append(cur_beta_list)
 * 
 *                 if self.pgnBoard.is_checkmate():             # <<<<<<<<<<<<<<
 *                     return 100000000
 *                 else:
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_checkmate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 951, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 951, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 951, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_1) {

        /* "ChessAI - Copy.pyx":952
 * 
 *                 if self.pgnBoard.is_checkmate():
 *                     return 100000000             # <<<<<<<<<<<<<<
 *                 else:
 *                     return min(beta,lowestScore)
 */
        __pyx_r = 0x5F5E100;
        goto __pyx_L0;

        /* "ChessAI - Copy.pyx":951
 *                 self.beta_list.append(cur_beta_list)
 * 
 *                 if self.pgnBoard.is_checkmate():             # <<<<<<<<<<<<<<
 *                     return 100000000
 *                 else:
 */
      }

      /* "ChessAI - Copy.pyx":954
 *                     return 100000000
 *                 else:
 *                     return min(beta,lowestScore)             # <<<<<<<<<<<<<<
 * 
 *             # Fill up the remaining list to capacity
 */
      /*else*/ {
        __pyx_t_15 = __pyx_v_lowestScore;
        __pyx_t_8 = __pyx_v_beta;
        if (((__pyx_t_15 < __pyx_t_8) != 0)) {
          __pyx_t_14 = __pyx_t_15;
        } else {
          __pyx_t_14 = __pyx_t_8;
        }
        __pyx_r = __pyx_t_14;
        goto __pyx_L0;
      }

      /* "ChessAI - Copy.pyx":943
 * 
 *             # Check if no moves are available, inidicating a game ending move was made previously
 *             if (lowestScore == 9999999 - len(self.pgnBoard.move_stack)):             # <<<<<<<<<<<<<<
 *                 self.numIterations += 1
 * 
 */
    }

    /* "ChessAI - Copy.pyx":957
 * 
 *             # Fill up the remaining list to capacity
 *             for i in range(length - count):             # <<<<<<<<<<<<<<
 *                 cur_beta_list.append(None)
 *             self.beta_list.append(cur_beta_list)
 */
    __pyx_t_14 = (__pyx_v_length - __pyx_v_count);
    __pyx_t_15 = __pyx_t_14;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_15; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "ChessAI - Copy.pyx":958
 *             # Fill up the remaining list to capacity
 *             for i in range(length - count):
 *                 cur_beta_list.append(None)             # <<<<<<<<<<<<<<
 *             self.beta_list.append(cur_beta_list)
 *         else: # If not the second recursive depth, take advantage of the yielding feature to increase speed
 */
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_cur_beta_list, Py_None); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 958, __pyx_L1_error)
    }

    /* "ChessAI - Copy.pyx":959
 *             for i in range(length - count):
 *                 cur_beta_list.append(None)
 *             self.beta_list.append(cur_beta_list)             # <<<<<<<<<<<<<<
 *         else: # If not the second recursive depth, take advantage of the yielding feature to increase speed
 *             for move in self.reorder_capture_moves(chess.BB_ALL, self.pgnBoard):
 */
    if (unlikely(__pyx_v_self->beta_list == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 959, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_self->beta_list, __pyx_v_cur_beta_list); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 959, __pyx_L1_error)

    /* "ChessAI - Copy.pyx":884
 * 
 *         # Check for the second recursive depth
 *         if curDepth == 1:             # <<<<<<<<<<<<<<
 *             for move in moves_list:
 * 
 */
    goto __pyx_L6;
  }

  /* "ChessAI - Copy.pyx":961
 *             self.beta_list.append(cur_beta_list)
 *         else: # If not the second recursive depth, take advantage of the yielding feature to increase speed
 *             for move in self.reorder_capture_moves(chess.BB_ALL, self.pgnBoard):             # <<<<<<<<<<<<<<
 * 
 *                 # Check if the move is a promoting move
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reorder_capture_moves); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 961, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_chess); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 961, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_BB_ALL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 961, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_14 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_14 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_self->pgnBoard};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 961, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_self->pgnBoard};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 961, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_16 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 961, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_14, __pyx_t_6);
      __Pyx_INCREF(__pyx_v_self->pgnBoard);
      __Pyx_GIVEREF(__pyx_v_self->pgnBoard);
      PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_14, __pyx_v_self->pgnBoard);
      __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 961, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_3 = 0;
      __pyx_t_17 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 961, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_17 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 961, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_17)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 961, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 961, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 961, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 961, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_17(__pyx_t_5);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 961, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_move, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "ChessAI - Copy.pyx":964
 * 
 *                 # Check if the move is a promoting move
 *                 if (move.promotion):             # <<<<<<<<<<<<<<
 *                     promotion = move.promotion
 *                 else:
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 964, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 964, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_1) {

        /* "ChessAI - Copy.pyx":965
 *                 # Check if the move is a promoting move
 *                 if (move.promotion):
 *                     promotion = move.promotion             # <<<<<<<<<<<<<<
 *                 else:
 *                     promotion = 0
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 965, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 965, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_v_promotion = __pyx_t_14;

        /* "ChessAI - Copy.pyx":964
 * 
 *                 # Check if the move is a promoting move
 *                 if (move.promotion):             # <<<<<<<<<<<<<<
 *                     promotion = move.promotion
 *                 else:
 */
        goto __pyx_L24;
      }

      /* "ChessAI - Copy.pyx":967
 *                     promotion = move.promotion
 *                 else:
 *                     promotion = 0             # <<<<<<<<<<<<<<
 * 
 *                 # Acquire the zobrist hash for the new position if the given move was made
 */
      /*else*/ {
        __pyx_v_promotion = 0;
      }
      __pyx_L24:;

      /* "ChessAI - Copy.pyx":970
 * 
 *                 # Acquire the zobrist hash for the new position if the given move was made
 *                 isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))             # <<<<<<<<<<<<<<
 *                 updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 970, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = __Pyx_PyInt_As_uint8_t(__pyx_t_2); if (unlikely((__pyx_t_12 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 970, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 970, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_13 = __Pyx_PyInt_As_uint8_t(__pyx_t_2); if (unlikely((__pyx_t_13 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 970, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 970, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_turn); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 970, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_16); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 970, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_11 = (!__pyx_t_1);
      __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_2, __pyx_t_11, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 970, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_16); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 970, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_en_passant); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 970, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_16 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_move);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 970, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_16); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 970, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_v_isCapture = is_capture(__pyx_t_12, __pyx_t_13, __pyx_t_9, __pyx_t_11);

      /* "ChessAI - Copy.pyx":971
 *                 # Acquire the zobrist hash for the new position if the given move was made
 *                 isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))
 *                 updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)             # <<<<<<<<<<<<<<
 * 
 *                 # Push the given move and call the maximizer
 */
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 971, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_13 = __Pyx_PyInt_As_uint8_t(__pyx_t_16); if (unlikely((__pyx_t_13 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 971, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 971, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_12 = __Pyx_PyInt_As_uint8_t(__pyx_t_16); if (unlikely((__pyx_t_12 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 971, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      updateZobristHashForMove(__pyx_v_self->zobrist, __pyx_t_13, __pyx_t_12, __pyx_v_isCapture, __pyx_v_pawns, __pyx_v_knights, __pyx_v_bishops, __pyx_v_rooks, __pyx_v_queens, __pyx_v_kings, __pyx_v_occupied_white, __pyx_v_occupied_black, __pyx_v_promotion);

      /* "ChessAI - Copy.pyx":974
 * 
 *                 # Push the given move and call the maximizer
 *                 self.pgnBoard.push(move)             # <<<<<<<<<<<<<<
 *                 score = self.maximizer(curDepth + 1, depthLimit, alpha, beta)
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_push); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_16 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_move);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

      /* "ChessAI - Copy.pyx":975
 *                 # Push the given move and call the maximizer
 *                 self.pgnBoard.push(move)
 *                 score = self.maximizer(curDepth + 1, depthLimit, alpha, beta)             # <<<<<<<<<<<<<<
 * 
 *                 # Undo the move and reset the zobrist hash
 */
      __pyx_v_score = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->maximizer(__pyx_v_self, (__pyx_v_curDepth + 1), __pyx_v_depthLimit, __pyx_v_alpha, __pyx_v_beta);

      /* "ChessAI - Copy.pyx":978
 * 
 *                 # Undo the move and reset the zobrist hash
 *                 self.pgnBoard.pop()             # <<<<<<<<<<<<<<
 *                 self.zobrist = curHash
 * 
 */
      __pyx_t_16 = __Pyx_PyObject_Pop(__pyx_v_self->pgnBoard); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 978, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

      /* "ChessAI - Copy.pyx":979
 *                 # Undo the move and reset the zobrist hash
 *                 self.pgnBoard.pop()
 *                 self.zobrist = curHash             # <<<<<<<<<<<<<<
 * 
 *                 # ** Code for testing purposes **
 */
      __pyx_v_self->zobrist = __pyx_v_curHash;

      /* "ChessAI - Copy.pyx":995
 * 
 *                 # Find the lowest score and beta
 *                 if score < lowestScore:             # <<<<<<<<<<<<<<
 *                     lowestScore = score
 * 
 */
      __pyx_t_11 = ((__pyx_v_score < __pyx_v_lowestScore) != 0);
      if (__pyx_t_11) {

        /* "ChessAI - Copy.pyx":996
 *                 # Find the lowest score and beta
 *                 if score < lowestScore:
 *                     lowestScore = score             # <<<<<<<<<<<<<<
 * 
 *                 beta = min(beta, lowestScore)
 */
        __pyx_v_lowestScore = __pyx_v_score;

        /* "ChessAI - Copy.pyx":995
 * 
 *                 # Find the lowest score and beta
 *                 if score < lowestScore:             # <<<<<<<<<<<<<<
 *                     lowestScore = score
 * 
 */
      }

      /* "ChessAI - Copy.pyx":998
 *                     lowestScore = score
 * 
 *                 beta = min(beta, lowestScore)             # <<<<<<<<<<<<<<
 *                 count+=1
 * 
 */
      __pyx_t_14 = __pyx_v_lowestScore;
      __pyx_t_15 = __pyx_v_beta;
      if (((__pyx_t_14 < __pyx_t_15) != 0)) {
        __pyx_t_8 = __pyx_t_14;
      } else {
        __pyx_t_8 = __pyx_t_15;
      }
      __pyx_v_beta = __pyx_t_8;

      /* "ChessAI - Copy.pyx":999
 * 
 *                 beta = min(beta, lowestScore)
 *                 count+=1             # <<<<<<<<<<<<<<
 * 
 *                 if beta <= alpha:
 */
      __pyx_v_count = (__pyx_v_count + 1);

      /* "ChessAI - Copy.pyx":1001
 *                 count+=1
 * 
 *                 if beta <= alpha:             # <<<<<<<<<<<<<<
 *                     return score
 * 
 */
      __pyx_t_11 = ((__pyx_v_beta <= __pyx_v_alpha) != 0);
      if (__pyx_t_11) {

        /* "ChessAI - Copy.pyx":1002
 * 
 *                 if beta <= alpha:
 *                     return score             # <<<<<<<<<<<<<<
 * 
 *             # Check if no moves are available, inidicating a game ending move was made previously
 */
        __pyx_r = __pyx_v_score;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L0;

        /* "ChessAI - Copy.pyx":1001
 *                 count+=1
 * 
 *                 if beta <= alpha:             # <<<<<<<<<<<<<<
 *                     return score
 * 
 */
      }

      /* "ChessAI - Copy.pyx":961
 *             self.beta_list.append(cur_beta_list)
 *         else: # If not the second recursive depth, take advantage of the yielding feature to increase speed
 *             for move in self.reorder_capture_moves(chess.BB_ALL, self.pgnBoard):             # <<<<<<<<<<<<<<
 * 
 *                 # Check if the move is a promoting move
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "ChessAI - Copy.pyx":1005
 * 
 *             # Check if no moves are available, inidicating a game ending move was made previously
 *             if (lowestScore == 9999999 - len(self.pgnBoard.move_stack)):             # <<<<<<<<<<<<<<
 *                 self.numIterations += 1
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_move_stack); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_11 = ((__pyx_v_lowestScore == (0x98967F - __pyx_t_3)) != 0);
    if (__pyx_t_11) {

      /* "ChessAI - Copy.pyx":1006
 *             # Check if no moves are available, inidicating a game ending move was made previously
 *             if (lowestScore == 9999999 - len(self.pgnBoard.move_stack)):
 *                 self.numIterations += 1             # <<<<<<<<<<<<<<
 * 
 *                 if self.pgnBoard.is_checkmate():
 */
      __pyx_v_self->numIterations = (__pyx_v_self->numIterations + 1);

      /* "ChessAI - Copy.pyx":1008
 *                 self.numIterations += 1
 * 
 *                 if self.pgnBoard.is_checkmate():             # <<<<<<<<<<<<<<
 *                     return 100000000
 *                 else:
 */
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_checkmate); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1008, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_16);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_16, function);
        }
      }
      __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_16);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1008, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1008, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_11) {

        /* "ChessAI - Copy.pyx":1009
 * 
 *                 if self.pgnBoard.is_checkmate():
 *                     return 100000000             # <<<<<<<<<<<<<<
 *                 else:
 *                     return min(beta,lowestScore)
 */
        __pyx_r = 0x5F5E100;
        goto __pyx_L0;

        /* "ChessAI - Copy.pyx":1008
 *                 self.numIterations += 1
 * 
 *                 if self.pgnBoard.is_checkmate():             # <<<<<<<<<<<<<<
 *                     return 100000000
 *                 else:
 */
      }

      /* "ChessAI - Copy.pyx":1011
 *                     return 100000000
 *                 else:
 *                     return min(beta,lowestScore)             # <<<<<<<<<<<<<<
 * 
 *         return lowestScore
 */
      /*else*/ {
        __pyx_t_8 = __pyx_v_lowestScore;
        __pyx_t_14 = __pyx_v_beta;
        if (((__pyx_t_8 < __pyx_t_14) != 0)) {
          __pyx_t_15 = __pyx_t_8;
        } else {
          __pyx_t_15 = __pyx_t_14;
        }
        __pyx_r = __pyx_t_15;
        goto __pyx_L0;
      }

      /* "ChessAI - Copy.pyx":1005
 * 
 *             # Check if no moves are available, inidicating a game ending move was made previously
 *             if (lowestScore == 9999999 - len(self.pgnBoard.move_stack)):             # <<<<<<<<<<<<<<
 *                 self.numIterations += 1
 * 
 */
    }
  }
  __pyx_L6:;

  /* "ChessAI - Copy.pyx":1013
 *                     return min(beta,lowestScore)
 * 
 *         return lowestScore             # <<<<<<<<<<<<<<
 * 
 *     # Define the quiescence maximizer function
 */
  __pyx_r = __pyx_v_lowestScore;
  goto __pyx_L0;

  /* "ChessAI - Copy.pyx":826
 *     @cython.ccall
 *     @cython.inline
 *     cdef int minimizer(self, int curDepth, int depthLimit, int alpha, int beta, list beta_list_og, list beta_moves_list):             # <<<<<<<<<<<<<<
 * 
 *         # If the depth limit is reached, evaluate the current position
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_WriteUnraisable("ChessAI.ChessAI.minimizer", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_move);
  __Pyx_XDECREF(__pyx_v_cur_beta_list);
  __Pyx_XDECREF(__pyx_v_beta_list);
  __Pyx_XDECREF(__pyx_v_moves_list);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ChessAI - Copy.pyx":1022
 *     @cython.ccall
 *     @cython.inline
 *     cdef int quiescenceMax(self, int alpha, int beta, int quiescenceDepth):             # <<<<<<<<<<<<<<
 *         self.numIterations += 1
 *         # Get an evaluation and see if the evaluation is close to the alpha and beta or exceeds the quiescence depth
 */

static int __pyx_f_7ChessAI_7ChessAI_quiescenceMax(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_alpha, int __pyx_v_beta, int __pyx_v_quiescenceDepth) {
  int __pyx_v_evaluation;
  uint64_t __pyx_v_curHash;
  uint64_t __pyx_v_pawns;
  uint64_t __pyx_v_knights;
  uint64_t __pyx_v_bishops;
  uint64_t __pyx_v_rooks;
  uint64_t __pyx_v_queens;
  uint64_t __pyx_v_kings;
  uint64_t __pyx_v_occupied_white;
  uint64_t __pyx_v_occupied_black;
  CYTHON_UNUSED uint64_t __pyx_v_occupied;
  int __pyx_v_isCapture;
  int __pyx_v_promotion;
  int __pyx_v_alphaCopy;
  PyObject *__pyx_v_move = NULL;
  int __pyx_v_score;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  uint64_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  uint8_t __pyx_t_15;
  uint8_t __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("quiescenceMax", 0);

  /* "ChessAI - Copy.pyx":1023
 *     @cython.inline
 *     cdef int quiescenceMax(self, int alpha, int beta, int quiescenceDepth):
 *         self.numIterations += 1             # <<<<<<<<<<<<<<
 *         # Get an evaluation and see if the evaluation is close to the alpha and beta or exceeds the quiescence depth
 *         cdef int evaluation = evaluate_board(self.pgnBoard, self.zobrist)
 */
  __pyx_v_self->numIterations = (__pyx_v_self->numIterations + 1);

  /* "ChessAI - Copy.pyx":1025
 *         self.numIterations += 1
 *         # Get an evaluation and see if the evaluation is close to the alpha and beta or exceeds the quiescence depth
 *         cdef int evaluation = evaluate_board(self.pgnBoard, self.zobrist)             # <<<<<<<<<<<<<<
 *         if (quiescenceDepth >= self.quiescenceDepth) or evaluation - 1500 >= beta or evaluation + 1500 <= alpha or evaluation >= 9000000:
 *             return evaluation
 */
  __pyx_t_1 = __pyx_v_self->pgnBoard;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_evaluation = __pyx_f_7ChessAI_evaluate_board(__pyx_t_1, __pyx_v_self->zobrist);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":1026
 *         # Get an evaluation and see if the evaluation is close to the alpha and beta or exceeds the quiescence depth
 *         cdef int evaluation = evaluate_board(self.pgnBoard, self.zobrist)
 *         if (quiescenceDepth >= self.quiescenceDepth) or evaluation - 1500 >= beta or evaluation + 1500 <= alpha or evaluation >= 9000000:             # <<<<<<<<<<<<<<
 *             return evaluation
 * 
 */
  __pyx_t_3 = ((__pyx_v_quiescenceDepth >= __pyx_v_self->quiescenceDepth) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (((__pyx_v_evaluation - 0x5DC) >= __pyx_v_beta) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (((__pyx_v_evaluation + 0x5DC) <= __pyx_v_alpha) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_evaluation >= 0x895440) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "ChessAI - Copy.pyx":1027
 *         cdef int evaluation = evaluate_board(self.pgnBoard, self.zobrist)
 *         if (quiescenceDepth >= self.quiescenceDepth) or evaluation - 1500 >= beta or evaluation + 1500 <= alpha or evaluation >= 9000000:
 *             return evaluation             # <<<<<<<<<<<<<<
 * 
 *         # Define variable to hold the zobrist hash for the current board state
 */
    __pyx_r = __pyx_v_evaluation;
    goto __pyx_L0;

    /* "ChessAI - Copy.pyx":1026
 *         # Get an evaluation and see if the evaluation is close to the alpha and beta or exceeds the quiescence depth
 *         cdef int evaluation = evaluate_board(self.pgnBoard, self.zobrist)
 *         if (quiescenceDepth >= self.quiescenceDepth) or evaluation - 1500 >= beta or evaluation + 1500 <= alpha or evaluation >= 9000000:             # <<<<<<<<<<<<<<
 *             return evaluation
 * 
 */
  }

  /* "ChessAI - Copy.pyx":1030
 * 
 *         # Define variable to hold the zobrist hash for the current board state
 *         cdef uint64_t curHash = self.zobrist             # <<<<<<<<<<<<<<
 * 
 *         # Initialize bitmasks for the current board state
 */
  __pyx_t_4 = __pyx_v_self->zobrist;
  __pyx_v_curHash = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1033
 * 
 *         # Initialize bitmasks for the current board state
 *         cdef uint64_t pawns = self.pgnBoard.pawns             # <<<<<<<<<<<<<<
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_pawns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pawns = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1034
 *         # Initialize bitmasks for the current board state
 *         cdef uint64_t pawns = self.pgnBoard.pawns
 *         cdef uint64_t knights = self.pgnBoard.knights             # <<<<<<<<<<<<<<
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_knights); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_knights = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1035
 *         cdef uint64_t pawns = self.pgnBoard.pawns
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops             # <<<<<<<<<<<<<<
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_bishops); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_bishops = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1036
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks             # <<<<<<<<<<<<<<
 *         cdef uint64_t queens = self.pgnBoard.queens
 *         cdef uint64_t kings = self.pgnBoard.kings
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_rooks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rooks = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1037
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens             # <<<<<<<<<<<<<<
 *         cdef uint64_t kings = self.pgnBoard.kings
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_queens); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_queens = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1038
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens
 *         cdef uint64_t kings = self.pgnBoard.kings             # <<<<<<<<<<<<<<
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_kings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_kings = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1040
 *         cdef uint64_t kings = self.pgnBoard.kings
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]             # <<<<<<<<<<<<<<
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]
 *         cdef uint64_t occupied = self.pgnBoard.occupied
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 1, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_5); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_occupied_white = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1041
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]             # <<<<<<<<<<<<<<
 *         cdef uint64_t occupied = self.pgnBoard.occupied
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_occupied_black = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1042
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]
 *         cdef uint64_t occupied = self.pgnBoard.occupied             # <<<<<<<<<<<<<<
 * 
 *         # Define variables to hold information for zobrist hashing
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_occupied = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1046
 *         # Define variables to hold information for zobrist hashing
 *         cdef bint isCapture
 *         cdef int promotion = 0             # <<<<<<<<<<<<<<
 * 
 *         # Make a copy of alpha before it may change
 */
  __pyx_v_promotion = 0;

  /* "ChessAI - Copy.pyx":1049
 * 
 *         # Make a copy of alpha before it may change
 *         cdef int alphaCopy = alpha             # <<<<<<<<<<<<<<
 * 
 *         # Update alpha
 */
  __pyx_v_alphaCopy = __pyx_v_alpha;

  /* "ChessAI - Copy.pyx":1052
 * 
 *         # Update alpha
 *         alpha = max(alpha, evaluation)             # <<<<<<<<<<<<<<
 * 
 *         # Search through all capture moves (and other tactical moves if applicable)
 */
  __pyx_t_6 = __pyx_v_evaluation;
  __pyx_t_7 = __pyx_v_alpha;
  if (((__pyx_t_6 > __pyx_t_7) != 0)) {
    __pyx_t_8 = __pyx_t_6;
  } else {
    __pyx_t_8 = __pyx_t_7;
  }
  __pyx_v_alpha = __pyx_t_8;

  /* "ChessAI - Copy.pyx":1055
 * 
 *         # Search through all capture moves (and other tactical moves if applicable)
 *         for move in Cython_Chess.generate_legal_captures(self.pgnBoard,chess.BB_ALL,chess.BB_ALL):             # <<<<<<<<<<<<<<
 * 
 *             # Check if the move is a promoting move
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Cython_Chess); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_generate_legal_captures); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_chess); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_BB_ALL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_chess); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_BB_ALL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_self->pgnBoard, __pyx_t_10, __pyx_t_11};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_self->pgnBoard, __pyx_t_10, __pyx_t_11};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  {
    __pyx_t_12 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1055, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->pgnBoard);
    __Pyx_GIVEREF(__pyx_v_self->pgnBoard);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_8, __pyx_v_self->pgnBoard);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_8, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_12, 2+__pyx_t_8, __pyx_t_11);
    __pyx_t_10 = 0;
    __pyx_t_11 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_9 = __pyx_t_1; __Pyx_INCREF(__pyx_t_9); __pyx_t_13 = 0;
    __pyx_t_14 = NULL;
  } else {
    __pyx_t_13 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1055, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_14 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1055, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_14)) {
      if (likely(PyList_CheckExact(__pyx_t_9))) {
        if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 1055, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 1055, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_14(__pyx_t_9);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1055, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_move, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ChessAI - Copy.pyx":1058
 * 
 *             # Check if the move is a promoting move
 *             if (move.promotion):             # <<<<<<<<<<<<<<
 *                 promotion = move.promotion
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "ChessAI - Copy.pyx":1059
 *             # Check if the move is a promoting move
 *             if (move.promotion):
 *                 promotion = move.promotion             # <<<<<<<<<<<<<<
 *             else:
 *                 promotion = 0
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1059, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1059, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_promotion = __pyx_t_8;

      /* "ChessAI - Copy.pyx":1058
 * 
 *             # Check if the move is a promoting move
 *             if (move.promotion):             # <<<<<<<<<<<<<<
 *                 promotion = move.promotion
 *             else:
 */
      goto __pyx_L10;
    }

    /* "ChessAI - Copy.pyx":1061
 *                 promotion = move.promotion
 *             else:
 *                 promotion = 0             # <<<<<<<<<<<<<<
 * 
 *             # Acquire the zobrist hash for the new position if the given move was made
 */
    /*else*/ {
      __pyx_v_promotion = 0;
    }
    __pyx_L10:;

    /* "ChessAI - Copy.pyx":1064
 * 
 *             # Acquire the zobrist hash for the new position if the given move was made
 *             isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))             # <<<<<<<<<<<<<<
 *             updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_15 = __Pyx_PyInt_As_uint8_t(__pyx_t_1); if (unlikely((__pyx_t_15 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_16 = __Pyx_PyInt_As_uint8_t(__pyx_t_1); if (unlikely((__pyx_t_16 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_turn); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_3 = (!__pyx_t_2);
    __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_3, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_12); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_en_passant); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_12 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_11, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_move);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_v_isCapture = is_capture(__pyx_t_15, __pyx_t_16, __pyx_t_4, __pyx_t_3);

    /* "ChessAI - Copy.pyx":1065
 *             # Acquire the zobrist hash for the new position if the given move was made
 *             isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))
 *             updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)             # <<<<<<<<<<<<<<
 * 
 *             # Push the given move and call the quiescence minimizer using aspiration windows
 */
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_16 = __Pyx_PyInt_As_uint8_t(__pyx_t_12); if (unlikely((__pyx_t_16 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_15 = __Pyx_PyInt_As_uint8_t(__pyx_t_12); if (unlikely((__pyx_t_15 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    updateZobristHashForMove(__pyx_v_self->zobrist, __pyx_t_16, __pyx_t_15, __pyx_v_isCapture, __pyx_v_pawns, __pyx_v_knights, __pyx_v_bishops, __pyx_v_rooks, __pyx_v_queens, __pyx_v_kings, __pyx_v_occupied_white, __pyx_v_occupied_black, __pyx_v_promotion);

    /* "ChessAI - Copy.pyx":1068
 * 
 *             # Push the given move and call the quiescence minimizer using aspiration windows
 *             self.pgnBoard.push(move)             # <<<<<<<<<<<<<<
 *             # score = self.quiescenceMin(alpha, beta ,quiescenceDepth+1)
 *             score = self.quiescenceMin(alpha - 750, beta + 750 ,quiescenceDepth+1)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_push); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_12 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_11, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_move);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "ChessAI - Copy.pyx":1070
 *             self.pgnBoard.push(move)
 *             # score = self.quiescenceMin(alpha, beta ,quiescenceDepth+1)
 *             score = self.quiescenceMin(alpha - 750, beta + 750 ,quiescenceDepth+1)             # <<<<<<<<<<<<<<
 * 
 *             if alpha < score and score < beta:
 */
    __pyx_v_score = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->quiescenceMin(__pyx_v_self, (__pyx_v_alpha - 0x2EE), (__pyx_v_beta + 0x2EE), (__pyx_v_quiescenceDepth + 1));

    /* "ChessAI - Copy.pyx":1072
 *             score = self.quiescenceMin(alpha - 750, beta + 750 ,quiescenceDepth+1)
 * 
 *             if alpha < score and score < beta:             # <<<<<<<<<<<<<<
 *                 score = self.quiescenceMin(alpha, beta ,quiescenceDepth+1)
 * 
 */
    __pyx_t_2 = ((__pyx_v_alpha < __pyx_v_score) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_score < __pyx_v_beta) != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L12_bool_binop_done:;
    if (__pyx_t_3) {

      /* "ChessAI - Copy.pyx":1073
 * 
 *             if alpha < score and score < beta:
 *                 score = self.quiescenceMin(alpha, beta ,quiescenceDepth+1)             # <<<<<<<<<<<<<<
 * 
 *             # Undo the move and reset the zobrist hash
 */
      __pyx_v_score = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->quiescenceMin(__pyx_v_self, __pyx_v_alpha, __pyx_v_beta, (__pyx_v_quiescenceDepth + 1));

      /* "ChessAI - Copy.pyx":1072
 *             score = self.quiescenceMin(alpha - 750, beta + 750 ,quiescenceDepth+1)
 * 
 *             if alpha < score and score < beta:             # <<<<<<<<<<<<<<
 *                 score = self.quiescenceMin(alpha, beta ,quiescenceDepth+1)
 * 
 */
    }

    /* "ChessAI - Copy.pyx":1076
 * 
 *             # Undo the move and reset the zobrist hash
 *             self.pgnBoard.pop()             # <<<<<<<<<<<<<<
 *             self.zobrist = curHash
 * 
 */
    __pyx_t_12 = __Pyx_PyObject_Pop(__pyx_v_self->pgnBoard); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "ChessAI - Copy.pyx":1077
 *             # Undo the move and reset the zobrist hash
 *             self.pgnBoard.pop()
 *             self.zobrist = curHash             # <<<<<<<<<<<<<<
 * 
 *             # Update alpha
 */
    __pyx_v_self->zobrist = __pyx_v_curHash;

    /* "ChessAI - Copy.pyx":1080
 * 
 *             # Update alpha
 *             alpha = max(alpha, score)             # <<<<<<<<<<<<<<
 * 
 *             # Beta cutoff
 */
    __pyx_t_8 = __pyx_v_score;
    __pyx_t_6 = __pyx_v_alpha;
    if (((__pyx_t_8 > __pyx_t_6) != 0)) {
      __pyx_t_7 = __pyx_t_8;
    } else {
      __pyx_t_7 = __pyx_t_6;
    }
    __pyx_v_alpha = __pyx_t_7;

    /* "ChessAI - Copy.pyx":1083
 * 
 *             # Beta cutoff
 *             if alpha >= beta:             # <<<<<<<<<<<<<<
 *                 return score
 * 
 */
    __pyx_t_3 = ((__pyx_v_alpha >= __pyx_v_beta) != 0);
    if (__pyx_t_3) {

      /* "ChessAI - Copy.pyx":1084
 *             # Beta cutoff
 *             if alpha >= beta:
 *                 return score             # <<<<<<<<<<<<<<
 * 
 *         # In the case where the alpha value changes, without a beta cutoff having occurred, this move is likely to be a good one
 */
      __pyx_r = __pyx_v_score;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L0;

      /* "ChessAI - Copy.pyx":1083
 * 
 *             # Beta cutoff
 *             if alpha >= beta:             # <<<<<<<<<<<<<<
 *                 return score
 * 
 */
    }

    /* "ChessAI - Copy.pyx":1055
 * 
 *         # Search through all capture moves (and other tactical moves if applicable)
 *         for move in Cython_Chess.generate_legal_captures(self.pgnBoard,chess.BB_ALL,chess.BB_ALL):             # <<<<<<<<<<<<<<
 * 
 *             # Check if the move is a promoting move
 */
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "ChessAI - Copy.pyx":1087
 * 
 *         # In the case where the alpha value changes, without a beta cutoff having occurred, this move is likely to be a good one
 *         if (alpha != alphaCopy):             # <<<<<<<<<<<<<<
 *             return alpha
 *         # If the alpha value has not changed, the return should be the evaluation acquired in this recursive iteration
 */
  __pyx_t_3 = ((__pyx_v_alpha != __pyx_v_alphaCopy) != 0);
  if (__pyx_t_3) {

    /* "ChessAI - Copy.pyx":1088
 *         # In the case where the alpha value changes, without a beta cutoff having occurred, this move is likely to be a good one
 *         if (alpha != alphaCopy):
 *             return alpha             # <<<<<<<<<<<<<<
 *         # If the alpha value has not changed, the return should be the evaluation acquired in this recursive iteration
 *         return evaluation
 */
    __pyx_r = __pyx_v_alpha;
    goto __pyx_L0;

    /* "ChessAI - Copy.pyx":1087
 * 
 *         # In the case where the alpha value changes, without a beta cutoff having occurred, this move is likely to be a good one
 *         if (alpha != alphaCopy):             # <<<<<<<<<<<<<<
 *             return alpha
 *         # If the alpha value has not changed, the return should be the evaluation acquired in this recursive iteration
 */
  }

  /* "ChessAI - Copy.pyx":1090
 *             return alpha
 *         # If the alpha value has not changed, the return should be the evaluation acquired in this recursive iteration
 *         return evaluation             # <<<<<<<<<<<<<<
 * 
 *     # Define the quiescence minimizer function
 */
  __pyx_r = __pyx_v_evaluation;
  goto __pyx_L0;

  /* "ChessAI - Copy.pyx":1022
 *     @cython.ccall
 *     @cython.inline
 *     cdef int quiescenceMax(self, int alpha, int beta, int quiescenceDepth):             # <<<<<<<<<<<<<<
 *         self.numIterations += 1
 *         # Get an evaluation and see if the evaluation is close to the alpha and beta or exceeds the quiescence depth
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("ChessAI.ChessAI.quiescenceMax", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_move);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ChessAI - Copy.pyx":1099
 *     @cython.ccall
 *     @cython.inline
 *     cdef int quiescenceMin(self, int alpha, int beta, int quiescenceDepth):             # <<<<<<<<<<<<<<
 * 
 *         self.numIterations += 1
 */

static int __pyx_f_7ChessAI_7ChessAI_quiescenceMin(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_alpha, int __pyx_v_beta, int __pyx_v_quiescenceDepth) {
  int __pyx_v_evaluation;
  uint64_t __pyx_v_curHash;
  uint64_t __pyx_v_pawns;
  uint64_t __pyx_v_knights;
  uint64_t __pyx_v_bishops;
  uint64_t __pyx_v_rooks;
  uint64_t __pyx_v_queens;
  uint64_t __pyx_v_kings;
  uint64_t __pyx_v_occupied_white;
  uint64_t __pyx_v_occupied_black;
  CYTHON_UNUSED uint64_t __pyx_v_occupied;
  int __pyx_v_promotion;
  int __pyx_v_isCapture;
  int __pyx_v_betaCopy;
  PyObject *__pyx_v_move = NULL;
  int __pyx_v_score;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  uint64_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  uint8_t __pyx_t_15;
  uint8_t __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("quiescenceMin", 0);

  /* "ChessAI - Copy.pyx":1101
 *     cdef int quiescenceMin(self, int alpha, int beta, int quiescenceDepth):
 * 
 *         self.numIterations += 1             # <<<<<<<<<<<<<<
 *         # Get an evaluation and see if the evaluation is close to the alpha and beta or exceeds the quiescence depth
 *         cdef int evaluation = evaluate_board(self.pgnBoard, self.zobrist)
 */
  __pyx_v_self->numIterations = (__pyx_v_self->numIterations + 1);

  /* "ChessAI - Copy.pyx":1103
 *         self.numIterations += 1
 *         # Get an evaluation and see if the evaluation is close to the alpha and beta or exceeds the quiescence depth
 *         cdef int evaluation = evaluate_board(self.pgnBoard, self.zobrist)             # <<<<<<<<<<<<<<
 *         if (quiescenceDepth >= self.quiescenceDepth) or evaluation + 1500 <= alpha or evaluation - 1500 >= beta or evaluation <= -9000000:
 *             return evaluation
 */
  __pyx_t_1 = __pyx_v_self->pgnBoard;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_evaluation = __pyx_f_7ChessAI_evaluate_board(__pyx_t_1, __pyx_v_self->zobrist);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":1104
 *         # Get an evaluation and see if the evaluation is close to the alpha and beta or exceeds the quiescence depth
 *         cdef int evaluation = evaluate_board(self.pgnBoard, self.zobrist)
 *         if (quiescenceDepth >= self.quiescenceDepth) or evaluation + 1500 <= alpha or evaluation - 1500 >= beta or evaluation <= -9000000:             # <<<<<<<<<<<<<<
 *             return evaluation
 * 
 */
  __pyx_t_3 = ((__pyx_v_quiescenceDepth >= __pyx_v_self->quiescenceDepth) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (((__pyx_v_evaluation + 0x5DC) <= __pyx_v_alpha) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (((__pyx_v_evaluation - 0x5DC) >= __pyx_v_beta) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_evaluation <= -9000000L) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "ChessAI - Copy.pyx":1105
 *         cdef int evaluation = evaluate_board(self.pgnBoard, self.zobrist)
 *         if (quiescenceDepth >= self.quiescenceDepth) or evaluation + 1500 <= alpha or evaluation - 1500 >= beta or evaluation <= -9000000:
 *             return evaluation             # <<<<<<<<<<<<<<
 * 
 *         # Define variable to hold the zobrist hash for the current board state
 */
    __pyx_r = __pyx_v_evaluation;
    goto __pyx_L0;

    /* "ChessAI - Copy.pyx":1104
 *         # Get an evaluation and see if the evaluation is close to the alpha and beta or exceeds the quiescence depth
 *         cdef int evaluation = evaluate_board(self.pgnBoard, self.zobrist)
 *         if (quiescenceDepth >= self.quiescenceDepth) or evaluation + 1500 <= alpha or evaluation - 1500 >= beta or evaluation <= -9000000:             # <<<<<<<<<<<<<<
 *             return evaluation
 * 
 */
  }

  /* "ChessAI - Copy.pyx":1108
 * 
 *         # Define variable to hold the zobrist hash for the current board state
 *         cdef uint64_t curHash = self.zobrist             # <<<<<<<<<<<<<<
 * 
 *         # Initialize bitmasks for the current board state
 */
  __pyx_t_4 = __pyx_v_self->zobrist;
  __pyx_v_curHash = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1111
 * 
 *         # Initialize bitmasks for the current board state
 *         cdef uint64_t pawns = self.pgnBoard.pawns             # <<<<<<<<<<<<<<
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_pawns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pawns = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1112
 *         # Initialize bitmasks for the current board state
 *         cdef uint64_t pawns = self.pgnBoard.pawns
 *         cdef uint64_t knights = self.pgnBoard.knights             # <<<<<<<<<<<<<<
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_knights); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_knights = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1113
 *         cdef uint64_t pawns = self.pgnBoard.pawns
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops             # <<<<<<<<<<<<<<
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_bishops); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_bishops = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1114
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks             # <<<<<<<<<<<<<<
 *         cdef uint64_t queens = self.pgnBoard.queens
 *         cdef uint64_t kings = self.pgnBoard.kings
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_rooks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rooks = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1115
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens             # <<<<<<<<<<<<<<
 *         cdef uint64_t kings = self.pgnBoard.kings
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_queens); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_queens = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1116
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens
 *         cdef uint64_t kings = self.pgnBoard.kings             # <<<<<<<<<<<<<<
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_kings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_kings = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1118
 *         cdef uint64_t kings = self.pgnBoard.kings
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]             # <<<<<<<<<<<<<<
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]
 *         cdef uint64_t occupied = self.pgnBoard.occupied
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 1, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_5); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_occupied_white = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1119
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]             # <<<<<<<<<<<<<<
 *         cdef uint64_t occupied = self.pgnBoard.occupied
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_occupied_black = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1120
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]
 *         cdef uint64_t occupied = self.pgnBoard.occupied             # <<<<<<<<<<<<<<
 * 
 *         # Define variables to hold information for zobrist hashing
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_occupied = __pyx_t_4;

  /* "ChessAI - Copy.pyx":1123
 * 
 *         # Define variables to hold information for zobrist hashing
 *         cdef int promotion = 0             # <<<<<<<<<<<<<<
 *         cdef bint isCapture
 * 
 */
  __pyx_v_promotion = 0;

  /* "ChessAI - Copy.pyx":1127
 * 
 *         # Make a copy of alpha before it may change
 *         cdef int betaCopy = beta             # <<<<<<<<<<<<<<
 * 
 *         # Update beta
 */
  __pyx_v_betaCopy = __pyx_v_beta;

  /* "ChessAI - Copy.pyx":1130
 * 
 *         # Update beta
 *         beta = min(beta, evaluation)             # <<<<<<<<<<<<<<
 * 
 *         # Search through all capture moves (and other tactical moves if applicable)
 */
  __pyx_t_6 = __pyx_v_evaluation;
  __pyx_t_7 = __pyx_v_beta;
  if (((__pyx_t_6 < __pyx_t_7) != 0)) {
    __pyx_t_8 = __pyx_t_6;
  } else {
    __pyx_t_8 = __pyx_t_7;
  }
  __pyx_v_beta = __pyx_t_8;

  /* "ChessAI - Copy.pyx":1133
 * 
 *         # Search through all capture moves (and other tactical moves if applicable)
 *         for move in Cython_Chess.generate_legal_captures(self.pgnBoard,chess.BB_ALL,chess.BB_ALL):             # <<<<<<<<<<<<<<
 *         # for move in self.non_quiescence_moves(self.pgnBoard):
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Cython_Chess); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_generate_legal_captures); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_chess); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_BB_ALL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_chess); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_BB_ALL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_self->pgnBoard, __pyx_t_10, __pyx_t_11};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1133, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_self->pgnBoard, __pyx_t_10, __pyx_t_11};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1133, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  {
    __pyx_t_12 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->pgnBoard);
    __Pyx_GIVEREF(__pyx_v_self->pgnBoard);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_8, __pyx_v_self->pgnBoard);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_8, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_12, 2+__pyx_t_8, __pyx_t_11);
    __pyx_t_10 = 0;
    __pyx_t_11 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_9 = __pyx_t_1; __Pyx_INCREF(__pyx_t_9); __pyx_t_13 = 0;
    __pyx_t_14 = NULL;
  } else {
    __pyx_t_13 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_14 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1133, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_14)) {
      if (likely(PyList_CheckExact(__pyx_t_9))) {
        if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 1133, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 1133, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_14(__pyx_t_9);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1133, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_move, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ChessAI - Copy.pyx":1137
 * 
 *             # Check if the move is a promoting move
 *             if (move.promotion):             # <<<<<<<<<<<<<<
 *                 promotion = move.promotion
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "ChessAI - Copy.pyx":1138
 *             # Check if the move is a promoting move
 *             if (move.promotion):
 *                 promotion = move.promotion             # <<<<<<<<<<<<<<
 *             else:
 *                 promotion = 0
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1138, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1138, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_promotion = __pyx_t_8;

      /* "ChessAI - Copy.pyx":1137
 * 
 *             # Check if the move is a promoting move
 *             if (move.promotion):             # <<<<<<<<<<<<<<
 *                 promotion = move.promotion
 *             else:
 */
      goto __pyx_L10;
    }

    /* "ChessAI - Copy.pyx":1140
 *                 promotion = move.promotion
 *             else:
 *                 promotion = 0             # <<<<<<<<<<<<<<
 * 
 *             # Acquire the zobrist hash for the new position if the given move was made
 */
    /*else*/ {
      __pyx_v_promotion = 0;
    }
    __pyx_L10:;

    /* "ChessAI - Copy.pyx":1143
 * 
 *             # Acquire the zobrist hash for the new position if the given move was made
 *             isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))             # <<<<<<<<<<<<<<
 *             updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_15 = __Pyx_PyInt_As_uint8_t(__pyx_t_1); if (unlikely((__pyx_t_15 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_16 = __Pyx_PyInt_As_uint8_t(__pyx_t_1); if (unlikely((__pyx_t_16 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_turn); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_3 = (!__pyx_t_2);
    __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_3, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_12); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_en_passant); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_12 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_11, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_move);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_v_isCapture = is_capture(__pyx_t_15, __pyx_t_16, __pyx_t_4, __pyx_t_3);

    /* "ChessAI - Copy.pyx":1144
 *             # Acquire the zobrist hash for the new position if the given move was made
 *             isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))
 *             updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)             # <<<<<<<<<<<<<<
 * 
 *             # Push the given move and call the quiescence maximizer using aspiration windows
 */
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_16 = __Pyx_PyInt_As_uint8_t(__pyx_t_12); if (unlikely((__pyx_t_16 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_15 = __Pyx_PyInt_As_uint8_t(__pyx_t_12); if (unlikely((__pyx_t_15 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    updateZobristHashForMove(__pyx_v_self->zobrist, __pyx_t_16, __pyx_t_15, __pyx_v_isCapture, __pyx_v_pawns, __pyx_v_knights, __pyx_v_bishops, __pyx_v_rooks, __pyx_v_queens, __pyx_v_kings, __pyx_v_occupied_white, __pyx_v_occupied_black, __pyx_v_promotion);

    /* "ChessAI - Copy.pyx":1147
 * 
 *             # Push the given move and call the quiescence maximizer using aspiration windows
 *             self.pgnBoard.push(move)             # <<<<<<<<<<<<<<
 *             # score = self.quiescenceMax(alpha, beta ,quiescenceDepth+1)
 *             score = self.quiescenceMax(alpha - 750, beta + 750 ,quiescenceDepth+1)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_push); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_12 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_11, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_move);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "ChessAI - Copy.pyx":1149
 *             self.pgnBoard.push(move)
 *             # score = self.quiescenceMax(alpha, beta ,quiescenceDepth+1)
 *             score = self.quiescenceMax(alpha - 750, beta + 750 ,quiescenceDepth+1)             # <<<<<<<<<<<<<<
 * 
 *             if alpha < score and score < beta:
 */
    __pyx_v_score = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->quiescenceMax(__pyx_v_self, (__pyx_v_alpha - 0x2EE), (__pyx_v_beta + 0x2EE), (__pyx_v_quiescenceDepth + 1));

    /* "ChessAI - Copy.pyx":1151
 *             score = self.quiescenceMax(alpha - 750, beta + 750 ,quiescenceDepth+1)
 * 
 *             if alpha < score and score < beta:             # <<<<<<<<<<<<<<
 *                 score = self.quiescenceMax(alpha, beta ,quiescenceDepth+1)
 * 
 */
    __pyx_t_2 = ((__pyx_v_alpha < __pyx_v_score) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_score < __pyx_v_beta) != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L12_bool_binop_done:;
    if (__pyx_t_3) {

      /* "ChessAI - Copy.pyx":1152
 * 
 *             if alpha < score and score < beta:
 *                 score = self.quiescenceMax(alpha, beta ,quiescenceDepth+1)             # <<<<<<<<<<<<<<
 * 
 *             # Undo the move and reset the zobrist hash
 */
      __pyx_v_score = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->quiescenceMax(__pyx_v_self, __pyx_v_alpha, __pyx_v_beta, (__pyx_v_quiescenceDepth + 1));

      /* "ChessAI - Copy.pyx":1151
 *             score = self.quiescenceMax(alpha - 750, beta + 750 ,quiescenceDepth+1)
 * 
 *             if alpha < score and score < beta:             # <<<<<<<<<<<<<<
 *                 score = self.quiescenceMax(alpha, beta ,quiescenceDepth+1)
 * 
 */
    }

    /* "ChessAI - Copy.pyx":1155
 * 
 *             # Undo the move and reset the zobrist hash
 *             self.pgnBoard.pop()             # <<<<<<<<<<<<<<
 *             self.zobrist = curHash
 * 
 */
    __pyx_t_12 = __Pyx_PyObject_Pop(__pyx_v_self->pgnBoard); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "ChessAI - Copy.pyx":1156
 *             # Undo the move and reset the zobrist hash
 *             self.pgnBoard.pop()
 *             self.zobrist = curHash             # <<<<<<<<<<<<<<
 * 
 *             # Update beta
 */
    __pyx_v_self->zobrist = __pyx_v_curHash;

    /* "ChessAI - Copy.pyx":1159
 * 
 *             # Update beta
 *             beta = min(beta, score)             # <<<<<<<<<<<<<<
 * 
 *             # Beta cutoff
 */
    __pyx_t_8 = __pyx_v_score;
    __pyx_t_6 = __pyx_v_beta;
    if (((__pyx_t_8 < __pyx_t_6) != 0)) {
      __pyx_t_7 = __pyx_t_8;
    } else {
      __pyx_t_7 = __pyx_t_6;
    }
    __pyx_v_beta = __pyx_t_7;

    /* "ChessAI - Copy.pyx":1162
 * 
 *             # Beta cutoff
 *             if beta <= alpha:             # <<<<<<<<<<<<<<
 *                 return score  # Alpha cutoff
 * 
 */
    __pyx_t_3 = ((__pyx_v_beta <= __pyx_v_alpha) != 0);
    if (__pyx_t_3) {

      /* "ChessAI - Copy.pyx":1163
 *             # Beta cutoff
 *             if beta <= alpha:
 *                 return score  # Alpha cutoff             # <<<<<<<<<<<<<<
 * 
 *         # In the case where the beta value changes, without a beta cutoff having occurred, this move is likely to be a good one
 */
      __pyx_r = __pyx_v_score;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L0;

      /* "ChessAI - Copy.pyx":1162
 * 
 *             # Beta cutoff
 *             if beta <= alpha:             # <<<<<<<<<<<<<<
 *                 return score  # Alpha cutoff
 * 
 */
    }

    /* "ChessAI - Copy.pyx":1133
 * 
 *         # Search through all capture moves (and other tactical moves if applicable)
 *         for move in Cython_Chess.generate_legal_captures(self.pgnBoard,chess.BB_ALL,chess.BB_ALL):             # <<<<<<<<<<<<<<
 *         # for move in self.non_quiescence_moves(self.pgnBoard):
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "ChessAI - Copy.pyx":1166
 * 
 *         # In the case where the beta value changes, without a beta cutoff having occurred, this move is likely to be a good one
 *         if (beta != betaCopy):             # <<<<<<<<<<<<<<
 *             return beta
 *         # If the alpha value has not changed, the return should be the evaluation acquired in this recursive iteration
 */
  __pyx_t_3 = ((__pyx_v_beta != __pyx_v_betaCopy) != 0);
  if (__pyx_t_3) {

    /* "ChessAI - Copy.pyx":1167
 *         # In the case where the beta value changes, without a beta cutoff having occurred, this move is likely to be a good one
 *         if (beta != betaCopy):
 *             return beta             # <<<<<<<<<<<<<<
 *         # If the alpha value has not changed, the return should be the evaluation acquired in this recursive iteration
 *         return evaluation
 */
    __pyx_r = __pyx_v_beta;
    goto __pyx_L0;

    /* "ChessAI - Copy.pyx":1166
 * 
 *         # In the case where the beta value changes, without a beta cutoff having occurred, this move is likely to be a good one
 *         if (beta != betaCopy):             # <<<<<<<<<<<<<<
 *             return beta
 *         # If the alpha value has not changed, the return should be the evaluation acquired in this recursive iteration
 */
  }

  /* "ChessAI - Copy.pyx":1169
 *             return beta
 *         # If the alpha value has not changed, the return should be the evaluation acquired in this recursive iteration
 *         return evaluation             # <<<<<<<<<<<<<<
 * 
 *     # Define the pre-minimizer function to be used when trtying to reorder moves for full search
 */
  __pyx_r = __pyx_v_evaluation;
  goto __pyx_L0;

  /* "ChessAI - Copy.pyx":1099
 *     @cython.ccall
 *     @cython.inline
 *     cdef int quiescenceMin(self, int alpha, int beta, int quiescenceDepth):             # <<<<<<<<<<<<<<
 * 
 *         self.numIterations += 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("ChessAI.ChessAI.quiescenceMin", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_move);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ChessAI - Copy.pyx":1178
 *     @cython.ccall
 *     @cython.inline
 *     cdef tuple preMinimizer(self, int curDepth, int depthLimit, int alpha, int beta):             # <<<<<<<<<<<<<<
 * 
 *         # Define the lowest score with respect to the number of moves played
 */

static PyObject *__pyx_f_7ChessAI_7ChessAI_preMinimizer(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_curDepth, int __pyx_v_depthLimit, int __pyx_v_alpha, int __pyx_v_beta) {
  int __pyx_v_lowestScore;
  int __pyx_v_score;
  PyObject *__pyx_v_move = 0;
  int __pyx_v_count;
  PyObject *__pyx_v_beta_list = 0;
  uint64_t __pyx_v_curHash;
  uint64_t __pyx_v_pawns;
  uint64_t __pyx_v_knights;
  uint64_t __pyx_v_bishops;
  uint64_t __pyx_v_rooks;
  uint64_t __pyx_v_queens;
  uint64_t __pyx_v_kings;
  uint64_t __pyx_v_occupied_white;
  uint64_t __pyx_v_occupied_black;
  CYTHON_UNUSED uint64_t __pyx_v_occupied;
  int __pyx_v_promotion;
  int __pyx_v_isCapture;
  PyObject *__pyx_v_moves_list = 0;
  int __pyx_v_length;
  CYTHON_UNUSED int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  uint64_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  uint8_t __pyx_t_10;
  uint8_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("preMinimizer", 0);

  /* "ChessAI - Copy.pyx":1181
 * 
 *         # Define the lowest score with respect to the number of moves played
 *         cdef int lowestScore = 9999999 - len(self.pgnBoard.move_stack)             # <<<<<<<<<<<<<<
 * 
 *         # Define variables to hold the current move, score and index
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_move_stack); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lowestScore = (0x98967F - __pyx_t_2);

  /* "ChessAI - Copy.pyx":1186
 *         cdef int score
 *         cdef object move
 *         cdef int count = 0             # <<<<<<<<<<<<<<
 * 
 *         # Define lists to hold the current scores
 */
  __pyx_v_count = 0;

  /* "ChessAI - Copy.pyx":1189
 * 
 *         # Define lists to hold the current scores
 *         cdef list beta_list = []             # <<<<<<<<<<<<<<
 * 
 *         # Define variable to hold the zobrist hash for the current board state
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_beta_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":1192
 * 
 *         # Define variable to hold the zobrist hash for the current board state
 *         cdef uint64_t curHash = self.zobrist             # <<<<<<<<<<<<<<
 * 
 *         # Initialize bitmasks for the current board state
 */
  __pyx_t_3 = __pyx_v_self->zobrist;
  __pyx_v_curHash = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1195
 * 
 *         # Initialize bitmasks for the current board state
 *         cdef uint64_t pawns = self.pgnBoard.pawns             # <<<<<<<<<<<<<<
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_pawns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pawns = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1196
 *         # Initialize bitmasks for the current board state
 *         cdef uint64_t pawns = self.pgnBoard.pawns
 *         cdef uint64_t knights = self.pgnBoard.knights             # <<<<<<<<<<<<<<
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_knights); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_knights = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1197
 *         cdef uint64_t pawns = self.pgnBoard.pawns
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops             # <<<<<<<<<<<<<<
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_bishops); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_bishops = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1198
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks             # <<<<<<<<<<<<<<
 *         cdef uint64_t queens = self.pgnBoard.queens
 *         cdef uint64_t kings = self.pgnBoard.kings
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_rooks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rooks = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1199
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens             # <<<<<<<<<<<<<<
 *         cdef uint64_t kings = self.pgnBoard.kings
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_queens); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_queens = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1200
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens
 *         cdef uint64_t kings = self.pgnBoard.kings             # <<<<<<<<<<<<<<
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_kings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_kings = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1202
 *         cdef uint64_t kings = self.pgnBoard.kings
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]             # <<<<<<<<<<<<<<
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]
 *         cdef uint64_t occupied = self.pgnBoard.occupied
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 1, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_occupied_white = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1203
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]             # <<<<<<<<<<<<<<
 *         cdef uint64_t occupied = self.pgnBoard.occupied
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 0, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_occupied_black = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1204
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]
 *         cdef uint64_t occupied = self.pgnBoard.occupied             # <<<<<<<<<<<<<<
 * 
 *         # Define variables to hold information for zobrist hashing
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1204, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_occupied = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1207
 * 
 *         # Define variables to hold information for zobrist hashing
 *         cdef int promotion = 0             # <<<<<<<<<<<<<<
 *         cdef bint isCapture
 * 
 */
  __pyx_v_promotion = 0;

  /* "ChessAI - Copy.pyx":1211
 * 
 *         # If the depth limit is reached, evaluate the current position
 *         if curDepth >= depthLimit:             # <<<<<<<<<<<<<<
 *             self.numIterations += 1
 *             return evaluate_board(self.pgnBoard,self.zobrist)
 */
  __pyx_t_5 = ((__pyx_v_curDepth >= __pyx_v_depthLimit) != 0);
  if (__pyx_t_5) {

    /* "ChessAI - Copy.pyx":1212
 *         # If the depth limit is reached, evaluate the current position
 *         if curDepth >= depthLimit:
 *             self.numIterations += 1             # <<<<<<<<<<<<<<
 *             return evaluate_board(self.pgnBoard,self.zobrist)
 * 
 */
    __pyx_v_self->numIterations = (__pyx_v_self->numIterations + 1);

    /* "ChessAI - Copy.pyx":1213
 *         if curDepth >= depthLimit:
 *             self.numIterations += 1
 *             return evaluate_board(self.pgnBoard,self.zobrist)             # <<<<<<<<<<<<<<
 * 
 *         # Acquire list of moves where captures appear first
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_v_self->pgnBoard;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_f_7ChessAI_evaluate_board(__pyx_t_1, __pyx_v_self->zobrist)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(PyTuple_CheckExact(__pyx_t_4))||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 1213, __pyx_L1_error)
    __pyx_r = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "ChessAI - Copy.pyx":1211
 * 
 *         # If the depth limit is reached, evaluate the current position
 *         if curDepth >= depthLimit:             # <<<<<<<<<<<<<<
 *             self.numIterations += 1
 *             return evaluate_board(self.pgnBoard,self.zobrist)
 */
  }

  /* "ChessAI - Copy.pyx":1216
 * 
 *         # Acquire list of moves where captures appear first
 *         cdef list moves_list = list(self.reorder_capture_moves(chess.BB_ALL, self.pgnBoard))             # <<<<<<<<<<<<<<
 * 
 *         # Variable to hold full length of the list
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reorder_capture_moves); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_chess); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_BB_ALL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_7, __pyx_v_self->pgnBoard};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1216, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_7, __pyx_v_self->pgnBoard};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1216, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_7);
    __Pyx_INCREF(__pyx_v_self->pgnBoard);
    __Pyx_GIVEREF(__pyx_v_self->pgnBoard);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_self->pgnBoard);
    __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySequence_List(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_moves_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":1219
 * 
 *         # Variable to hold full length of the list
 *         cdef int length = len(moves_list)             # <<<<<<<<<<<<<<
 * 
 *         for move in moves_list:
 */
  __pyx_t_2 = PyList_GET_SIZE(__pyx_v_moves_list); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1219, __pyx_L1_error)
  __pyx_v_length = __pyx_t_2;

  /* "ChessAI - Copy.pyx":1221
 *         cdef int length = len(moves_list)
 * 
 *         for move in moves_list:             # <<<<<<<<<<<<<<
 * 
 *             # Check if the move is a promoting move
 */
  __pyx_t_1 = __pyx_v_moves_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1221, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_move, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ChessAI - Copy.pyx":1224
 * 
 *             # Check if the move is a promoting move
 *             if (move.promotion):             # <<<<<<<<<<<<<<
 *                 promotion = move.promotion
 *             else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1224, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {

      /* "ChessAI - Copy.pyx":1225
 *             # Check if the move is a promoting move
 *             if (move.promotion):
 *                 promotion = move.promotion             # <<<<<<<<<<<<<<
 *             else:
 *                 promotion = 0
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1225, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1225, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_promotion = __pyx_t_8;

      /* "ChessAI - Copy.pyx":1224
 * 
 *             # Check if the move is a promoting move
 *             if (move.promotion):             # <<<<<<<<<<<<<<
 *                 promotion = move.promotion
 *             else:
 */
      goto __pyx_L6;
    }

    /* "ChessAI - Copy.pyx":1227
 *                 promotion = move.promotion
 *             else:
 *                 promotion = 0             # <<<<<<<<<<<<<<
 * 
 *             # Acquire the zobrist hash for the new position if the given move was made
 */
    /*else*/ {
      __pyx_v_promotion = 0;
    }
    __pyx_L6:;

    /* "ChessAI - Copy.pyx":1230
 * 
 *             # Acquire the zobrist hash for the new position if the given move was made
 *             isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))             # <<<<<<<<<<<<<<
 *             updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = __Pyx_PyInt_As_uint8_t(__pyx_t_4); if (unlikely((__pyx_t_10 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = __Pyx_PyInt_As_uint8_t(__pyx_t_4); if (unlikely((__pyx_t_11 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_turn); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_12 = (!__pyx_t_5);
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_4, __pyx_t_12, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_9); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_en_passant); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_9 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_move);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_isCapture = is_capture(__pyx_t_10, __pyx_t_11, __pyx_t_3, __pyx_t_12);

    /* "ChessAI - Copy.pyx":1231
 *             # Acquire the zobrist hash for the new position if the given move was made
 *             isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))
 *             updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)             # <<<<<<<<<<<<<<
 * 
 *             # Push the given move and call the maximizer
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = __Pyx_PyInt_As_uint8_t(__pyx_t_9); if (unlikely((__pyx_t_11 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1231, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyInt_As_uint8_t(__pyx_t_9); if (unlikely((__pyx_t_10 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1231, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    updateZobristHashForMove(__pyx_v_self->zobrist, __pyx_t_11, __pyx_t_10, __pyx_v_isCapture, __pyx_v_pawns, __pyx_v_knights, __pyx_v_bishops, __pyx_v_rooks, __pyx_v_queens, __pyx_v_kings, __pyx_v_occupied_white, __pyx_v_occupied_black, __pyx_v_promotion);

    /* "ChessAI - Copy.pyx":1234
 * 
 *             # Push the given move and call the maximizer
 *             self.pgnBoard.push(move)             # <<<<<<<<<<<<<<
 *             score = self.maximizer(curDepth + 1, depthLimit, alpha, beta)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_push); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_9 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_move);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "ChessAI - Copy.pyx":1235
 *             # Push the given move and call the maximizer
 *             self.pgnBoard.push(move)
 *             score = self.maximizer(curDepth + 1, depthLimit, alpha, beta)             # <<<<<<<<<<<<<<
 * 
 *             # Undo the move and reset the zobrist hash
 */
    __pyx_v_score = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->maximizer(__pyx_v_self, (__pyx_v_curDepth + 1), __pyx_v_depthLimit, __pyx_v_alpha, __pyx_v_beta);

    /* "ChessAI - Copy.pyx":1238
 * 
 *             # Undo the move and reset the zobrist hash
 *             self.pgnBoard.pop()             # <<<<<<<<<<<<<<
 *             self.zobrist = curHash
 * 
 */
    __pyx_t_9 = __Pyx_PyObject_Pop(__pyx_v_self->pgnBoard); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "ChessAI - Copy.pyx":1239
 *             # Undo the move and reset the zobrist hash
 *             self.pgnBoard.pop()
 *             self.zobrist = curHash             # <<<<<<<<<<<<<<
 * 
 *             # ** Code segment for testing
 */
    __pyx_v_self->zobrist = __pyx_v_curHash;

    /* "ChessAI - Copy.pyx":1248
 * 
 *             # Append list to keep score of the move
 *             beta_list.append(score)             # <<<<<<<<<<<<<<
 *             count += 1
 * 
 */
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_score); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_beta_list, __pyx_t_9); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1248, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "ChessAI - Copy.pyx":1249
 *             # Append list to keep score of the move
 *             beta_list.append(score)
 *             count += 1             # <<<<<<<<<<<<<<
 * 
 *             # Update lowest score
 */
    __pyx_v_count = (__pyx_v_count + 1);

    /* "ChessAI - Copy.pyx":1252
 * 
 *             # Update lowest score
 *             if score < lowestScore:             # <<<<<<<<<<<<<<
 *                 lowestScore = score
 * 
 */
    __pyx_t_12 = ((__pyx_v_score < __pyx_v_lowestScore) != 0);
    if (__pyx_t_12) {

      /* "ChessAI - Copy.pyx":1253
 *             # Update lowest score
 *             if score < lowestScore:
 *                 lowestScore = score             # <<<<<<<<<<<<<<
 * 
 *             # Update beta
 */
      __pyx_v_lowestScore = __pyx_v_score;

      /* "ChessAI - Copy.pyx":1252
 * 
 *             # Update lowest score
 *             if score < lowestScore:             # <<<<<<<<<<<<<<
 *                 lowestScore = score
 * 
 */
    }

    /* "ChessAI - Copy.pyx":1256
 * 
 *             # Update beta
 *             beta = min(beta, lowestScore)             # <<<<<<<<<<<<<<
 * 
 *             # Beta cutoff
 */
    __pyx_t_8 = __pyx_v_lowestScore;
    __pyx_t_14 = __pyx_v_beta;
    if (((__pyx_t_8 < __pyx_t_14) != 0)) {
      __pyx_t_15 = __pyx_t_8;
    } else {
      __pyx_t_15 = __pyx_t_14;
    }
    __pyx_v_beta = __pyx_t_15;

    /* "ChessAI - Copy.pyx":1259
 * 
 *             # Beta cutoff
 *             if beta <= alpha:             # <<<<<<<<<<<<<<
 * 
 *                 # Fill up the scores list to capacity
 */
    __pyx_t_12 = ((__pyx_v_beta <= __pyx_v_alpha) != 0);
    if (__pyx_t_12) {

      /* "ChessAI - Copy.pyx":1262
 * 
 *                 # Fill up the scores list to capacity
 *                 for i in range(length - count):             # <<<<<<<<<<<<<<
 *                     beta_list.append(None)
 * 
 */
      __pyx_t_15 = (__pyx_v_length - __pyx_v_count);
      __pyx_t_8 = __pyx_t_15;
      for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_8; __pyx_t_14+=1) {
        __pyx_v_i = __pyx_t_14;

        /* "ChessAI - Copy.pyx":1263
 *                 # Fill up the scores list to capacity
 *                 for i in range(length - count):
 *                     beta_list.append(None)             # <<<<<<<<<<<<<<
 * 
 *                 return beta, beta_list, moves_list
 */
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_beta_list, Py_None); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1263, __pyx_L1_error)
      }

      /* "ChessAI - Copy.pyx":1265
 *                     beta_list.append(None)
 * 
 *                 return beta, beta_list, moves_list             # <<<<<<<<<<<<<<
 * 
 *         # If no moves were available, check if a the opponent is in checkmate
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_beta); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1265, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1265, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9);
      __Pyx_INCREF(__pyx_v_beta_list);
      __Pyx_GIVEREF(__pyx_v_beta_list);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_beta_list);
      __Pyx_INCREF(__pyx_v_moves_list);
      __Pyx_GIVEREF(__pyx_v_moves_list);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_moves_list);
      __pyx_t_9 = 0;
      __pyx_r = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "ChessAI - Copy.pyx":1259
 * 
 *             # Beta cutoff
 *             if beta <= alpha:             # <<<<<<<<<<<<<<
 * 
 *                 # Fill up the scores list to capacity
 */
    }

    /* "ChessAI - Copy.pyx":1221
 *         cdef int length = len(moves_list)
 * 
 *         for move in moves_list:             # <<<<<<<<<<<<<<
 * 
 *             # Check if the move is a promoting move
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":1268
 * 
 *         # If no moves were available, check if a the opponent is in checkmate
 *         if (lowestScore == 9999999 - len(self.pgnBoard.move_stack)):             # <<<<<<<<<<<<<<
 *             self.numIterations += 1
 *             if self.pgnBoard.is_checkmate():
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_move_stack); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = ((__pyx_v_lowestScore == (0x98967F - __pyx_t_2)) != 0);
  if (__pyx_t_12) {

    /* "ChessAI - Copy.pyx":1269
 *         # If no moves were available, check if a the opponent is in checkmate
 *         if (lowestScore == 9999999 - len(self.pgnBoard.move_stack)):
 *             self.numIterations += 1             # <<<<<<<<<<<<<<
 *             if self.pgnBoard.is_checkmate():
 *                 return 100000000, beta_list, moves_list
 */
    __pyx_v_self->numIterations = (__pyx_v_self->numIterations + 1);

    /* "ChessAI - Copy.pyx":1270
 *         if (lowestScore == 9999999 - len(self.pgnBoard.move_stack)):
 *             self.numIterations += 1
 *             if self.pgnBoard.is_checkmate():             # <<<<<<<<<<<<<<
 *                 return 100000000, beta_list, moves_list
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_checkmate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1270, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_12) {

      /* "ChessAI - Copy.pyx":1271
 *             self.numIterations += 1
 *             if self.pgnBoard.is_checkmate():
 *                 return 100000000, beta_list, moves_list             # <<<<<<<<<<<<<<
 * 
 *         return lowestScore, beta_list, moves_list
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_int_100000000);
      __Pyx_GIVEREF(__pyx_int_100000000);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_100000000);
      __Pyx_INCREF(__pyx_v_beta_list);
      __Pyx_GIVEREF(__pyx_v_beta_list);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_beta_list);
      __Pyx_INCREF(__pyx_v_moves_list);
      __Pyx_GIVEREF(__pyx_v_moves_list);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_moves_list);
      __pyx_r = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "ChessAI - Copy.pyx":1270
 *         if (lowestScore == 9999999 - len(self.pgnBoard.move_stack)):
 *             self.numIterations += 1
 *             if self.pgnBoard.is_checkmate():             # <<<<<<<<<<<<<<
 *                 return 100000000, beta_list, moves_list
 * 
 */
    }

    /* "ChessAI - Copy.pyx":1268
 * 
 *         # If no moves were available, check if a the opponent is in checkmate
 *         if (lowestScore == 9999999 - len(self.pgnBoard.move_stack)):             # <<<<<<<<<<<<<<
 *             self.numIterations += 1
 *             if self.pgnBoard.is_checkmate():
 */
  }

  /* "ChessAI - Copy.pyx":1273
 *                 return 100000000, beta_list, moves_list
 * 
 *         return lowestScore, beta_list, moves_list             # <<<<<<<<<<<<<<
 * 
 *     # Standing position evaluation function
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_lowestScore); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_beta_list);
  __Pyx_GIVEREF(__pyx_v_beta_list);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_beta_list);
  __Pyx_INCREF(__pyx_v_moves_list);
  __Pyx_GIVEREF(__pyx_v_moves_list);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_moves_list);
  __pyx_t_1 = 0;
  __pyx_r = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ChessAI - Copy.pyx":1178
 *     @cython.ccall
 *     @cython.inline
 *     cdef tuple preMinimizer(self, int curDepth, int depthLimit, int alpha, int beta):             # <<<<<<<<<<<<<<
 * 
 *         # Define the lowest score with respect to the number of moves played
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ChessAI.ChessAI.preMinimizer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_move);
  __Pyx_XDECREF(__pyx_v_beta_list);
  __Pyx_XDECREF(__pyx_v_moves_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ChessAI - Copy.pyx":1276
 * 
 *     # Standing position evaluation function
 *     def ev(self, object board):             # <<<<<<<<<<<<<<
 *         self.zobrist = generateZobristHash(board.pawns,board.knights,board.bishops,board.rooks,board.queens,board.kings,board.occupied_co[True],board.occupied_co[False])
 *         return evaluate_board(board,self.zobrist)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ChessAI_7ChessAI_9ev(PyObject *__pyx_v_self, PyObject *__pyx_v_board); /*proto*/
static PyObject *__pyx_pw_7ChessAI_7ChessAI_9ev(PyObject *__pyx_v_self, PyObject *__pyx_v_board) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ev (wrapper)", 0);
  __pyx_r = __pyx_pf_7ChessAI_7ChessAI_8ev(((struct __pyx_obj_7ChessAI_ChessAI *)__pyx_v_self), ((PyObject *)__pyx_v_board));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ChessAI_7ChessAI_8ev(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, PyObject *__pyx_v_board) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  uint64_t __pyx_t_2;
  uint64_t __pyx_t_3;
  uint64_t __pyx_t_4;
  uint64_t __pyx_t_5;
  uint64_t __pyx_t_6;
  uint64_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  uint64_t __pyx_t_9;
  uint64_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ev", 0);

  /* "ChessAI - Copy.pyx":1277
 *     # Standing position evaluation function
 *     def ev(self, object board):
 *         self.zobrist = generateZobristHash(board.pawns,board.knights,board.bishops,board.rooks,board.queens,board.kings,board.occupied_co[True],board.occupied_co[False])             # <<<<<<<<<<<<<<
 *         return evaluate_board(board,self.zobrist)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_pawns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_knights); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_bishops); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_rooks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_5 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_queens); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_6 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_kings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_7 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 1, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_8); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_8, 0, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_10 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_10 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->zobrist = generateZobristHash(__pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_9, __pyx_t_10);

  /* "ChessAI - Copy.pyx":1278
 *     def ev(self, object board):
 *         self.zobrist = generateZobristHash(board.pawns,board.knights,board.bishops,board.rooks,board.queens,board.kings,board.occupied_co[True],board.occupied_co[False])
 *         return evaluate_board(board,self.zobrist)             # <<<<<<<<<<<<<<
 * 
 *     # Function to order pre order moves for full search
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_7ChessAI_evaluate_board(__pyx_v_board, __pyx_v_self->zobrist)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ChessAI - Copy.pyx":1276
 * 
 *     # Standing position evaluation function
 *     def ev(self, object board):             # <<<<<<<<<<<<<<
 *         self.zobrist = generateZobristHash(board.pawns,board.knights,board.bishops,board.rooks,board.queens,board.kings,board.occupied_co[True],board.occupied_co[False])
 *         return evaluate_board(board,self.zobrist)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ChessAI.ChessAI.ev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ChessAI - Copy.pyx":1287
 *     @cython.ccall
 *     @cython.inline
 *     cdef tuple reorder_legal_moves(self,int alpha,int beta, depthLimit):             # <<<<<<<<<<<<<<
 * 
 *         # Define variables to hold current scores, moves. index and highest score
 */

static PyObject *__pyx_f_7ChessAI_7ChessAI_reorder_legal_moves(struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, int __pyx_v_alpha, int __pyx_v_beta, PyObject *__pyx_v_depthLimit) {
  int __pyx_v_score;
  int __pyx_v_highestScore;
  PyObject *__pyx_v_move = 0;
  int __pyx_v_count;
  PyObject *__pyx_v_moves_list = 0;
  PyObject *__pyx_v_alpha_list = 0;
  PyObject *__pyx_v_beta_list = 0;
  PyObject *__pyx_v_cur_beta_list = 0;
  PyObject *__pyx_v_beta_move_list = 0;
  PyObject *__pyx_v_cur_beta_move_list = 0;
  int __pyx_v_depth;
  uint64_t __pyx_v_curHash;
  int __pyx_v_isCapture;
  int __pyx_v_promotion;
  uint64_t __pyx_v_pawns;
  uint64_t __pyx_v_knights;
  uint64_t __pyx_v_bishops;
  uint64_t __pyx_v_rooks;
  uint64_t __pyx_v_queens;
  uint64_t __pyx_v_kings;
  uint64_t __pyx_v_occupied_white;
  uint64_t __pyx_v_occupied_black;
  CYTHON_UNUSED uint64_t __pyx_v_occupied;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  uint64_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  uint8_t __pyx_t_10;
  uint8_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reorder_legal_moves", 0);

  /* "ChessAI - Copy.pyx":1290
 * 
 *         # Define variables to hold current scores, moves. index and highest score
 *         cdef int score = -99999999             # <<<<<<<<<<<<<<
 *         cdef int highestScore = -99999999
 *         cdef object move
 */
  __pyx_v_score = -99999999;

  /* "ChessAI - Copy.pyx":1291
 *         # Define variables to hold current scores, moves. index and highest score
 *         cdef int score = -99999999
 *         cdef int highestScore = -99999999             # <<<<<<<<<<<<<<
 *         cdef object move
 *         cdef int count = 1
 */
  __pyx_v_highestScore = -99999999;

  /* "ChessAI - Copy.pyx":1293
 *         cdef int highestScore = -99999999
 *         cdef object move
 *         cdef int count = 1             # <<<<<<<<<<<<<<
 * 
 *         # Define lists to hold scores and moves for reordering purposes
 */
  __pyx_v_count = 1;

  /* "ChessAI - Copy.pyx":1297
 *         # Define lists to hold scores and moves for reordering purposes
 *         cdef list moves_list
 *         cdef list alpha_list = []             # <<<<<<<<<<<<<<
 *         cdef list beta_list = []
 *         cdef list cur_beta_list = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_alpha_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":1298
 *         cdef list moves_list
 *         cdef list alpha_list = []
 *         cdef list beta_list = []             # <<<<<<<<<<<<<<
 *         cdef list cur_beta_list = []
 *         cdef list beta_move_list = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_beta_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":1299
 *         cdef list alpha_list = []
 *         cdef list beta_list = []
 *         cdef list cur_beta_list = []             # <<<<<<<<<<<<<<
 *         cdef list beta_move_list = []
 *         cdef list cur_beta_move_list = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cur_beta_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":1300
 *         cdef list beta_list = []
 *         cdef list cur_beta_list = []
 *         cdef list beta_move_list = []             # <<<<<<<<<<<<<<
 *         cdef list cur_beta_move_list = []
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_beta_move_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":1301
 *         cdef list cur_beta_list = []
 *         cdef list beta_move_list = []
 *         cdef list cur_beta_move_list = []             # <<<<<<<<<<<<<<
 * 
 *         # Define depth for preliminary search
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cur_beta_move_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":1304
 * 
 *         # Define depth for preliminary search
 *         cdef int depth = depthLimit - 2             # <<<<<<<<<<<<<<
 * 
 *         # Define variable to hold zobrist hash of current position
 */
  __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_v_depthLimit, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_depth = __pyx_t_2;

  /* "ChessAI - Copy.pyx":1307
 * 
 *         # Define variable to hold zobrist hash of current position
 *         cdef uint64_t curHash = self.zobrist             # <<<<<<<<<<<<<<
 * 
 *         # Define variables to hold information for zobrist hashing
 */
  __pyx_t_3 = __pyx_v_self->zobrist;
  __pyx_v_curHash = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1311
 *         # Define variables to hold information for zobrist hashing
 *         cdef bint isCapture
 *         cdef int promotion = 0             # <<<<<<<<<<<<<<
 * 
 *         # Initialize bitmasks for the current board state
 */
  __pyx_v_promotion = 0;

  /* "ChessAI - Copy.pyx":1314
 * 
 *         # Initialize bitmasks for the current board state
 *         cdef uint64_t pawns = self.pgnBoard.pawns             # <<<<<<<<<<<<<<
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_pawns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pawns = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1315
 *         # Initialize bitmasks for the current board state
 *         cdef uint64_t pawns = self.pgnBoard.pawns
 *         cdef uint64_t knights = self.pgnBoard.knights             # <<<<<<<<<<<<<<
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_knights); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_knights = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1316
 *         cdef uint64_t pawns = self.pgnBoard.pawns
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops             # <<<<<<<<<<<<<<
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_bishops); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_bishops = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1317
 *         cdef uint64_t knights = self.pgnBoard.knights
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks             # <<<<<<<<<<<<<<
 *         cdef uint64_t queens = self.pgnBoard.queens
 *         cdef uint64_t kings = self.pgnBoard.kings
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_rooks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1317, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rooks = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1318
 *         cdef uint64_t bishops = self.pgnBoard.bishops
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens             # <<<<<<<<<<<<<<
 *         cdef uint64_t kings = self.pgnBoard.kings
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_queens); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_queens = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1319
 *         cdef uint64_t rooks = self.pgnBoard.rooks
 *         cdef uint64_t queens = self.pgnBoard.queens
 *         cdef uint64_t kings = self.pgnBoard.kings             # <<<<<<<<<<<<<<
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_kings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_kings = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1321
 *         cdef uint64_t kings = self.pgnBoard.kings
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]             # <<<<<<<<<<<<<<
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]
 *         cdef uint64_t occupied = self.pgnBoard.occupied
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 1, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_occupied_white = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1322
 * 
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]             # <<<<<<<<<<<<<<
 *         cdef uint64_t occupied = self.pgnBoard.occupied
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 0, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_occupied_black = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1323
 *         cdef uint64_t occupied_white = self.pgnBoard.occupied_co[True]
 *         cdef uint64_t occupied_black = self.pgnBoard.occupied_co[False]
 *         cdef uint64_t occupied = self.pgnBoard.occupied             # <<<<<<<<<<<<<<
 * 
 *         # Check if this is the first iteration of iterative deepening and if a moves list has already been define
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_occupied = __pyx_t_3;

  /* "ChessAI - Copy.pyx":1326
 * 
 *         # Check if this is the first iteration of iterative deepening and if a moves list has already been define
 *         if (self.alpha_list == []):             # <<<<<<<<<<<<<<
 *             moves_list = list(Cython_Chess.generate_legal_moves(self.pgnBoard,chess.BB_ALL,chess.BB_ALL))
 *         else:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_self->alpha_list, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "ChessAI - Copy.pyx":1327
 *         # Check if this is the first iteration of iterative deepening and if a moves list has already been define
 *         if (self.alpha_list == []):
 *             moves_list = list(Cython_Chess.generate_legal_moves(self.pgnBoard,chess.BB_ALL,chess.BB_ALL))             # <<<<<<<<<<<<<<
 *         else:
 *             moves_list = self.moves_list
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Cython_Chess); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_generate_legal_moves); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_chess); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_BB_ALL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_chess); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_BB_ALL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_2 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_2 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_self->pgnBoard, __pyx_t_7, __pyx_t_8};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_2, 3+__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1327, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_self->pgnBoard, __pyx_t_7, __pyx_t_8};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_2, 3+__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1327, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(3+__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_self->pgnBoard);
      __Pyx_GIVEREF(__pyx_v_self->pgnBoard);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_2, __pyx_v_self->pgnBoard);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_2, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_2, __pyx_t_8);
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PySequence_List(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_moves_list = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "ChessAI - Copy.pyx":1326
 * 
 *         # Check if this is the first iteration of iterative deepening and if a moves list has already been define
 *         if (self.alpha_list == []):             # <<<<<<<<<<<<<<
 *             moves_list = list(Cython_Chess.generate_legal_moves(self.pgnBoard,chess.BB_ALL,chess.BB_ALL))
 *         else:
 */
    goto __pyx_L3;
  }

  /* "ChessAI - Copy.pyx":1329
 *             moves_list = list(Cython_Chess.generate_legal_moves(self.pgnBoard,chess.BB_ALL,chess.BB_ALL))
 *         else:
 *             moves_list = self.moves_list             # <<<<<<<<<<<<<<
 * 
 *         # Check if the move is a promoting move
 */
  /*else*/ {
    __pyx_t_6 = __pyx_v_self->moves_list;
    __Pyx_INCREF(__pyx_t_6);
    __pyx_v_moves_list = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "ChessAI - Copy.pyx":1332
 * 
 *         # Check if the move is a promoting move
 *         if (moves_list[0].promotion):             # <<<<<<<<<<<<<<
 *             promotion = moves_list[0].promotion
 *         else:
 */
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1332, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_moves_list, 0), __pyx_n_s_promotion); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_5) {

    /* "ChessAI - Copy.pyx":1333
 *         # Check if the move is a promoting move
 *         if (moves_list[0].promotion):
 *             promotion = moves_list[0].promotion             # <<<<<<<<<<<<<<
 *         else:
 *             promotion = 0
 */
    if (unlikely(__pyx_v_moves_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1333, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_moves_list, 0), __pyx_n_s_promotion); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_promotion = __pyx_t_2;

    /* "ChessAI - Copy.pyx":1332
 * 
 *         # Check if the move is a promoting move
 *         if (moves_list[0].promotion):             # <<<<<<<<<<<<<<
 *             promotion = moves_list[0].promotion
 *         else:
 */
    goto __pyx_L4;
  }

  /* "ChessAI - Copy.pyx":1335
 *             promotion = moves_list[0].promotion
 *         else:
 *             promotion = 0             # <<<<<<<<<<<<<<
 * 
 *         # Acquire the zobrist hash for the new position if the given move was made
 */
  /*else*/ {
    __pyx_v_promotion = 0;
  }
  __pyx_L4:;

  /* "ChessAI - Copy.pyx":1338
 * 
 *         # Acquire the zobrist hash for the new position if the given move was made
 *         isCapture = is_capture(moves_list[0].from_square, moves_list[0].to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(moves_list[0]))             # <<<<<<<<<<<<<<
 *         updateZobristHashForMove(self.zobrist, moves_list[0].from_square, moves_list[0].to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black,promotion)
 * 
 */
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1338, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_moves_list, 0), __pyx_n_s_from_square); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_10 = __Pyx_PyInt_As_uint8_t(__pyx_t_6); if (unlikely((__pyx_t_10 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1338, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_moves_list, 0), __pyx_n_s_to_square); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_11 = __Pyx_PyInt_As_uint8_t(__pyx_t_6); if (unlikely((__pyx_t_11 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_turn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_12 = (!__pyx_t_5);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_6, __pyx_t_12, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_en_passant); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1338, __pyx_L1_error)
  }
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_9, PyList_GET_ITEM(__pyx_v_moves_list, 0)) : __Pyx_PyObject_CallOneArg(__pyx_t_6, PyList_GET_ITEM(__pyx_v_moves_list, 0));
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_isCapture = is_capture(__pyx_t_10, __pyx_t_11, __pyx_t_3, __pyx_t_12);

  /* "ChessAI - Copy.pyx":1339
 *         # Acquire the zobrist hash for the new position if the given move was made
 *         isCapture = is_capture(moves_list[0].from_square, moves_list[0].to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(moves_list[0]))
 *         updateZobristHashForMove(self.zobrist, moves_list[0].from_square, moves_list[0].to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black,promotion)             # <<<<<<<<<<<<<<
 * 
 *         self.pgnBoard.push(moves_list[0])
 */
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1339, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_moves_list, 0), __pyx_n_s_from_square); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = __Pyx_PyInt_As_uint8_t(__pyx_t_4); if (unlikely((__pyx_t_11 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1339, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_moves_list, 0), __pyx_n_s_to_square); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = __Pyx_PyInt_As_uint8_t(__pyx_t_4); if (unlikely((__pyx_t_10 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  updateZobristHashForMove(__pyx_v_self->zobrist, __pyx_t_11, __pyx_t_10, __pyx_v_isCapture, __pyx_v_pawns, __pyx_v_knights, __pyx_v_bishops, __pyx_v_rooks, __pyx_v_queens, __pyx_v_kings, __pyx_v_occupied_white, __pyx_v_occupied_black, __pyx_v_promotion);

  /* "ChessAI - Copy.pyx":1341
 *         updateZobristHashForMove(self.zobrist, moves_list[0].from_square, moves_list[0].to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black,promotion)
 * 
 *         self.pgnBoard.push(moves_list[0])             # <<<<<<<<<<<<<<
 *         highestScore, cur_beta_list, cur_beta_move_list = self.preMinimizer(1, depth, alpha, beta)
 *         self.pgnBoard.pop()
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_push); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1341, __pyx_L1_error)
  }
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_9, PyList_GET_ITEM(__pyx_v_moves_list, 0)) : __Pyx_PyObject_CallOneArg(__pyx_t_6, PyList_GET_ITEM(__pyx_v_moves_list, 0));
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ChessAI - Copy.pyx":1342
 * 
 *         self.pgnBoard.push(moves_list[0])
 *         highestScore, cur_beta_list, cur_beta_move_list = self.preMinimizer(1, depth, alpha, beta)             # <<<<<<<<<<<<<<
 *         self.pgnBoard.pop()
 * 
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->preMinimizer(__pyx_v_self, 1, __pyx_v_depth, __pyx_v_alpha, __pyx_v_beta); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (likely(__pyx_t_4 != Py_None)) {
    PyObject* sequence = __pyx_t_4;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1342, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
    __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_t_8);
    #else
    __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    #endif
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 1342, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_9)->tp_name), 0))) __PYX_ERR(0, 1342, __pyx_L1_error)
  if (!(likely(PyList_CheckExact(__pyx_t_8))||((__pyx_t_8) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_8)->tp_name), 0))) __PYX_ERR(0, 1342, __pyx_L1_error)
  __pyx_v_highestScore = __pyx_t_2;
  __Pyx_DECREF_SET(__pyx_v_cur_beta_list, ((PyObject*)__pyx_t_9));
  __pyx_t_9 = 0;
  __Pyx_DECREF_SET(__pyx_v_cur_beta_move_list, ((PyObject*)__pyx_t_8));
  __pyx_t_8 = 0;

  /* "ChessAI - Copy.pyx":1343
 *         self.pgnBoard.push(moves_list[0])
 *         highestScore, cur_beta_list, cur_beta_move_list = self.preMinimizer(1, depth, alpha, beta)
 *         self.pgnBoard.pop()             # <<<<<<<<<<<<<<
 * 
 *         self.zobrist = curHash
 */
  __pyx_t_4 = __Pyx_PyObject_Pop(__pyx_v_self->pgnBoard); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ChessAI - Copy.pyx":1345
 *         self.pgnBoard.pop()
 * 
 *         self.zobrist = curHash             # <<<<<<<<<<<<<<
 * 
 *         alpha = max(alpha, highestScore)
 */
  __pyx_v_self->zobrist = __pyx_v_curHash;

  /* "ChessAI - Copy.pyx":1347
 *         self.zobrist = curHash
 * 
 *         alpha = max(alpha, highestScore)             # <<<<<<<<<<<<<<
 *         alpha_list.append(highestScore)
 *         beta_list.append(cur_beta_list)
 */
  __pyx_t_2 = __pyx_v_highestScore;
  __pyx_t_13 = __pyx_v_alpha;
  if (((__pyx_t_2 > __pyx_t_13) != 0)) {
    __pyx_t_14 = __pyx_t_2;
  } else {
    __pyx_t_14 = __pyx_t_13;
  }
  __pyx_v_alpha = __pyx_t_14;

  /* "ChessAI - Copy.pyx":1348
 * 
 *         alpha = max(alpha, highestScore)
 *         alpha_list.append(highestScore)             # <<<<<<<<<<<<<<
 *         beta_list.append(cur_beta_list)
 *         beta_move_list.append(cur_beta_move_list)
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_highestScore); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_alpha_list, __pyx_t_4); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ChessAI - Copy.pyx":1349
 *         alpha = max(alpha, highestScore)
 *         alpha_list.append(highestScore)
 *         beta_list.append(cur_beta_list)             # <<<<<<<<<<<<<<
 *         beta_move_list.append(cur_beta_move_list)
 *         # print(0,highestScore,alpha, moves_list[0])
 */
  __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_beta_list, __pyx_v_cur_beta_list); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1349, __pyx_L1_error)

  /* "ChessAI - Copy.pyx":1350
 *         alpha_list.append(highestScore)
 *         beta_list.append(cur_beta_list)
 *         beta_move_list.append(cur_beta_move_list)             # <<<<<<<<<<<<<<
 *         # print(0,highestScore,alpha, moves_list[0])
 *         for move in moves_list[1:]:
 */
  __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_beta_move_list, __pyx_v_cur_beta_move_list); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1350, __pyx_L1_error)

  /* "ChessAI - Copy.pyx":1352
 *         beta_move_list.append(cur_beta_move_list)
 *         # print(0,highestScore,alpha, moves_list[0])
 *         for move in moves_list[1:]:             # <<<<<<<<<<<<<<
 * 
 *             if (move.promotion):
 */
  if (unlikely(__pyx_v_moves_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1352, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyList_GetSlice(__pyx_v_moves_list, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __pyx_t_4; __Pyx_INCREF(__pyx_t_8); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_8)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_16); __Pyx_INCREF(__pyx_t_4); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 1352, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_move, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ChessAI - Copy.pyx":1354
 *         for move in moves_list[1:]:
 * 
 *             if (move.promotion):             # <<<<<<<<<<<<<<
 *                 promotion = move.promotion
 *             else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1354, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_12) {

      /* "ChessAI - Copy.pyx":1355
 * 
 *             if (move.promotion):
 *                 promotion = move.promotion             # <<<<<<<<<<<<<<
 *             else:
 *                 promotion = 0
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1355, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1355, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_promotion = __pyx_t_14;

      /* "ChessAI - Copy.pyx":1354
 *         for move in moves_list[1:]:
 * 
 *             if (move.promotion):             # <<<<<<<<<<<<<<
 *                 promotion = move.promotion
 *             else:
 */
      goto __pyx_L7;
    }

    /* "ChessAI - Copy.pyx":1357
 *                 promotion = move.promotion
 *             else:
 *                 promotion = 0             # <<<<<<<<<<<<<<
 * 
 *             isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))
 */
    /*else*/ {
      __pyx_v_promotion = 0;
    }
    __pyx_L7:;

    /* "ChessAI - Copy.pyx":1359
 *                 promotion = 0
 * 
 *             isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))             # <<<<<<<<<<<<<<
 *             updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = __Pyx_PyInt_As_uint8_t(__pyx_t_4); if (unlikely((__pyx_t_10 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = __Pyx_PyInt_As_uint8_t(__pyx_t_4); if (unlikely((__pyx_t_11 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_turn); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_5 = (!__pyx_t_12);
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_4, __pyx_t_5, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_9); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_is_en_passant); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_9 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_move);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_isCapture = is_capture(__pyx_t_10, __pyx_t_11, __pyx_t_3, __pyx_t_5);

    /* "ChessAI - Copy.pyx":1360
 * 
 *             isCapture = is_capture(move.from_square, move.to_square, self.pgnBoard.occupied_co[not self.pgnBoard.turn], self.pgnBoard.is_en_passant(move))
 *             updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)             # <<<<<<<<<<<<<<
 * 
 *             self.pgnBoard.push(move)
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = __Pyx_PyInt_As_uint8_t(__pyx_t_9); if (unlikely((__pyx_t_11 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1360, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyInt_As_uint8_t(__pyx_t_9); if (unlikely((__pyx_t_10 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1360, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    updateZobristHashForMove(__pyx_v_self->zobrist, __pyx_t_11, __pyx_t_10, __pyx_v_isCapture, __pyx_v_pawns, __pyx_v_knights, __pyx_v_bishops, __pyx_v_rooks, __pyx_v_queens, __pyx_v_kings, __pyx_v_occupied_white, __pyx_v_occupied_black, __pyx_v_promotion);

    /* "ChessAI - Copy.pyx":1362
 *             updateZobristHashForMove(self.zobrist, move.from_square, move.to_square, isCapture, pawns, knights, bishops, rooks, queens, kings, occupied_white, occupied_black, promotion)
 * 
 *             self.pgnBoard.push(move)             # <<<<<<<<<<<<<<
 * 
 *             score, cur_beta_list, cur_beta_move_list = self.preMinimizer(1, depth, alpha, alpha + 1)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->pgnBoard, __pyx_n_s_push); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_9 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_move);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "ChessAI - Copy.pyx":1364
 *             self.pgnBoard.push(move)
 * 
 *             score, cur_beta_list, cur_beta_move_list = self.preMinimizer(1, depth, alpha, alpha + 1)             # <<<<<<<<<<<<<<
 * 
 *             # If the score is within the window, re-search with full window
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->preMinimizer(__pyx_v_self, 1, __pyx_v_depth, __pyx_v_alpha, (__pyx_v_alpha + 1)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (likely(__pyx_t_9 != Py_None)) {
      PyObject* sequence = __pyx_t_9;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1364, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1364, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1364, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1364, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 1364, __pyx_L1_error)
    }
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 1364, __pyx_L1_error)
    if (!(likely(PyList_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 1364, __pyx_L1_error)
    __pyx_v_score = __pyx_t_14;
    __Pyx_DECREF_SET(__pyx_v_cur_beta_list, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_cur_beta_move_list, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "ChessAI - Copy.pyx":1367
 * 
 *             # If the score is within the window, re-search with full window
 *             if alpha < score and score < beta:             # <<<<<<<<<<<<<<
 *                 score, cur_beta_list, cur_beta_move_list = self.preMinimizer(1, depth, alpha, beta)
 * 
 */
    __pyx_t_12 = ((__pyx_v_alpha < __pyx_v_score) != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_5 = __pyx_t_12;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_12 = ((__pyx_v_score < __pyx_v_beta) != 0);
    __pyx_t_5 = __pyx_t_12;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_5) {

      /* "ChessAI - Copy.pyx":1368
 *             # If the score is within the window, re-search with full window
 *             if alpha < score and score < beta:
 *                 score, cur_beta_list, cur_beta_move_list = self.preMinimizer(1, depth, alpha, beta)             # <<<<<<<<<<<<<<
 * 
 *             self.pgnBoard.pop()
 */
      __pyx_t_9 = ((struct __pyx_vtabstruct_7ChessAI_ChessAI *)__pyx_v_self->__pyx_vtab)->preMinimizer(__pyx_v_self, 1, __pyx_v_depth, __pyx_v_alpha, __pyx_v_beta); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (likely(__pyx_t_9 != Py_None)) {
        PyObject* sequence = __pyx_t_9;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1368, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        #else
        __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1368, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1368, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1368, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 1368, __pyx_L1_error)
      }
      __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1368, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 1368, __pyx_L1_error)
      if (!(likely(PyList_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 1368, __pyx_L1_error)
      __pyx_v_score = __pyx_t_14;
      __Pyx_DECREF_SET(__pyx_v_cur_beta_list, ((PyObject*)__pyx_t_6));
      __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_cur_beta_move_list, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "ChessAI - Copy.pyx":1367
 * 
 *             # If the score is within the window, re-search with full window
 *             if alpha < score and score < beta:             # <<<<<<<<<<<<<<
 *                 score, cur_beta_list, cur_beta_move_list = self.preMinimizer(1, depth, alpha, beta)
 * 
 */
    }

    /* "ChessAI - Copy.pyx":1370
 *                 score, cur_beta_list, cur_beta_move_list = self.preMinimizer(1, depth, alpha, beta)
 * 
 *             self.pgnBoard.pop()             # <<<<<<<<<<<<<<
 *             self.zobrist = curHash
 *             alpha_list.append(score)
 */
    __pyx_t_9 = __Pyx_PyObject_Pop(__pyx_v_self->pgnBoard); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "ChessAI - Copy.pyx":1371
 * 
 *             self.pgnBoard.pop()
 *             self.zobrist = curHash             # <<<<<<<<<<<<<<
 *             alpha_list.append(score)
 *             beta_list.append(cur_beta_list)
 */
    __pyx_v_self->zobrist = __pyx_v_curHash;

    /* "ChessAI - Copy.pyx":1372
 *             self.pgnBoard.pop()
 *             self.zobrist = curHash
 *             alpha_list.append(score)             # <<<<<<<<<<<<<<
 *             beta_list.append(cur_beta_list)
 *             beta_move_list.append(cur_beta_move_list)
 */
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_score); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_alpha_list, __pyx_t_9); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1372, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "ChessAI - Copy.pyx":1373
 *             self.zobrist = curHash
 *             alpha_list.append(score)
 *             beta_list.append(cur_beta_list)             # <<<<<<<<<<<<<<
 *             beta_move_list.append(cur_beta_move_list)
 *             # print(count,score,alpha, move)
 */
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_beta_list, __pyx_v_cur_beta_list); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1373, __pyx_L1_error)

    /* "ChessAI - Copy.pyx":1374
 *             alpha_list.append(score)
 *             beta_list.append(cur_beta_list)
 *             beta_move_list.append(cur_beta_move_list)             # <<<<<<<<<<<<<<
 *             # print(count,score,alpha, move)
 *             if score > highestScore:
 */
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_beta_move_list, __pyx_v_cur_beta_move_list); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1374, __pyx_L1_error)

    /* "ChessAI - Copy.pyx":1376
 *             beta_move_list.append(cur_beta_move_list)
 *             # print(count,score,alpha, move)
 *             if score > highestScore:             # <<<<<<<<<<<<<<
 *                 highestScore = score
 *             count += 1
 */
    __pyx_t_5 = ((__pyx_v_score > __pyx_v_highestScore) != 0);
    if (__pyx_t_5) {

      /* "ChessAI - Copy.pyx":1377
 *             # print(count,score,alpha, move)
 *             if score > highestScore:
 *                 highestScore = score             # <<<<<<<<<<<<<<
 *             count += 1
 *             alpha = max(alpha, highestScore)
 */
      __pyx_v_highestScore = __pyx_v_score;

      /* "ChessAI - Copy.pyx":1376
 *             beta_move_list.append(cur_beta_move_list)
 *             # print(count,score,alpha, move)
 *             if score > highestScore:             # <<<<<<<<<<<<<<
 *                 highestScore = score
 *             count += 1
 */
    }

    /* "ChessAI - Copy.pyx":1378
 *             if score > highestScore:
 *                 highestScore = score
 *             count += 1             # <<<<<<<<<<<<<<
 *             alpha = max(alpha, highestScore)
 * 
 */
    __pyx_v_count = (__pyx_v_count + 1);

    /* "ChessAI - Copy.pyx":1379
 *                 highestScore = score
 *             count += 1
 *             alpha = max(alpha, highestScore)             # <<<<<<<<<<<<<<
 * 
 *         if (self.alpha_list == []):
 */
    __pyx_t_14 = __pyx_v_highestScore;
    __pyx_t_2 = __pyx_v_alpha;
    if (((__pyx_t_14 > __pyx_t_2) != 0)) {
      __pyx_t_13 = __pyx_t_14;
    } else {
      __pyx_t_13 = __pyx_t_2;
    }
    __pyx_v_alpha = __pyx_t_13;

    /* "ChessAI - Copy.pyx":1352
 *         beta_move_list.append(cur_beta_move_list)
 *         # print(0,highestScore,alpha, moves_list[0])
 *         for move in moves_list[1:]:             # <<<<<<<<<<<<<<
 * 
 *             if (move.promotion):
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "ChessAI - Copy.pyx":1381
 *             alpha = max(alpha, highestScore)
 * 
 *         if (self.alpha_list == []):             # <<<<<<<<<<<<<<
 *             quicksort(alpha_list, moves_list, beta_list, beta_move_list, 0, len(alpha_list) - 1)
 *             return moves_list,alpha_list,beta_list,beta_move_list
 */
  __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyObject_RichCompare(__pyx_v_self->alpha_list, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1381, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1381, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (__pyx_t_5) {

    /* "ChessAI - Copy.pyx":1382
 * 
 *         if (self.alpha_list == []):
 *             quicksort(alpha_list, moves_list, beta_list, beta_move_list, 0, len(alpha_list) - 1)             # <<<<<<<<<<<<<<
 *             return moves_list,alpha_list,beta_list,beta_move_list
 *         else:
 */
    __pyx_t_16 = PyList_GET_SIZE(__pyx_v_alpha_list); if (unlikely(__pyx_t_16 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1382, __pyx_L1_error)
    __pyx_f_7ChessAI_quicksort(__pyx_v_alpha_list, __pyx_v_moves_list, __pyx_v_beta_list, __pyx_v_beta_move_list, 0, (__pyx_t_16 - 1));

    /* "ChessAI - Copy.pyx":1383
 *         if (self.alpha_list == []):
 *             quicksort(alpha_list, moves_list, beta_list, beta_move_list, 0, len(alpha_list) - 1)
 *             return moves_list,alpha_list,beta_list,beta_move_list             # <<<<<<<<<<<<<<
 *         else:
 *             # print(self.beta_list, len(self.beta_list))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v_moves_list);
    __Pyx_GIVEREF(__pyx_v_moves_list);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_moves_list);
    __Pyx_INCREF(__pyx_v_alpha_list);
    __Pyx_GIVEREF(__pyx_v_alpha_list);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_alpha_list);
    __Pyx_INCREF(__pyx_v_beta_list);
    __Pyx_GIVEREF(__pyx_v_beta_list);
    PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_v_beta_list);
    __Pyx_INCREF(__pyx_v_beta_move_list);
    __Pyx_GIVEREF(__pyx_v_beta_move_list);
    PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_v_beta_move_list);
    __pyx_r = ((PyObject*)__pyx_t_9);
    __pyx_t_9 = 0;
    goto __pyx_L0;

    /* "ChessAI - Copy.pyx":1381
 *             alpha = max(alpha, highestScore)
 * 
 *         if (self.alpha_list == []):             # <<<<<<<<<<<<<<
 *             quicksort(alpha_list, moves_list, beta_list, beta_move_list, 0, len(alpha_list) - 1)
 *             return moves_list,alpha_list,beta_list,beta_move_list
 */
  }

  /* "ChessAI - Copy.pyx":1386
 *         else:
 *             # print(self.beta_list, len(self.beta_list))
 *             quicksort_wrapper(self.alpha_list, moves_list, self.beta_list, self.beta_move_list, alpha_list,beta_list, beta_move_list)             # <<<<<<<<<<<<<<
 *             # print()
 *             # print(self.beta_list, len(self.beta_list), len(moves_list), len(self.alpha_list), len(beta_list), len(alpha_list))
 */
  /*else*/ {
    __pyx_t_9 = __pyx_v_self->alpha_list;
    __Pyx_INCREF(__pyx_t_9);
    __pyx_t_8 = __pyx_v_self->beta_list;
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_4 = __pyx_v_self->beta_move_list;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_f_7ChessAI_quicksort_wrapper(((PyObject*)__pyx_t_9), __pyx_v_moves_list, ((PyObject*)__pyx_t_8), ((PyObject*)__pyx_t_4), __pyx_v_alpha_list, __pyx_v_beta_list, __pyx_v_beta_move_list);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ChessAI - Copy.pyx":1389
 *             # print()
 *             # print(self.beta_list, len(self.beta_list), len(moves_list), len(self.alpha_list), len(beta_list), len(alpha_list))
 *             return moves_list,self.alpha_list,self.beta_list,self.beta_move_list             # <<<<<<<<<<<<<<
 * 
 *         # quicksort(alpha_list, moves_list, beta_list, 0, len(alpha_list) - 1)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_moves_list);
    __Pyx_GIVEREF(__pyx_v_moves_list);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_moves_list);
    __Pyx_INCREF(__pyx_v_self->alpha_list);
    __Pyx_GIVEREF(__pyx_v_self->alpha_list);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_self->alpha_list);
    __Pyx_INCREF(__pyx_v_self->beta_list);
    __Pyx_GIVEREF(__pyx_v_self->beta_list);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_self->beta_list);
    __Pyx_INCREF(__pyx_v_self->beta_move_list);
    __Pyx_GIVEREF(__pyx_v_self->beta_move_list);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_self->beta_move_list);
    __pyx_r = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "ChessAI - Copy.pyx":1287
 *     @cython.ccall
 *     @cython.inline
 *     cdef tuple reorder_legal_moves(self,int alpha,int beta, depthLimit):             # <<<<<<<<<<<<<<
 * 
 *         # Define variables to hold current scores, moves. index and highest score
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ChessAI.ChessAI.reorder_legal_moves", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_move);
  __Pyx_XDECREF(__pyx_v_moves_list);
  __Pyx_XDECREF(__pyx_v_alpha_list);
  __Pyx_XDECREF(__pyx_v_beta_list);
  __Pyx_XDECREF(__pyx_v_cur_beta_list);
  __Pyx_XDECREF(__pyx_v_beta_move_list);
  __Pyx_XDECREF(__pyx_v_cur_beta_move_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7ChessAI_7ChessAI_12generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ChessAI - Copy.pyx":1393
 *         # quicksort(alpha_list, moves_list, beta_list, 0, len(alpha_list) - 1)
 *         # return moves_list,alpha_list,beta_list
 *     def reorder_capture_moves(self, uint64_t mask, object board) -> Iterator[chess.Move]:             # <<<<<<<<<<<<<<
 * 
 *         cdef object move
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ChessAI_7ChessAI_11reorder_capture_moves(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7ChessAI_7ChessAI_11reorder_capture_moves(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_mask;
  PyObject *__pyx_v_board = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reorder_capture_moves (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mask,&__pyx_n_s_board,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mask)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_board)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reorder_capture_moves", 1, 2, 2, 1); __PYX_ERR(0, 1393, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reorder_capture_moves") < 0)) __PYX_ERR(0, 1393, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_mask = __Pyx_PyInt_As_uint64_t(values[0]); if (unlikely((__pyx_v_mask == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1393, __pyx_L3_error)
    __pyx_v_board = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reorder_capture_moves", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1393, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ChessAI.ChessAI.reorder_capture_moves", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7ChessAI_7ChessAI_10reorder_capture_moves(((struct __pyx_obj_7ChessAI_ChessAI *)__pyx_v_self), __pyx_v_mask, __pyx_v_board);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ChessAI_7ChessAI_10reorder_capture_moves(CYTHON_UNUSED struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, uint64_t __pyx_v_mask, PyObject *__pyx_v_board) {
  struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reorder_capture_moves", 0);
  __pyx_cur_scope = (struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves *)__pyx_tp_new_7ChessAI___pyx_scope_struct__reorder_capture_moves(__pyx_ptype_7ChessAI___pyx_scope_struct__reorder_capture_moves, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1393, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_mask = __pyx_v_mask;
  __pyx_cur_scope->__pyx_v_board = __pyx_v_board;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_board);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_board);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7ChessAI_7ChessAI_12generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_reorder_capture_moves, __pyx_n_s_ChessAI_reorder_capture_moves, __pyx_n_s_ChessAI); if (unlikely(!gen)) __PYX_ERR(0, 1393, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ChessAI.ChessAI.reorder_capture_moves", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7ChessAI_7ChessAI_12generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves *__pyx_cur_scope = ((struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  uint8_t __pyx_t_10;
  uint8_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  uint64_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reorder_capture_moves", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    case 2: goto __pyx_L10_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1393, __pyx_L1_error)

  /* "ChessAI - Copy.pyx":1397
 *         cdef object move
 * 
 *         for move in Cython_Chess.generate_legal_captures(board,mask,chess.BB_ALL):             # <<<<<<<<<<<<<<
 *             yield move
 *         for move in Cython_Chess.generate_legal_moves(board,mask,chess.BB_ALL):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Cython_Chess); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_generate_legal_captures); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_cur_scope->__pyx_v_mask); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_chess); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_BB_ALL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_cur_scope->__pyx_v_board, __pyx_t_2, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1397, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_cur_scope->__pyx_v_board, __pyx_t_2, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1397, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_board);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_board);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_cur_scope->__pyx_v_board);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_t_5);
    __pyx_t_2 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1397, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1397, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1397, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_9(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1397, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_move);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_move, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ChessAI - Copy.pyx":1398
 * 
 *         for move in Cython_Chess.generate_legal_captures(board,mask,chess.BB_ALL):
 *             yield move             # <<<<<<<<<<<<<<
 *         for move in Cython_Chess.generate_legal_moves(board,mask,chess.BB_ALL):
 *             if not is_capture(move.from_square, move.to_square, board.occupied_co[not board.turn], board.is_en_passant(move)):
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_move);
    __pyx_r = __pyx_cur_scope->__pyx_v_move;
    __Pyx_XGIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_8;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_9;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_9 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1398, __pyx_L1_error)

    /* "ChessAI - Copy.pyx":1397
 *         cdef object move
 * 
 *         for move in Cython_Chess.generate_legal_captures(board,mask,chess.BB_ALL):             # <<<<<<<<<<<<<<
 *             yield move
 *         for move in Cython_Chess.generate_legal_moves(board,mask,chess.BB_ALL):
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ChessAI - Copy.pyx":1399
 *         for move in Cython_Chess.generate_legal_captures(board,mask,chess.BB_ALL):
 *             yield move
 *         for move in Cython_Chess.generate_legal_moves(board,mask,chess.BB_ALL):             # <<<<<<<<<<<<<<
 *             if not is_capture(move.from_square, move.to_square, board.occupied_co[not board.turn], board.is_en_passant(move)):
 *                 yield move
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Cython_Chess); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_generate_legal_moves); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_cur_scope->__pyx_v_mask); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_chess); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_BB_ALL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_board, __pyx_t_1, __pyx_t_2};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1399, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_board, __pyx_t_1, __pyx_t_2};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1399, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_board);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_board);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_cur_scope->__pyx_v_board);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_6, __pyx_t_2);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_7 = __pyx_t_3; __Pyx_INCREF(__pyx_t_7); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1399, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1399, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1399, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_9(__pyx_t_7);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1399, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_move);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_move, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "ChessAI - Copy.pyx":1400
 *             yield move
 *         for move in Cython_Chess.generate_legal_moves(board,mask,chess.BB_ALL):
 *             if not is_capture(move.from_square, move.to_square, board.occupied_co[not board.turn], board.is_en_passant(move)):             # <<<<<<<<<<<<<<
 *                 yield move
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyInt_As_uint8_t(__pyx_t_3); if (unlikely((__pyx_t_10 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyInt_As_uint8_t(__pyx_t_3); if (unlikely((__pyx_t_11 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_board, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_board, __pyx_n_s_turn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_13 = (!__pyx_t_12);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, __pyx_t_13, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_14 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_14 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_board, __pyx_n_s_is_en_passant); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_cur_scope->__pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_cur_scope->__pyx_v_move);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_12 = ((!(is_capture(__pyx_t_10, __pyx_t_11, __pyx_t_14, __pyx_t_13) != 0)) != 0);
    if (__pyx_t_12) {

      /* "ChessAI - Copy.pyx":1401
 *         for move in Cython_Chess.generate_legal_moves(board,mask,chess.BB_ALL):
 *             if not is_capture(move.from_square, move.to_square, board.occupied_co[not board.turn], board.is_en_passant(move)):
 *                 yield move             # <<<<<<<<<<<<<<
 * 
 *     def non_quiescence_moves(self, object board) -> Iterator[chess.Move]:
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_move);
      __pyx_r = __pyx_cur_scope->__pyx_v_move;
      __Pyx_XGIVEREF(__pyx_t_7);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_7;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_8;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_9;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L10_resume_from_yield:;
      __pyx_t_7 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_7);
      __pyx_t_8 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_9 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1401, __pyx_L1_error)

      /* "ChessAI - Copy.pyx":1400
 *             yield move
 *         for move in Cython_Chess.generate_legal_moves(board,mask,chess.BB_ALL):
 *             if not is_capture(move.from_square, move.to_square, board.occupied_co[not board.turn], board.is_en_passant(move)):             # <<<<<<<<<<<<<<
 *                 yield move
 * 
 */
    }

    /* "ChessAI - Copy.pyx":1399
 *         for move in Cython_Chess.generate_legal_captures(board,mask,chess.BB_ALL):
 *             yield move
 *         for move in Cython_Chess.generate_legal_moves(board,mask,chess.BB_ALL):             # <<<<<<<<<<<<<<
 *             if not is_capture(move.from_square, move.to_square, board.occupied_co[not board.turn], board.is_en_passant(move)):
 *                 yield move
 */
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ChessAI - Copy.pyx":1393
 *         # quicksort(alpha_list, moves_list, beta_list, 0, len(alpha_list) - 1)
 *         # return moves_list,alpha_list,beta_list
 *     def reorder_capture_moves(self, uint64_t mask, object board) -> Iterator[chess.Move]:             # <<<<<<<<<<<<<<
 * 
 *         cdef object move
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("reorder_capture_moves", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7ChessAI_7ChessAI_15generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ChessAI - Copy.pyx":1403
 *                 yield move
 * 
 *     def non_quiescence_moves(self, object board) -> Iterator[chess.Move]:             # <<<<<<<<<<<<<<
 * 
 *         cdef object move
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ChessAI_7ChessAI_14non_quiescence_moves(PyObject *__pyx_v_self, PyObject *__pyx_v_board); /*proto*/
static PyObject *__pyx_pw_7ChessAI_7ChessAI_14non_quiescence_moves(PyObject *__pyx_v_self, PyObject *__pyx_v_board) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("non_quiescence_moves (wrapper)", 0);
  __pyx_r = __pyx_pf_7ChessAI_7ChessAI_13non_quiescence_moves(((struct __pyx_obj_7ChessAI_ChessAI *)__pyx_v_self), ((PyObject *)__pyx_v_board));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ChessAI_7ChessAI_13non_quiescence_moves(CYTHON_UNUSED struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, PyObject *__pyx_v_board) {
  struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("non_quiescence_moves", 0);
  __pyx_cur_scope = (struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves *)__pyx_tp_new_7ChessAI___pyx_scope_struct_1_non_quiescence_moves(__pyx_ptype_7ChessAI___pyx_scope_struct_1_non_quiescence_moves, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1403, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_board = __pyx_v_board;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_board);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_board);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7ChessAI_7ChessAI_15generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_non_quiescence_moves, __pyx_n_s_ChessAI_non_quiescence_moves, __pyx_n_s_ChessAI); if (unlikely(!gen)) __PYX_ERR(0, 1403, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ChessAI.ChessAI.non_quiescence_moves", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7ChessAI_7ChessAI_15generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves *__pyx_cur_scope = ((struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  uint8_t __pyx_t_11;
  uint8_t __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  uint64_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("non_quiescence_moves", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L10_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1403, __pyx_L1_error)

  /* "ChessAI - Copy.pyx":1407
 *         cdef object move
 * 
 *         for move in Cython_Chess.generate_legal_moves(board,chess.BB_ALL,chess.BB_ALL):             # <<<<<<<<<<<<<<
 *             if (is_capture(move.from_square, move.to_square, board.occupied_co[not board.turn], board.is_en_passant(move)) or board.gives_check(move)) or move.promotion:
 *                 yield move
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Cython_Chess); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_generate_legal_moves); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_chess); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_BB_ALL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_chess); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_BB_ALL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_cur_scope->__pyx_v_board, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1407, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_cur_scope->__pyx_v_board, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1407, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_board);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_board);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_cur_scope->__pyx_v_board);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1407, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1407, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1407, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1407, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1407, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_9(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1407, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_move);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_move, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ChessAI - Copy.pyx":1408
 * 
 *         for move in Cython_Chess.generate_legal_moves(board,chess.BB_ALL,chess.BB_ALL):
 *             if (is_capture(move.from_square, move.to_square, board.occupied_co[not board.turn], board.is_en_passant(move)) or board.gives_check(move)) or move.promotion:             # <<<<<<<<<<<<<<
 *                 yield move
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyInt_As_uint8_t(__pyx_t_1); if (unlikely((__pyx_t_11 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = __Pyx_PyInt_As_uint8_t(__pyx_t_1); if (unlikely((__pyx_t_12 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_board, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_board, __pyx_n_s_turn); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_14 = (!__pyx_t_13);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_14, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_15 = __Pyx_PyInt_As_uint64_t(__pyx_t_7); if (unlikely((__pyx_t_15 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_board, __pyx_n_s_is_en_passant); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_cur_scope->__pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_cur_scope->__pyx_v_move);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_13 = (is_capture(__pyx_t_11, __pyx_t_12, __pyx_t_15, __pyx_t_14) != 0);
    if (!__pyx_t_13) {
    } else {
      __pyx_t_10 = __pyx_t_13;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_board, __pyx_n_s_gives_check); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_cur_scope->__pyx_v_move) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_cur_scope->__pyx_v_move);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!__pyx_t_13) {
    } else {
      __pyx_t_10 = __pyx_t_13;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_move, __pyx_n_s_promotion); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = __pyx_t_13;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_10) {

      /* "ChessAI - Copy.pyx":1409
 *         for move in Cython_Chess.generate_legal_moves(board,chess.BB_ALL,chess.BB_ALL):
 *             if (is_capture(move.from_square, move.to_square, board.occupied_co[not board.turn], board.is_en_passant(move)) or board.gives_check(move)) or move.promotion:
 *                 yield move             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_move);
      __pyx_r = __pyx_cur_scope->__pyx_v_move;
      __Pyx_XGIVEREF(__pyx_t_3);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_8;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_9;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L10_resume_from_yield:;
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_3);
      __pyx_t_8 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_9 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1409, __pyx_L1_error)

      /* "ChessAI - Copy.pyx":1408
 * 
 *         for move in Cython_Chess.generate_legal_moves(board,chess.BB_ALL,chess.BB_ALL):
 *             if (is_capture(move.from_square, move.to_square, board.occupied_co[not board.turn], board.is_en_passant(move)) or board.gives_check(move)) or move.promotion:             # <<<<<<<<<<<<<<
 *                 yield move
 * 
 */
    }

    /* "ChessAI - Copy.pyx":1407
 *         cdef object move
 * 
 *         for move in Cython_Chess.generate_legal_moves(board,chess.BB_ALL,chess.BB_ALL):             # <<<<<<<<<<<<<<
 *             if (is_capture(move.from_square, move.to_square, board.occupied_co[not board.turn], board.is_en_passant(move)) or board.gives_check(move)) or move.promotion:
 *                 yield move
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ChessAI - Copy.pyx":1403
 *                 yield move
 * 
 *     def non_quiescence_moves(self, object board) -> Iterator[chess.Move]:             # <<<<<<<<<<<<<<
 * 
 *         cdef object move
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("non_quiescence_moves", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ChessAI_7ChessAI_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7ChessAI_7ChessAI_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ChessAI_7ChessAI_16__reduce_cython__(((struct __pyx_obj_7ChessAI_ChessAI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ChessAI_7ChessAI_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ChessAI.ChessAI.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ChessAI_7ChessAI_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7ChessAI_7ChessAI_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ChessAI_7ChessAI_18__setstate_cython__(((struct __pyx_obj_7ChessAI_ChessAI *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ChessAI_7ChessAI_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7ChessAI_ChessAI *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ChessAI.ChessAI.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ChessAI - Copy.pyx":1412
 * 
 * 
 * cdef void quicksort(list values, list objects, list betas, list betaMoves, int left, int right):             # <<<<<<<<<<<<<<
 *     if left >= right:
 *         return
 */

static void __pyx_f_7ChessAI_quicksort(PyObject *__pyx_v_values, PyObject *__pyx_v_objects, PyObject *__pyx_v_betas, PyObject *__pyx_v_betaMoves, int __pyx_v_left, int __pyx_v_right) {
  PyObject *__pyx_v_pivot = NULL;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_temp_value;
  PyObject *__pyx_v_temp_object = 0;
  PyObject *__pyx_v_temp_list = 0;
  PyObject *__pyx_v_temp_moves_list = 0;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  long __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("quicksort", 0);

  /* "ChessAI - Copy.pyx":1413
 * 
 * cdef void quicksort(list values, list objects, list betas, list betaMoves, int left, int right):
 *     if left >= right:             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_t_1 = ((__pyx_v_left >= __pyx_v_right) != 0);
  if (__pyx_t_1) {

    /* "ChessAI - Copy.pyx":1414
 * cdef void quicksort(list values, list objects, list betas, list betaMoves, int left, int right):
 *     if left >= right:
 *         return             # <<<<<<<<<<<<<<
 * 
 *     pivot = values[left + (right - left) // 2]
 */
    goto __pyx_L0;

    /* "ChessAI - Copy.pyx":1413
 * 
 * cdef void quicksort(list values, list objects, list betas, list betaMoves, int left, int right):
 *     if left >= right:             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  }

  /* "ChessAI - Copy.pyx":1416
 *         return
 * 
 *     pivot = values[left + (right - left) // 2]             # <<<<<<<<<<<<<<
 *     cdef int i = left
 *     cdef int j = right
 */
  if (unlikely(__pyx_v_values == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1416, __pyx_L1_error)
  }
  __pyx_t_2 = (__pyx_v_left + ((__pyx_v_right - __pyx_v_left) / 2));
  __pyx_t_3 = PyList_GET_ITEM(__pyx_v_values, __pyx_t_2);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_pivot = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ChessAI - Copy.pyx":1417
 * 
 *     pivot = values[left + (right - left) // 2]
 *     cdef int i = left             # <<<<<<<<<<<<<<
 *     cdef int j = right
 *     cdef int temp_value
 */
  __pyx_v_i = __pyx_v_left;

  /* "ChessAI - Copy.pyx":1418
 *     pivot = values[left + (right - left) // 2]
 *     cdef int i = left
 *     cdef int j = right             # <<<<<<<<<<<<<<
 *     cdef int temp_value
 *     cdef object temp_object
 */
  __pyx_v_j = __pyx_v_right;

  /* "ChessAI - Copy.pyx":1424
 *     cdef list temp_moves_list
 * 
 *     while i <= j:             # <<<<<<<<<<<<<<
 *         while values[i] > pivot:
 *             i += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i <= __pyx_v_j) != 0);
    if (!__pyx_t_1) break;

    /* "ChessAI - Copy.pyx":1425
 * 
 *     while i <= j:
 *         while values[i] > pivot:             # <<<<<<<<<<<<<<
 *             i += 1
 *         while values[j] < pivot:
 */
    while (1) {
      if (unlikely(__pyx_v_values == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1425, __pyx_L1_error)
      }
      __pyx_t_3 = PyObject_RichCompare(PyList_GET_ITEM(__pyx_v_values, __pyx_v_i), __pyx_v_pivot, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1425, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1425, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_1) break;

      /* "ChessAI - Copy.pyx":1426
 *     while i <= j:
 *         while values[i] > pivot:
 *             i += 1             # <<<<<<<<<<<<<<
 *         while values[j] < pivot:
 *             j -= 1
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "ChessAI - Copy.pyx":1427
 *         while values[i] > pivot:
 *             i += 1
 *         while values[j] < pivot:             # <<<<<<<<<<<<<<
 *             j -= 1
 * 
 */
    while (1) {
      if (unlikely(__pyx_v_values == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1427, __pyx_L1_error)
      }
      __pyx_t_3 = PyObject_RichCompare(PyList_GET_ITEM(__pyx_v_values, __pyx_v_j), __pyx_v_pivot, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1427, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1427, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_1) break;

      /* "ChessAI - Copy.pyx":1428
 *             i += 1
 *         while values[j] < pivot:
 *             j -= 1             # <<<<<<<<<<<<<<
 * 
 *         if i <= j:
 */
      __pyx_v_j = (__pyx_v_j - 1);
    }

    /* "ChessAI - Copy.pyx":1430
 *             j -= 1
 * 
 *         if i <= j:             # <<<<<<<<<<<<<<
 *             # Swap values
 *             temp_value = values[i]
 */
    __pyx_t_1 = ((__pyx_v_i <= __pyx_v_j) != 0);
    if (__pyx_t_1) {

      /* "ChessAI - Copy.pyx":1432
 *         if i <= j:
 *             # Swap values
 *             temp_value = values[i]             # <<<<<<<<<<<<<<
 *             values[i] = values[j]
 *             values[j] = temp_value
 */
      if (unlikely(__pyx_v_values == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1432, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_values, __pyx_v_i)); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1432, __pyx_L1_error)
      __pyx_v_temp_value = __pyx_t_4;

      /* "ChessAI - Copy.pyx":1433
 *             # Swap values
 *             temp_value = values[i]
 *             values[i] = values[j]             # <<<<<<<<<<<<<<
 *             values[j] = temp_value
 * 
 */
      if (unlikely(__pyx_v_values == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1433, __pyx_L1_error)
      }
      __pyx_t_3 = PyList_GET_ITEM(__pyx_v_values, __pyx_v_j);
      __Pyx_INCREF(__pyx_t_3);
      if (unlikely(__pyx_v_values == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1433, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_values, __pyx_v_i, __pyx_t_3, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 1433, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ChessAI - Copy.pyx":1434
 *             temp_value = values[i]
 *             values[i] = values[j]
 *             values[j] = temp_value             # <<<<<<<<<<<<<<
 * 
 *             # Swap objects
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_temp_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__pyx_v_values == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1434, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_values, __pyx_v_j, __pyx_t_3, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 1434, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ChessAI - Copy.pyx":1437
 * 
 *             # Swap objects
 *             temp_object = objects[i]             # <<<<<<<<<<<<<<
 *             objects[i] = objects[j]
 *             objects[j] = temp_object
 */
      if (unlikely(__pyx_v_objects == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1437, __pyx_L1_error)
      }
      __pyx_t_3 = PyList_GET_ITEM(__pyx_v_objects, __pyx_v_i);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_temp_object, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "ChessAI - Copy.pyx":1438
 *             # Swap objects
 *             temp_object = objects[i]
 *             objects[i] = objects[j]             # <<<<<<<<<<<<<<
 *             objects[j] = temp_object
 * 
 */
      if (unlikely(__pyx_v_objects == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1438, __pyx_L1_error)
      }
      __pyx_t_3 = PyList_GET_ITEM(__pyx_v_objects, __pyx_v_j);
      __Pyx_INCREF(__pyx_t_3);
      if (unlikely(__pyx_v_objects == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1438, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_objects, __pyx_v_i, __pyx_t_3, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 1438, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ChessAI - Copy.pyx":1439
 *             temp_object = objects[i]
 *             objects[i] = objects[j]
 *             objects[j] = temp_object             # <<<<<<<<<<<<<<
 * 
 *             # Swap lists
 */
      if (unlikely(__pyx_v_objects == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1439, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_objects, __pyx_v_j, __pyx_v_temp_object, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 1439, __pyx_L1_error)

      /* "ChessAI - Copy.pyx":1442
 * 
 *             # Swap lists
 *             temp_list = betas[i]             # <<<<<<<<<<<<<<
 *             betas[i] = betas[j]
 *             betas[j] = temp_list
 */
      if (unlikely(__pyx_v_betas == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1442, __pyx_L1_error)
      }
      if (!(likely(PyList_CheckExact(PyList_GET_ITEM(__pyx_v_betas, __pyx_v_i)))||((PyList_GET_ITEM(__pyx_v_betas, __pyx_v_i)) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(PyList_GET_ITEM(__pyx_v_betas, __pyx_v_i))->tp_name), 0))) __PYX_ERR(0, 1442, __pyx_L1_error)
      __pyx_t_3 = PyList_GET_ITEM(__pyx_v_betas, __pyx_v_i);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_temp_list, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "ChessAI - Copy.pyx":1443
 *             # Swap lists
 *             temp_list = betas[i]
 *             betas[i] = betas[j]             # <<<<<<<<<<<<<<
 *             betas[j] = temp_list
 * 
 */
      if (unlikely(__pyx_v_betas == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1443, __pyx_L1_error)
      }
      __pyx_t_3 = PyList_GET_ITEM(__pyx_v_betas, __pyx_v_j);
      __Pyx_INCREF(__pyx_t_3);
      if (unlikely(__pyx_v_betas == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1443, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_betas, __pyx_v_i, __pyx_t_3, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 1443, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ChessAI - Copy.pyx":1444
 *             temp_list = betas[i]
 *             betas[i] = betas[j]
 *             betas[j] = temp_list             # <<<<<<<<<<<<<<
 * 
 *             temp_moves_list = betaMoves[i]
 */
      if (unlikely(__pyx_v_betas == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1444, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_betas, __pyx_v_j, __pyx_v_temp_list, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 1444, __pyx_L1_error)

      /* "ChessAI - Copy.pyx":1446
 *             betas[j] = temp_list
 * 
 *             temp_moves_list = betaMoves[i]             # <<<<<<<<<<<<<<
 *             betaMoves[i] = betaMoves[j]
 *             betaMoves[j] = temp_moves_list
 */
      if (unlikely(__pyx_v_betaMoves == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1446, __pyx_L1_error)
      }
      if (!(likely(PyList_CheckExact(PyList_GET_ITEM(__pyx_v_betaMoves, __pyx_v_i)))||((PyList_GET_ITEM(__pyx_v_betaMoves, __pyx_v_i)) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(PyList_GET_ITEM(__pyx_v_betaMoves, __pyx_v_i))->tp_name), 0))) __PYX_ERR(0, 1446, __pyx_L1_error)
      __pyx_t_3 = PyList_GET_ITEM(__pyx_v_betaMoves, __pyx_v_i);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_temp_moves_list, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "ChessAI - Copy.pyx":1447
 * 
 *             temp_moves_list = betaMoves[i]
 *             betaMoves[i] = betaMoves[j]             # <<<<<<<<<<<<<<
 *             betaMoves[j] = temp_moves_list
 * 
 */
      if (unlikely(__pyx_v_betaMoves == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1447, __pyx_L1_error)
      }
      __pyx_t_3 = PyList_GET_ITEM(__pyx_v_betaMoves, __pyx_v_j);
      __Pyx_INCREF(__pyx_t_3);
      if (unlikely(__pyx_v_betaMoves == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1447, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_betaMoves, __pyx_v_i, __pyx_t_3, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ChessAI - Copy.pyx":1448
 *             temp_moves_list = betaMoves[i]
 *             betaMoves[i] = betaMoves[j]
 *             betaMoves[j] = temp_moves_list             # <<<<<<<<<<<<<<
 * 
 *             i += 1
 */
      if (unlikely(__pyx_v_betaMoves == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1448, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_betaMoves, __pyx_v_j, __pyx_v_temp_moves_list, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 1448, __pyx_L1_error)

      /* "ChessAI - Copy.pyx":1450
 *             betaMoves[j] = temp_moves_list
 * 
 *             i += 1             # <<<<<<<<<<<<<<
 *             j -= 1
 * 
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "ChessAI - Copy.pyx":1451
 * 
 *             i += 1
 *             j -= 1             # <<<<<<<<<<<<<<
 * 
 *     # Recursively sort the partitions
 */
      __pyx_v_j = (__pyx_v_j - 1);

      /* "ChessAI - Copy.pyx":1430
 *             j -= 1
 * 
 *         if i <= j:             # <<<<<<<<<<<<<<
 *             # Swap values
 *             temp_value = values[i]
 */
    }
  }

  /* "ChessAI - Copy.pyx":1454
 * 
 *     # Recursively sort the partitions
 *     quicksort(values, objects, betas, betaMoves, left, j)             # <<<<<<<<<<<<<<
 *     quicksort(values, objects, betas, betaMoves, i, right)
 * 
 */
  __pyx_f_7ChessAI_quicksort(__pyx_v_values, __pyx_v_objects, __pyx_v_betas, __pyx_v_betaMoves, __pyx_v_left, __pyx_v_j);

  /* "ChessAI - Copy.pyx":1455
 *     # Recursively sort the partitions
 *     quicksort(values, objects, betas, betaMoves, left, j)
 *     quicksort(values, objects, betas, betaMoves, i, right)             # <<<<<<<<<<<<<<
 * 
 * cdef void quicksort_ascending_wrapper(list values, list objects):
 */
  __pyx_f_7ChessAI_quicksort(__pyx_v_values, __pyx_v_objects, __pyx_v_betas, __pyx_v_betaMoves, __pyx_v_i, __pyx_v_right);

  /* "ChessAI - Copy.pyx":1412
 * 
 * 
 * cdef void quicksort(list values, list objects, list betas, list betaMoves, int left, int right):             # <<<<<<<<<<<<<<
 *     if left >= right:
 *         return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("ChessAI.quicksort", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pivot);
  __Pyx_XDECREF(__pyx_v_temp_object);
  __Pyx_XDECREF(__pyx_v_temp_list);
  __Pyx_XDECREF(__pyx_v_temp_moves_list);
  __Pyx_RefNannyFinishContext();
}

/* "ChessAI - Copy.pyx":1457
 *     quicksort(values, objects, betas, betaMoves, i, right)
 * 
 * cdef void quicksort_ascending_wrapper(list values, list objects):             # <<<<<<<<<<<<<<
 *     cdef int count = 0
 *     for i in values:
 */

static void __pyx_f_7ChessAI_quicksort_ascending_wrapper(PyObject *__pyx_v_values, PyObject *__pyx_v_objects) {
  int __pyx_v_count;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_values_sub_list = 0;
  PyObject *__pyx_v_objects_sub_list = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("quicksort_ascending_wrapper", 0);

  /* "ChessAI - Copy.pyx":1458
 * 
 * cdef void quicksort_ascending_wrapper(list values, list objects):
 *     cdef int count = 0             # <<<<<<<<<<<<<<
 *     for i in values:
 *         if (i == None):
 */
  __pyx_v_count = 0;

  /* "ChessAI - Copy.pyx":1459
 * cdef void quicksort_ascending_wrapper(list values, list objects):
 *     cdef int count = 0
 *     for i in values:             # <<<<<<<<<<<<<<
 *         if (i == None):
 *             break
 */
  if (unlikely(__pyx_v_values == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1459, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_values; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1459, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ChessAI - Copy.pyx":1460
 *     cdef int count = 0
 *     for i in values:
 *         if (i == None):             # <<<<<<<<<<<<<<
 *             break
 *         count += 1
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_i, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1460, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1460, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "ChessAI - Copy.pyx":1461
 *     for i in values:
 *         if (i == None):
 *             break             # <<<<<<<<<<<<<<
 *         count += 1
 *     cdef list values_sub_list = values[:count]
 */
      goto __pyx_L4_break;

      /* "ChessAI - Copy.pyx":1460
 *     cdef int count = 0
 *     for i in values:
 *         if (i == None):             # <<<<<<<<<<<<<<
 *             break
 *         count += 1
 */
    }

    /* "ChessAI - Copy.pyx":1462
 *         if (i == None):
 *             break
 *         count += 1             # <<<<<<<<<<<<<<
 *     cdef list values_sub_list = values[:count]
 *     cdef list objects_sub_list = objects[:count]
 */
    __pyx_v_count = (__pyx_v_count + 1);

    /* "ChessAI - Copy.pyx":1459
 * cdef void quicksort_ascending_wrapper(list values, list objects):
 *     cdef int count = 0
 *     for i in values:             # <<<<<<<<<<<<<<
 *         if (i == None):
 *             break
 */
  }
  __pyx_L4_break:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":1463
 *             break
 *         count += 1
 *     cdef list values_sub_list = values[:count]             # <<<<<<<<<<<<<<
 *     cdef list objects_sub_list = objects[:count]
 *     quicksort_ascending(values_sub_list, objects_sub_list, 0, len(values_sub_list) - 1)
 */
  if (unlikely(__pyx_v_values == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1463, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_GetSlice(__pyx_v_values, 0, __pyx_v_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_values_sub_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":1464
 *         count += 1
 *     cdef list values_sub_list = values[:count]
 *     cdef list objects_sub_list = objects[:count]             # <<<<<<<<<<<<<<
 *     quicksort_ascending(values_sub_list, objects_sub_list, 0, len(values_sub_list) - 1)
 * 
 */
  if (unlikely(__pyx_v_objects == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1464, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_GetSlice(__pyx_v_objects, 0, __pyx_v_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_objects_sub_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":1465
 *     cdef list values_sub_list = values[:count]
 *     cdef list objects_sub_list = objects[:count]
 *     quicksort_ascending(values_sub_list, objects_sub_list, 0, len(values_sub_list) - 1)             # <<<<<<<<<<<<<<
 * 
 *     # Update the original lists
 */
  __pyx_t_2 = PyList_GET_SIZE(__pyx_v_values_sub_list); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1465, __pyx_L1_error)
  __pyx_f_7ChessAI_quicksort_ascending(__pyx_v_values_sub_list, __pyx_v_objects_sub_list, 0, (__pyx_t_2 - 1));

  /* "ChessAI - Copy.pyx":1470
 *     # values[:count] = values_sub_list
 *     # objects[:count] = objects_sub_list
 *     values[:] = values_sub_list + values[count:]             # <<<<<<<<<<<<<<
 *     objects[:] = objects_sub_list + objects[count:]
 * 
 */
  if (unlikely(__pyx_v_values == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1470, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_GetSlice(__pyx_v_values, __pyx_v_count, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Add(__pyx_v_values_sub_list, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_values == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1470, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_v_values, __pyx_t_3, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(0, 1470, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ChessAI - Copy.pyx":1471
 *     # objects[:count] = objects_sub_list
 *     values[:] = values_sub_list + values[count:]
 *     objects[:] = objects_sub_list + objects[count:]             # <<<<<<<<<<<<<<
 * 
 * cdef void quicksort_wrapper(list alphas, list objects, list betas, list betaMoves, list preAlphas, list preBetas, list preBetaMoves):
 */
  if (unlikely(__pyx_v_objects == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1471, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyList_GetSlice(__pyx_v_objects, __pyx_v_count, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Add(__pyx_v_objects_sub_list, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_v_objects == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1471, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_v_objects, __pyx_t_1, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":1457
 *     quicksort(values, objects, betas, betaMoves, i, right)
 * 
 * cdef void quicksort_ascending_wrapper(list values, list objects):             # <<<<<<<<<<<<<<
 *     cdef int count = 0
 *     for i in values:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("ChessAI.quicksort_ascending_wrapper", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_values_sub_list);
  __Pyx_XDECREF(__pyx_v_objects_sub_list);
  __Pyx_RefNannyFinishContext();
}

/* "ChessAI - Copy.pyx":1473
 *     objects[:] = objects_sub_list + objects[count:]
 * 
 * cdef void quicksort_wrapper(list alphas, list objects, list betas, list betaMoves, list preAlphas, list preBetas, list preBetaMoves):             # <<<<<<<<<<<<<<
 *     cdef int count = 0
 *     cdef int index = 0
 */

static void __pyx_f_7ChessAI_quicksort_wrapper(PyObject *__pyx_v_alphas, PyObject *__pyx_v_objects, PyObject *__pyx_v_betas, PyObject *__pyx_v_betaMoves, PyObject *__pyx_v_preAlphas, PyObject *__pyx_v_preBetas, PyObject *__pyx_v_preBetaMoves) {
  int __pyx_v_count;
  int __pyx_v_index;
  int __pyx_v_maxVal;
  Py_ssize_t __pyx_v_i;
  int __pyx_v_tempAlpha;
  PyObject *__pyx_v_tempBeta = 0;
  PyObject *__pyx_v_tempObject = 0;
  PyObject *__pyx_v_tempBetaMoves = 0;
  PyObject *__pyx_v_alphas_sub_list = 0;
  PyObject *__pyx_v_objects_sub_list = 0;
  PyObject *__pyx_v_betas_sub_list = 0;
  PyObject *__pyx_v_beta_moves_sub_list = 0;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("quicksort_wrapper", 0);

  /* "ChessAI - Copy.pyx":1474
 * 
 * cdef void quicksort_wrapper(list alphas, list objects, list betas, list betaMoves, list preAlphas, list preBetas, list preBetaMoves):
 *     cdef int count = 0             # <<<<<<<<<<<<<<
 *     cdef int index = 0
 *     cdef int maxVal = alphas[0]
 */
  __pyx_v_count = 0;

  /* "ChessAI - Copy.pyx":1475
 * cdef void quicksort_wrapper(list alphas, list objects, list betas, list betaMoves, list preAlphas, list preBetas, list preBetaMoves):
 *     cdef int count = 0
 *     cdef int index = 0             # <<<<<<<<<<<<<<
 *     cdef int maxVal = alphas[0]
 *     for i in range (len(alphas)):
 */
  __pyx_v_index = 0;

  /* "ChessAI - Copy.pyx":1476
 *     cdef int count = 0
 *     cdef int index = 0
 *     cdef int maxVal = alphas[0]             # <<<<<<<<<<<<<<
 *     for i in range (len(alphas)):
 * 
 */
  if (unlikely(__pyx_v_alphas == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1476, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_alphas, 0)); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1476, __pyx_L1_error)
  __pyx_v_maxVal = __pyx_t_1;

  /* "ChessAI - Copy.pyx":1477
 *     cdef int index = 0
 *     cdef int maxVal = alphas[0]
 *     for i in range (len(alphas)):             # <<<<<<<<<<<<<<
 * 
 *         if (alphas[i] == None):
 */
  if (unlikely(__pyx_v_alphas == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1477, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_v_alphas); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1477, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "ChessAI - Copy.pyx":1479
 *     for i in range (len(alphas)):
 * 
 *         if (alphas[i] == None):             # <<<<<<<<<<<<<<
 *             break
 *         if (alphas[i] > maxVal):
 */
    if (unlikely(__pyx_v_alphas == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1479, __pyx_L1_error)
    }
    __pyx_t_5 = PyObject_RichCompare(PyList_GET_ITEM(__pyx_v_alphas, __pyx_v_i), Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1479, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1479, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "ChessAI - Copy.pyx":1480
 * 
 *         if (alphas[i] == None):
 *             break             # <<<<<<<<<<<<<<
 *         if (alphas[i] > maxVal):
 *             maxVal = alphas[i]
 */
      goto __pyx_L4_break;

      /* "ChessAI - Copy.pyx":1479
 *     for i in range (len(alphas)):
 * 
 *         if (alphas[i] == None):             # <<<<<<<<<<<<<<
 *             break
 *         if (alphas[i] > maxVal):
 */
    }

    /* "ChessAI - Copy.pyx":1481
 *         if (alphas[i] == None):
 *             break
 *         if (alphas[i] > maxVal):             # <<<<<<<<<<<<<<
 *             maxVal = alphas[i]
 *             index = i
 */
    if (unlikely(__pyx_v_alphas == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1481, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_maxVal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyObject_RichCompare(PyList_GET_ITEM(__pyx_v_alphas, __pyx_v_i), __pyx_t_5, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_6) {

      /* "ChessAI - Copy.pyx":1482
 *             break
 *         if (alphas[i] > maxVal):
 *             maxVal = alphas[i]             # <<<<<<<<<<<<<<
 *             index = i
 *         count += 1
 */
      if (unlikely(__pyx_v_alphas == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1482, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_alphas, __pyx_v_i)); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1482, __pyx_L1_error)
      __pyx_v_maxVal = __pyx_t_1;

      /* "ChessAI - Copy.pyx":1483
 *         if (alphas[i] > maxVal):
 *             maxVal = alphas[i]
 *             index = i             # <<<<<<<<<<<<<<
 *         count += 1
 * 
 */
      __pyx_v_index = __pyx_v_i;

      /* "ChessAI - Copy.pyx":1481
 *         if (alphas[i] == None):
 *             break
 *         if (alphas[i] > maxVal):             # <<<<<<<<<<<<<<
 *             maxVal = alphas[i]
 *             index = i
 */
    }

    /* "ChessAI - Copy.pyx":1484
 *             maxVal = alphas[i]
 *             index = i
 *         count += 1             # <<<<<<<<<<<<<<
 * 
 *     cdef int tempAlpha = alphas.pop(index)
 */
    __pyx_v_count = (__pyx_v_count + 1);
  }
  __pyx_L4_break:;

  /* "ChessAI - Copy.pyx":1486
 *         count += 1
 * 
 *     cdef int tempAlpha = alphas.pop(index)             # <<<<<<<<<<<<<<
 *     cdef list tempBeta = betas.pop(index)
 *     cdef object tempObject = objects.pop(index)
 */
  if (unlikely(__pyx_v_alphas == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
    __PYX_ERR(0, 1486, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyList_PopIndex(__pyx_v_alphas, Py_None, __pyx_v_index, 1, int, __Pyx_PyInt_From_int); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1486, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_tempAlpha = __pyx_t_1;

  /* "ChessAI - Copy.pyx":1487
 * 
 *     cdef int tempAlpha = alphas.pop(index)
 *     cdef list tempBeta = betas.pop(index)             # <<<<<<<<<<<<<<
 *     cdef object tempObject = objects.pop(index)
 *     cdef list tempBetaMoves = betaMoves.pop(index)
 */
  if (unlikely(__pyx_v_betas == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
    __PYX_ERR(0, 1487, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyList_PopIndex(__pyx_v_betas, Py_None, __pyx_v_index, 1, int, __Pyx_PyInt_From_int); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (!(likely(PyList_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 1487, __pyx_L1_error)
  __pyx_v_tempBeta = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "ChessAI - Copy.pyx":1488
 *     cdef int tempAlpha = alphas.pop(index)
 *     cdef list tempBeta = betas.pop(index)
 *     cdef object tempObject = objects.pop(index)             # <<<<<<<<<<<<<<
 *     cdef list tempBetaMoves = betaMoves.pop(index)
 * 
 */
  if (unlikely(__pyx_v_objects == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
    __PYX_ERR(0, 1488, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyList_PopIndex(__pyx_v_objects, Py_None, __pyx_v_index, 1, int, __Pyx_PyInt_From_int); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_v_tempObject = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "ChessAI - Copy.pyx":1489
 *     cdef list tempBeta = betas.pop(index)
 *     cdef object tempObject = objects.pop(index)
 *     cdef list tempBetaMoves = betaMoves.pop(index)             # <<<<<<<<<<<<<<
 * 
 *     alphas.insert(0, tempAlpha)
 */
  if (unlikely(__pyx_v_betaMoves == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
    __PYX_ERR(0, 1489, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyList_PopIndex(__pyx_v_betaMoves, Py_None, __pyx_v_index, 1, int, __Pyx_PyInt_From_int); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (!(likely(PyList_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 1489, __pyx_L1_error)
  __pyx_v_tempBetaMoves = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "ChessAI - Copy.pyx":1491
 *     cdef list tempBetaMoves = betaMoves.pop(index)
 * 
 *     alphas.insert(0, tempAlpha)             # <<<<<<<<<<<<<<
 *     betas.insert(0, tempBeta)
 *     objects.insert(0, tempObject)
 */
  if (unlikely(__pyx_v_alphas == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "insert");
    __PYX_ERR(0, 1491, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_tempAlpha); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyList_Insert(__pyx_v_alphas, 0, __pyx_t_7); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1491, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "ChessAI - Copy.pyx":1492
 * 
 *     alphas.insert(0, tempAlpha)
 *     betas.insert(0, tempBeta)             # <<<<<<<<<<<<<<
 *     objects.insert(0, tempObject)
 *     betaMoves.insert(0,tempBetaMoves)
 */
  if (unlikely(__pyx_v_betas == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "insert");
    __PYX_ERR(0, 1492, __pyx_L1_error)
  }
  __pyx_t_8 = PyList_Insert(__pyx_v_betas, 0, __pyx_v_tempBeta); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1492, __pyx_L1_error)

  /* "ChessAI - Copy.pyx":1493
 *     alphas.insert(0, tempAlpha)
 *     betas.insert(0, tempBeta)
 *     objects.insert(0, tempObject)             # <<<<<<<<<<<<<<
 *     betaMoves.insert(0,tempBetaMoves)
 *     # print(betas)
 */
  if (unlikely(__pyx_v_objects == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "insert");
    __PYX_ERR(0, 1493, __pyx_L1_error)
  }
  __pyx_t_8 = PyList_Insert(__pyx_v_objects, 0, __pyx_v_tempObject); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1493, __pyx_L1_error)

  /* "ChessAI - Copy.pyx":1494
 *     betas.insert(0, tempBeta)
 *     objects.insert(0, tempObject)
 *     betaMoves.insert(0,tempBetaMoves)             # <<<<<<<<<<<<<<
 *     # print(betas)
 *     cdef list alphas_sub_list = alphas[1:count] + preAlphas[count:]
 */
  if (unlikely(__pyx_v_betaMoves == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "insert");
    __PYX_ERR(0, 1494, __pyx_L1_error)
  }
  __pyx_t_8 = PyList_Insert(__pyx_v_betaMoves, 0, __pyx_v_tempBetaMoves); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1494, __pyx_L1_error)

  /* "ChessAI - Copy.pyx":1496
 *     betaMoves.insert(0,tempBetaMoves)
 *     # print(betas)
 *     cdef list alphas_sub_list = alphas[1:count] + preAlphas[count:]             # <<<<<<<<<<<<<<
 *     cdef list objects_sub_list = objects[1:]
 *     cdef list betas_sub_list = betas[1:count] + preBetas[count:]
 */
  if (unlikely(__pyx_v_alphas == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1496, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyList_GetSlice(__pyx_v_alphas, 1, __pyx_v_count); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (unlikely(__pyx_v_preAlphas == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1496, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyList_GetSlice(__pyx_v_preAlphas, __pyx_v_count, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = PyNumber_Add(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_alphas_sub_list = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "ChessAI - Copy.pyx":1497
 *     # print(betas)
 *     cdef list alphas_sub_list = alphas[1:count] + preAlphas[count:]
 *     cdef list objects_sub_list = objects[1:]             # <<<<<<<<<<<<<<
 *     cdef list betas_sub_list = betas[1:count] + preBetas[count:]
 *     cdef list beta_moves_sub_list = betaMoves[1:count] + preBetaMoves[count:]
 */
  if (unlikely(__pyx_v_objects == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1497, __pyx_L1_error)
  }
  __pyx_t_9 = __Pyx_PyList_GetSlice(__pyx_v_objects, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_v_objects_sub_list = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "ChessAI - Copy.pyx":1498
 *     cdef list alphas_sub_list = alphas[1:count] + preAlphas[count:]
 *     cdef list objects_sub_list = objects[1:]
 *     cdef list betas_sub_list = betas[1:count] + preBetas[count:]             # <<<<<<<<<<<<<<
 *     cdef list beta_moves_sub_list = betaMoves[1:count] + preBetaMoves[count:]
 * 
 */
  if (unlikely(__pyx_v_betas == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1498, __pyx_L1_error)
  }
  __pyx_t_9 = __Pyx_PyList_GetSlice(__pyx_v_betas, 1, __pyx_v_count); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (unlikely(__pyx_v_preBetas == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1498, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyList_GetSlice(__pyx_v_preBetas, __pyx_v_count, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyNumber_Add(__pyx_t_9, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_betas_sub_list = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "ChessAI - Copy.pyx":1499
 *     cdef list objects_sub_list = objects[1:]
 *     cdef list betas_sub_list = betas[1:count] + preBetas[count:]
 *     cdef list beta_moves_sub_list = betaMoves[1:count] + preBetaMoves[count:]             # <<<<<<<<<<<<<<
 * 
 *     quicksort(alphas_sub_list, objects_sub_list, betas_sub_list,beta_moves_sub_list, 0, len(alphas_sub_list) - 1)
 */
  if (unlikely(__pyx_v_betaMoves == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1499, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyList_GetSlice(__pyx_v_betaMoves, 1, __pyx_v_count); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (unlikely(__pyx_v_preBetaMoves == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1499, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyList_GetSlice(__pyx_v_preBetaMoves, __pyx_v_count, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = PyNumber_Add(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_beta_moves_sub_list = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "ChessAI - Copy.pyx":1501
 *     cdef list beta_moves_sub_list = betaMoves[1:count] + preBetaMoves[count:]
 * 
 *     quicksort(alphas_sub_list, objects_sub_list, betas_sub_list,beta_moves_sub_list, 0, len(alphas_sub_list) - 1)             # <<<<<<<<<<<<<<
 * 
 *     alphas[1:] = alphas_sub_list
 */
  __pyx_t_2 = PyList_GET_SIZE(__pyx_v_alphas_sub_list); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1501, __pyx_L1_error)
  __pyx_f_7ChessAI_quicksort(__pyx_v_alphas_sub_list, __pyx_v_objects_sub_list, __pyx_v_betas_sub_list, __pyx_v_beta_moves_sub_list, 0, (__pyx_t_2 - 1));

  /* "ChessAI - Copy.pyx":1503
 *     quicksort(alphas_sub_list, objects_sub_list, betas_sub_list,beta_moves_sub_list, 0, len(alphas_sub_list) - 1)
 * 
 *     alphas[1:] = alphas_sub_list             # <<<<<<<<<<<<<<
 *     betas[1:] = betas_sub_list
 *     objects[1:] = objects_sub_list
 */
  if (unlikely(__pyx_v_alphas == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1503, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_v_alphas, __pyx_v_alphas_sub_list, 1, 0, NULL, NULL, NULL, 1, 0, 0) < 0) __PYX_ERR(0, 1503, __pyx_L1_error)

  /* "ChessAI - Copy.pyx":1504
 * 
 *     alphas[1:] = alphas_sub_list
 *     betas[1:] = betas_sub_list             # <<<<<<<<<<<<<<
 *     objects[1:] = objects_sub_list
 *     betaMoves[1:] = beta_moves_sub_list
 */
  if (unlikely(__pyx_v_betas == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1504, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_v_betas, __pyx_v_betas_sub_list, 1, 0, NULL, NULL, NULL, 1, 0, 0) < 0) __PYX_ERR(0, 1504, __pyx_L1_error)

  /* "ChessAI - Copy.pyx":1505
 *     alphas[1:] = alphas_sub_list
 *     betas[1:] = betas_sub_list
 *     objects[1:] = objects_sub_list             # <<<<<<<<<<<<<<
 *     betaMoves[1:] = beta_moves_sub_list
 *     # print(betas[0])
 */
  if (unlikely(__pyx_v_objects == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1505, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_v_objects, __pyx_v_objects_sub_list, 1, 0, NULL, NULL, NULL, 1, 0, 0) < 0) __PYX_ERR(0, 1505, __pyx_L1_error)

  /* "ChessAI - Copy.pyx":1506
 *     betas[1:] = betas_sub_list
 *     objects[1:] = objects_sub_list
 *     betaMoves[1:] = beta_moves_sub_list             # <<<<<<<<<<<<<<
 *     # print(betas[0])
 * 
 */
  if (unlikely(__pyx_v_betaMoves == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1506, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_v_betaMoves, __pyx_v_beta_moves_sub_list, 1, 0, NULL, NULL, NULL, 1, 0, 0) < 0) __PYX_ERR(0, 1506, __pyx_L1_error)

  /* "ChessAI - Copy.pyx":1473
 *     objects[:] = objects_sub_list + objects[count:]
 * 
 * cdef void quicksort_wrapper(list alphas, list objects, list betas, list betaMoves, list preAlphas, list preBetas, list preBetaMoves):             # <<<<<<<<<<<<<<
 *     cdef int count = 0
 *     cdef int index = 0
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("ChessAI.quicksort_wrapper", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tempBeta);
  __Pyx_XDECREF(__pyx_v_tempObject);
  __Pyx_XDECREF(__pyx_v_tempBetaMoves);
  __Pyx_XDECREF(__pyx_v_alphas_sub_list);
  __Pyx_XDECREF(__pyx_v_objects_sub_list);
  __Pyx_XDECREF(__pyx_v_betas_sub_list);
  __Pyx_XDECREF(__pyx_v_beta_moves_sub_list);
  __Pyx_RefNannyFinishContext();
}

/* "ChessAI - Copy.pyx":1509
 *     # print(betas[0])
 * 
 * cdef void quicksort_ascending(list values, list objects, int left, int right):             # <<<<<<<<<<<<<<
 *     if left >= right:
 *         return
 */

static void __pyx_f_7ChessAI_quicksort_ascending(PyObject *__pyx_v_values, PyObject *__pyx_v_objects, int __pyx_v_left, int __pyx_v_right) {
  PyObject *__pyx_v_pivot = NULL;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_temp_value;
  PyObject *__pyx_v_temp_object = 0;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  long __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("quicksort_ascending", 0);

  /* "ChessAI - Copy.pyx":1510
 * 
 * cdef void quicksort_ascending(list values, list objects, int left, int right):
 *     if left >= right:             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_t_1 = ((__pyx_v_left >= __pyx_v_right) != 0);
  if (__pyx_t_1) {

    /* "ChessAI - Copy.pyx":1511
 * cdef void quicksort_ascending(list values, list objects, int left, int right):
 *     if left >= right:
 *         return             # <<<<<<<<<<<<<<
 * 
 *     pivot = values[left + (right - left) // 2]
 */
    goto __pyx_L0;

    /* "ChessAI - Copy.pyx":1510
 * 
 * cdef void quicksort_ascending(list values, list objects, int left, int right):
 *     if left >= right:             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  }

  /* "ChessAI - Copy.pyx":1513
 *         return
 * 
 *     pivot = values[left + (right - left) // 2]             # <<<<<<<<<<<<<<
 *     cdef int i = left
 *     cdef int j = right
 */
  if (unlikely(__pyx_v_values == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1513, __pyx_L1_error)
  }
  __pyx_t_2 = (__pyx_v_left + ((__pyx_v_right - __pyx_v_left) / 2));
  __pyx_t_3 = PyList_GET_ITEM(__pyx_v_values, __pyx_t_2);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_pivot = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ChessAI - Copy.pyx":1514
 * 
 *     pivot = values[left + (right - left) // 2]
 *     cdef int i = left             # <<<<<<<<<<<<<<
 *     cdef int j = right
 *     cdef int temp_value
 */
  __pyx_v_i = __pyx_v_left;

  /* "ChessAI - Copy.pyx":1515
 *     pivot = values[left + (right - left) // 2]
 *     cdef int i = left
 *     cdef int j = right             # <<<<<<<<<<<<<<
 *     cdef int temp_value
 *     cdef object temp_object
 */
  __pyx_v_j = __pyx_v_right;

  /* "ChessAI - Copy.pyx":1520
 *     cdef list temp_list
 * 
 *     while i <= j:             # <<<<<<<<<<<<<<
 *         while values[i] < pivot:
 *             i += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i <= __pyx_v_j) != 0);
    if (!__pyx_t_1) break;

    /* "ChessAI - Copy.pyx":1521
 * 
 *     while i <= j:
 *         while values[i] < pivot:             # <<<<<<<<<<<<<<
 *             i += 1
 *         while values[j] > pivot:
 */
    while (1) {
      if (unlikely(__pyx_v_values == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1521, __pyx_L1_error)
      }
      __pyx_t_3 = PyObject_RichCompare(PyList_GET_ITEM(__pyx_v_values, __pyx_v_i), __pyx_v_pivot, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1521, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1521, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_1) break;

      /* "ChessAI - Copy.pyx":1522
 *     while i <= j:
 *         while values[i] < pivot:
 *             i += 1             # <<<<<<<<<<<<<<
 *         while values[j] > pivot:
 *             j -= 1
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "ChessAI - Copy.pyx":1523
 *         while values[i] < pivot:
 *             i += 1
 *         while values[j] > pivot:             # <<<<<<<<<<<<<<
 *             j -= 1
 * 
 */
    while (1) {
      if (unlikely(__pyx_v_values == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1523, __pyx_L1_error)
      }
      __pyx_t_3 = PyObject_RichCompare(PyList_GET_ITEM(__pyx_v_values, __pyx_v_j), __pyx_v_pivot, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1523, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1523, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_1) break;

      /* "ChessAI - Copy.pyx":1524
 *             i += 1
 *         while values[j] > pivot:
 *             j -= 1             # <<<<<<<<<<<<<<
 * 
 *         if i <= j:
 */
      __pyx_v_j = (__pyx_v_j - 1);
    }

    /* "ChessAI - Copy.pyx":1526
 *             j -= 1
 * 
 *         if i <= j:             # <<<<<<<<<<<<<<
 *             # Swap values
 *             temp_value = values[i]
 */
    __pyx_t_1 = ((__pyx_v_i <= __pyx_v_j) != 0);
    if (__pyx_t_1) {

      /* "ChessAI - Copy.pyx":1528
 *         if i <= j:
 *             # Swap values
 *             temp_value = values[i]             # <<<<<<<<<<<<<<
 *             values[i] = values[j]
 *             values[j] = temp_value
 */
      if (unlikely(__pyx_v_values == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1528, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_values, __pyx_v_i)); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1528, __pyx_L1_error)
      __pyx_v_temp_value = __pyx_t_4;

      /* "ChessAI - Copy.pyx":1529
 *             # Swap values
 *             temp_value = values[i]
 *             values[i] = values[j]             # <<<<<<<<<<<<<<
 *             values[j] = temp_value
 * 
 */
      if (unlikely(__pyx_v_values == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1529, __pyx_L1_error)
      }
      __pyx_t_3 = PyList_GET_ITEM(__pyx_v_values, __pyx_v_j);
      __Pyx_INCREF(__pyx_t_3);
      if (unlikely(__pyx_v_values == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1529, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_values, __pyx_v_i, __pyx_t_3, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 1529, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ChessAI - Copy.pyx":1530
 *             temp_value = values[i]
 *             values[i] = values[j]
 *             values[j] = temp_value             # <<<<<<<<<<<<<<
 * 
 *             # Swap objects
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_temp_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__pyx_v_values == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1530, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_values, __pyx_v_j, __pyx_t_3, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 1530, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ChessAI - Copy.pyx":1533
 * 
 *             # Swap objects
 *             temp_object = objects[i]             # <<<<<<<<<<<<<<
 *             objects[i] = objects[j]
 *             objects[j] = temp_object
 */
      if (unlikely(__pyx_v_objects == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1533, __pyx_L1_error)
      }
      __pyx_t_3 = PyList_GET_ITEM(__pyx_v_objects, __pyx_v_i);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_temp_object, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "ChessAI - Copy.pyx":1534
 *             # Swap objects
 *             temp_object = objects[i]
 *             objects[i] = objects[j]             # <<<<<<<<<<<<<<
 *             objects[j] = temp_object
 * 
 */
      if (unlikely(__pyx_v_objects == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1534, __pyx_L1_error)
      }
      __pyx_t_3 = PyList_GET_ITEM(__pyx_v_objects, __pyx_v_j);
      __Pyx_INCREF(__pyx_t_3);
      if (unlikely(__pyx_v_objects == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1534, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_objects, __pyx_v_i, __pyx_t_3, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 1534, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ChessAI - Copy.pyx":1535
 *             temp_object = objects[i]
 *             objects[i] = objects[j]
 *             objects[j] = temp_object             # <<<<<<<<<<<<<<
 * 
 *             i += 1
 */
      if (unlikely(__pyx_v_objects == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1535, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_objects, __pyx_v_j, __pyx_v_temp_object, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 1535, __pyx_L1_error)

      /* "ChessAI - Copy.pyx":1537
 *             objects[j] = temp_object
 * 
 *             i += 1             # <<<<<<<<<<<<<<
 *             j -= 1
 * 
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "ChessAI - Copy.pyx":1538
 * 
 *             i += 1
 *             j -= 1             # <<<<<<<<<<<<<<
 * 
 *     # Recursively sort the partitions
 */
      __pyx_v_j = (__pyx_v_j - 1);

      /* "ChessAI - Copy.pyx":1526
 *             j -= 1
 * 
 *         if i <= j:             # <<<<<<<<<<<<<<
 *             # Swap values
 *             temp_value = values[i]
 */
    }
  }

  /* "ChessAI - Copy.pyx":1541
 * 
 *     # Recursively sort the partitions
 *     quicksort_ascending(values, objects, left, j)             # <<<<<<<<<<<<<<
 *     quicksort_ascending(values, objects, i, right)
 * 
 */
  __pyx_f_7ChessAI_quicksort_ascending(__pyx_v_values, __pyx_v_objects, __pyx_v_left, __pyx_v_j);

  /* "ChessAI - Copy.pyx":1542
 *     # Recursively sort the partitions
 *     quicksort_ascending(values, objects, left, j)
 *     quicksort_ascending(values, objects, i, right)             # <<<<<<<<<<<<<<
 * 
 * @boundscheck(False)
 */
  __pyx_f_7ChessAI_quicksort_ascending(__pyx_v_values, __pyx_v_objects, __pyx_v_i, __pyx_v_right);

  /* "ChessAI - Copy.pyx":1509
 *     # print(betas[0])
 * 
 * cdef void quicksort_ascending(list values, list objects, int left, int right):             # <<<<<<<<<<<<<<
 *     if left >= right:
 *         return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("ChessAI.quicksort_ascending", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pivot);
  __Pyx_XDECREF(__pyx_v_temp_object);
  __Pyx_RefNannyFinishContext();
}

/* "ChessAI - Copy.pyx":1549
 * @cython.nonecheck(False)
 * @cython.ccall
 * cdef int evaluate_board(object board,uint64_t zobrist):             # <<<<<<<<<<<<<<
 * 
 *     cdef uint64_t pawns = board.pawns
 */

static int __pyx_f_7ChessAI_evaluate_board(PyObject *__pyx_v_board, uint64_t __pyx_v_zobrist) {
  uint64_t __pyx_v_pawns;
  uint64_t __pyx_v_knights;
  uint64_t __pyx_v_bishops;
  uint64_t __pyx_v_rooks;
  uint64_t __pyx_v_queens;
  uint64_t __pyx_v_kings;
  uint64_t __pyx_v_occupied_white;
  uint64_t __pyx_v_occupied_black;
  uint64_t __pyx_v_occupied;
  int __pyx_v_cache_result;
  int __pyx_v_total;
  int __pyx_v_moveNum;
  PyObject *__pyx_v_target_square = 0;
  PyObject *__pyx_v_target_move = 0;
  CYTHON_UNUSED int __pyx_v_castle_index;
  int __pyx_v_horizonMitigation;
  PyObject *__pyx_v_move = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  uint64_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  uint8_t __pyx_t_7;
  uint8_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  Py_ssize_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("evaluate_board", 0);

  /* "ChessAI - Copy.pyx":1551
 * cdef int evaluate_board(object board,uint64_t zobrist):
 * 
 *     cdef uint64_t pawns = board.pawns             # <<<<<<<<<<<<<<
 *     cdef uint64_t knights = board.knights
 *     cdef uint64_t bishops = board.bishops
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_pawns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pawns = __pyx_t_2;

  /* "ChessAI - Copy.pyx":1552
 * 
 *     cdef uint64_t pawns = board.pawns
 *     cdef uint64_t knights = board.knights             # <<<<<<<<<<<<<<
 *     cdef uint64_t bishops = board.bishops
 *     cdef uint64_t rooks = board.rooks
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_knights); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_knights = __pyx_t_2;

  /* "ChessAI - Copy.pyx":1553
 *     cdef uint64_t pawns = board.pawns
 *     cdef uint64_t knights = board.knights
 *     cdef uint64_t bishops = board.bishops             # <<<<<<<<<<<<<<
 *     cdef uint64_t rooks = board.rooks
 *     cdef uint64_t queens = board.queens
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_bishops); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1553, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_bishops = __pyx_t_2;

  /* "ChessAI - Copy.pyx":1554
 *     cdef uint64_t knights = board.knights
 *     cdef uint64_t bishops = board.bishops
 *     cdef uint64_t rooks = board.rooks             # <<<<<<<<<<<<<<
 *     cdef uint64_t queens = board.queens
 *     cdef uint64_t kings = board.kings
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_rooks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1554, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rooks = __pyx_t_2;

  /* "ChessAI - Copy.pyx":1555
 *     cdef uint64_t bishops = board.bishops
 *     cdef uint64_t rooks = board.rooks
 *     cdef uint64_t queens = board.queens             # <<<<<<<<<<<<<<
 *     cdef uint64_t kings = board.kings
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_queens); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1555, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_queens = __pyx_t_2;

  /* "ChessAI - Copy.pyx":1556
 *     cdef uint64_t rooks = board.rooks
 *     cdef uint64_t queens = board.queens
 *     cdef uint64_t kings = board.kings             # <<<<<<<<<<<<<<
 * 
 *     cdef uint64_t occupied_white = board.occupied_co[True]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_kings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_kings = __pyx_t_2;

  /* "ChessAI - Copy.pyx":1558
 *     cdef uint64_t kings = board.kings
 * 
 *     cdef uint64_t occupied_white = board.occupied_co[True]             # <<<<<<<<<<<<<<
 *     cdef uint64_t occupied_black = board.occupied_co[False]
 *     cdef uint64_t occupied = board.occupied
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 1, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_occupied_white = __pyx_t_2;

  /* "ChessAI - Copy.pyx":1559
 * 
 *     cdef uint64_t occupied_white = board.occupied_co[True]
 *     cdef uint64_t occupied_black = board.occupied_co[False]             # <<<<<<<<<<<<<<
 *     cdef uint64_t occupied = board.occupied
 *     # cdef uint64_t curZobrist = generateZobristHash(pawns,knights,bishops,rooks,queens,kings,occupied_white,occupied_black)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 0, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_occupied_black = __pyx_t_2;

  /* "ChessAI - Copy.pyx":1560
 *     cdef uint64_t occupied_white = board.occupied_co[True]
 *     cdef uint64_t occupied_black = board.occupied_co[False]
 *     cdef uint64_t occupied = board.occupied             # <<<<<<<<<<<<<<
 *     # cdef uint64_t curZobrist = generateZobristHash(pawns,knights,bishops,rooks,queens,kings,occupied_white,occupied_black)
 *     #zobrist = curZobrist
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_occupied); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1560, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_occupied = __pyx_t_2;

  /* "ChessAI - Copy.pyx":1565
 *     # if (curZobrist != zobrist):
 *     #     print(curZobrist, zobrist, board.fen(), board.move_stack)
 *     cdef int cache_result = accessCache(zobrist)             # <<<<<<<<<<<<<<
 * 
 *     if (cache_result != 0):
 */
  __pyx_v_cache_result = accessCache(__pyx_v_zobrist);

  /* "ChessAI - Copy.pyx":1567
 *     cdef int cache_result = accessCache(zobrist)
 * 
 *     if (cache_result != 0):             # <<<<<<<<<<<<<<
 *         # print(cache_result,board.fen())
 *         return cache_result
 */
  __pyx_t_4 = ((__pyx_v_cache_result != 0) != 0);
  if (__pyx_t_4) {

    /* "ChessAI - Copy.pyx":1569
 *     if (cache_result != 0):
 *         # print(cache_result,board.fen())
 *         return cache_result             # <<<<<<<<<<<<<<
 * 
 *     global prevKings
 */
    __pyx_r = __pyx_v_cache_result;
    goto __pyx_L0;

    /* "ChessAI - Copy.pyx":1567
 *     cdef int cache_result = accessCache(zobrist)
 * 
 *     if (cache_result != 0):             # <<<<<<<<<<<<<<
 *         # print(cache_result,board.fen())
 *         return cache_result
 */
  }

  /* "ChessAI - Copy.pyx":1582
 *     global values
 * 
 *     cdef int total = 0             # <<<<<<<<<<<<<<
 *     cdef int moveNum = board.ply()
 *     cdef object target_square
 */
  __pyx_v_total = 0;

  /* "ChessAI - Copy.pyx":1583
 * 
 *     cdef int total = 0
 *     cdef int moveNum = board.ply()             # <<<<<<<<<<<<<<
 *     cdef object target_square
 *     cdef object target_move
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_ply); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1583, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_moveNum = __pyx_t_6;

  /* "ChessAI - Copy.pyx":1588
 * 
 * 
 *     cdef int castle_index = -1             # <<<<<<<<<<<<<<
 *     cdef bint horizonMitigation = False
 * 
 */
  __pyx_v_castle_index = -1;

  /* "ChessAI - Copy.pyx":1589
 * 
 *     cdef int castle_index = -1
 *     cdef bint horizonMitigation = False             # <<<<<<<<<<<<<<
 * 
 *     # Initialize the array in C-style
 */
  __pyx_v_horizonMitigation = 0;

  /* "ChessAI - Copy.pyx":1596
 *     #     print(board)
 *     # Iterate through all squares on the board and evaluate piece values
 *     if board.is_checkmate():             # <<<<<<<<<<<<<<
 *         if board.turn:
 *             total = 9999999 - moveNum
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_is_checkmate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1596, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "ChessAI - Copy.pyx":1597
 *     # Iterate through all squares on the board and evaluate piece values
 *     if board.is_checkmate():
 *         if board.turn:             # <<<<<<<<<<<<<<
 *             total = 9999999 - moveNum
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_turn); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1597, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "ChessAI - Copy.pyx":1598
 *     if board.is_checkmate():
 *         if board.turn:
 *             total = 9999999 - moveNum             # <<<<<<<<<<<<<<
 *         else:
 *             total = -9999999 + moveNum
 */
      __pyx_v_total = (0x98967F - __pyx_v_moveNum);

      /* "ChessAI - Copy.pyx":1597
 *     # Iterate through all squares on the board and evaluate piece values
 *     if board.is_checkmate():
 *         if board.turn:             # <<<<<<<<<<<<<<
 *             total = 9999999 - moveNum
 *         else:
 */
      goto __pyx_L5;
    }

    /* "ChessAI - Copy.pyx":1600
 *             total = 9999999 - moveNum
 *         else:
 *             total = -9999999 + moveNum             # <<<<<<<<<<<<<<
 *     # elif board.is_stalemate():
 *     #     total = -100000000
 */
    /*else*/ {
      __pyx_v_total = (-9999999L + __pyx_v_moveNum);
    }
    __pyx_L5:;

    /* "ChessAI - Copy.pyx":1596
 *     #     print(board)
 *     # Iterate through all squares on the board and evaluate piece values
 *     if board.is_checkmate():             # <<<<<<<<<<<<<<
 *         if board.turn:
 *             total = 9999999 - moveNum
 */
    goto __pyx_L4;
  }

  /* "ChessAI - Copy.pyx":1604
 *     #     total = -100000000
 *     else:
 *         total += placement_and_piece_eval(moveNum, pawns, knights, bishops, rooks, queens, kings, prevKings, occupied_white, occupied_black, occupied)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_v_total = (__pyx_v_total + placement_and_piece_eval(__pyx_v_moveNum, __pyx_v_pawns, __pyx_v_knights, __pyx_v_bishops, __pyx_v_rooks, __pyx_v_queens, __pyx_v_kings, __pyx_v_7ChessAI_prevKings, __pyx_v_occupied_white, __pyx_v_occupied_black, __pyx_v_occupied));

    /* "ChessAI - Copy.pyx":1622
 * 
 * 
 *         target_move = board.peek()             # <<<<<<<<<<<<<<
 * 
 *         if (is_capture(target_move.from_square, target_move.to_square, board.occupied_co[not board.turn], board.is_en_passant(target_move))):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_peek); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_target_move = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ChessAI - Copy.pyx":1624
 *         target_move = board.peek()
 * 
 *         if (is_capture(target_move.from_square, target_move.to_square, board.occupied_co[not board.turn], board.is_en_passant(target_move))):             # <<<<<<<<<<<<<<
 *             #if (board.is_capture(target_move)):
 *             target_square = target_move.to_square
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_target_move, __pyx_n_s_from_square); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyInt_As_uint8_t(__pyx_t_1); if (unlikely((__pyx_t_7 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_target_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyInt_As_uint8_t(__pyx_t_1); if (unlikely((__pyx_t_8 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_occupied_co); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_turn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = (!__pyx_t_4);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_9, int, 1, __Pyx_PyBool_FromLong, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_is_en_passant); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v_target_move) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_target_move);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = (is_capture(__pyx_t_7, __pyx_t_8, __pyx_t_2, __pyx_t_9) != 0);
    if (__pyx_t_4) {

      /* "ChessAI - Copy.pyx":1626
 *         if (is_capture(target_move.from_square, target_move.to_square, board.occupied_co[not board.turn], board.is_en_passant(target_move))):
 *             #if (board.is_capture(target_move)):
 *             target_square = target_move.to_square             # <<<<<<<<<<<<<<
 *             #for move in board.generate_legal_captures():
 *             for move in Cython_Chess.generate_legal_captures(board,chess.BB_ALL,chess.BB_ALL):
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_target_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_target_square = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "ChessAI - Copy.pyx":1628
 *             target_square = target_move.to_square
 *             #for move in board.generate_legal_captures():
 *             for move in Cython_Chess.generate_legal_captures(board,chess.BB_ALL,chess.BB_ALL):             # <<<<<<<<<<<<<<
 *                 if move.to_square == target_square:
 *                     if (board.turn):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Cython_Chess); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_generate_legal_captures); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_chess); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_BB_ALL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_chess); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_BB_ALL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_board, __pyx_t_10, __pyx_t_11};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1628, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_board, __pyx_t_10, __pyx_t_11};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1628, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      {
        __pyx_t_12 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1628, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_INCREF(__pyx_v_board);
        __Pyx_GIVEREF(__pyx_v_board);
        PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_6, __pyx_v_board);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_6, __pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_12, 2+__pyx_t_6, __pyx_t_11);
        __pyx_t_10 = 0;
        __pyx_t_11 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1628, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5); __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_13 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1628, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_14 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1628, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 1628, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1628, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 1628, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1628, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_14(__pyx_t_5);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1628, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_move, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "ChessAI - Copy.pyx":1629
 *             #for move in board.generate_legal_captures():
 *             for move in Cython_Chess.generate_legal_captures(board,chess.BB_ALL,chess.BB_ALL):
 *                 if move.to_square == target_square:             # <<<<<<<<<<<<<<
 *                     if (board.turn):
 *                         total -= values[board.piece_type_at(target_square)]
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_move, __pyx_n_s_to_square); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1629, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_12 = PyObject_RichCompare(__pyx_t_3, __pyx_v_target_square, Py_EQ); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1629, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1629, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (__pyx_t_4) {

          /* "ChessAI - Copy.pyx":1630
 *             for move in Cython_Chess.generate_legal_captures(board,chess.BB_ALL,chess.BB_ALL):
 *                 if move.to_square == target_square:
 *                     if (board.turn):             # <<<<<<<<<<<<<<
 *                         total -= values[board.piece_type_at(target_square)]
 * 
 */
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_turn); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1630, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1630, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__pyx_t_4) {

            /* "ChessAI - Copy.pyx":1631
 *                 if move.to_square == target_square:
 *                     if (board.turn):
 *                         total -= values[board.piece_type_at(target_square)]             # <<<<<<<<<<<<<<
 * 
 *                     else:
 */
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_piece_type_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1631, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_11 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_11)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_11);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_12 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_11, __pyx_v_target_square) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_target_square);
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1631, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_t_12); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1631, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_v_total = (__pyx_v_total - (__pyx_v_7ChessAI_values[__pyx_t_15]));

            /* "ChessAI - Copy.pyx":1630
 *             for move in Cython_Chess.generate_legal_captures(board,chess.BB_ALL,chess.BB_ALL):
 *                 if move.to_square == target_square:
 *                     if (board.turn):             # <<<<<<<<<<<<<<
 *                         total -= values[board.piece_type_at(target_square)]
 * 
 */
            goto __pyx_L10;
          }

          /* "ChessAI - Copy.pyx":1634
 * 
 *                     else:
 *                         total += values[board.piece_type_at(target_square)]             # <<<<<<<<<<<<<<
 *                     horizonMitigation = True
 *                     break
 */
          /*else*/ {
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_piece_type_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1634, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_11 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_11)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_11);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_12 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_11, __pyx_v_target_square) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_target_square);
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1634, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_t_12); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1634, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_v_total = (__pyx_v_total + (__pyx_v_7ChessAI_values[__pyx_t_15]));
          }
          __pyx_L10:;

          /* "ChessAI - Copy.pyx":1635
 *                     else:
 *                         total += values[board.piece_type_at(target_square)]
 *                     horizonMitigation = True             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
          __pyx_v_horizonMitigation = 1;

          /* "ChessAI - Copy.pyx":1636
 *                         total += values[board.piece_type_at(target_square)]
 *                     horizonMitigation = True
 *                     break             # <<<<<<<<<<<<<<
 * 
 *     #print(board.fen)
 */
          goto __pyx_L8_break;

          /* "ChessAI - Copy.pyx":1629
 *             #for move in board.generate_legal_captures():
 *             for move in Cython_Chess.generate_legal_captures(board,chess.BB_ALL,chess.BB_ALL):
 *                 if move.to_square == target_square:             # <<<<<<<<<<<<<<
 *                     if (board.turn):
 *                         total -= values[board.piece_type_at(target_square)]
 */
        }

        /* "ChessAI - Copy.pyx":1628
 *             target_square = target_move.to_square
 *             #for move in board.generate_legal_captures():
 *             for move in Cython_Chess.generate_legal_captures(board,chess.BB_ALL,chess.BB_ALL):             # <<<<<<<<<<<<<<
 *                 if move.to_square == target_square:
 *                     if (board.turn):
 */
      }
      __pyx_L8_break:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "ChessAI - Copy.pyx":1624
 *         target_move = board.peek()
 * 
 *         if (is_capture(target_move.from_square, target_move.to_square, board.occupied_co[not board.turn], board.is_en_passant(target_move))):             # <<<<<<<<<<<<<<
 *             #if (board.is_capture(target_move)):
 *             target_square = target_move.to_square
 */
    }
  }
  __pyx_L4:;

  /* "ChessAI - Copy.pyx":1654
 *     # if (total == 3825):
 *     #     print(board.fen(),total)
 *     if not(horizonMitigation):             # <<<<<<<<<<<<<<
 *         addToCache(zobrist, total)
 *     # if (board == chess.Board("5rk1/p1p4p/2p5/3p1pB1/8/1r5P/P1P1BK2/RN6 w - - 0 20")):
 */
  __pyx_t_4 = ((!(__pyx_v_horizonMitigation != 0)) != 0);
  if (__pyx_t_4) {

    /* "ChessAI - Copy.pyx":1655
 *     #     print(board.fen(),total)
 *     if not(horizonMitigation):
 *         addToCache(zobrist, total)             # <<<<<<<<<<<<<<
 *     # if (board == chess.Board("5rk1/p1p4p/2p5/3p1pB1/8/1r5P/P1P1BK2/RN6 w - - 0 20")):
 *     #     print (total, board.move_stack)
 */
    addToCache(__pyx_v_zobrist, __pyx_v_total);

    /* "ChessAI - Copy.pyx":1654
 *     # if (total == 3825):
 *     #     print(board.fen(),total)
 *     if not(horizonMitigation):             # <<<<<<<<<<<<<<
 *         addToCache(zobrist, total)
 *     # if (board == chess.Board("5rk1/p1p4p/2p5/3p1pB1/8/1r5P/P1P1BK2/RN6 w - - 0 20")):
 */
  }

  /* "ChessAI - Copy.pyx":1658
 *     # if (board == chess.Board("5rk1/p1p4p/2p5/3p1pB1/8/1r5P/P1P1BK2/RN6 w - - 0 20")):
 *     #     print (total, board.move_stack)
 *     return total             # <<<<<<<<<<<<<<
 * 
 * cdef int move_index(object board, object move1, object move2):
 */
  __pyx_r = __pyx_v_total;
  goto __pyx_L0;

  /* "ChessAI - Copy.pyx":1549
 * @cython.nonecheck(False)
 * @cython.ccall
 * cdef int evaluate_board(object board,uint64_t zobrist):             # <<<<<<<<<<<<<<
 * 
 *     cdef uint64_t pawns = board.pawns
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("ChessAI.evaluate_board", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_target_square);
  __Pyx_XDECREF(__pyx_v_target_move);
  __Pyx_XDECREF(__pyx_v_move);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ChessAI - Copy.pyx":1660
 *     return total
 * 
 * cdef int move_index(object board, object move1, object move2):             # <<<<<<<<<<<<<<
 * 
 *     cdef int index
 */

static int __pyx_f_7ChessAI_move_index(PyObject *__pyx_v_board, PyObject *__pyx_v_move1, PyObject *__pyx_v_move2) {
  int __pyx_v_index;
  PyObject *__pyx_v_move = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("move_index", 0);

  /* "ChessAI - Copy.pyx":1665
 *     cdef object move
 * 
 *     for index, move in enumerate(board.move_stack):             # <<<<<<<<<<<<<<
 *         if move == move1 or move == move2:
 *             return index
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_board, __pyx_n_s_move_stack); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1665, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1665, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1665, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1665, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1665, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1665, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_move, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_v_index = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "ChessAI - Copy.pyx":1666
 * 
 *     for index, move in enumerate(board.move_stack):
 *         if move == move1 or move == move2:             # <<<<<<<<<<<<<<
 *             return index
 *     return -1
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_move, __pyx_v_move1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1666, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1666, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_move, __pyx_v_move2, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1666, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1666, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "ChessAI - Copy.pyx":1667
 *     for index, move in enumerate(board.move_stack):
 *         if move == move1 or move == move2:
 *             return index             # <<<<<<<<<<<<<<
 *     return -1
 * 
 */
      __pyx_r = __pyx_v_index;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "ChessAI - Copy.pyx":1666
 * 
 *     for index, move in enumerate(board.move_stack):
 *         if move == move1 or move == move2:             # <<<<<<<<<<<<<<
 *             return index
 *     return -1
 */
    }

    /* "ChessAI - Copy.pyx":1665
 *     cdef object move
 * 
 *     for index, move in enumerate(board.move_stack):             # <<<<<<<<<<<<<<
 *         if move == move1 or move == move2:
 *             return index
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ChessAI - Copy.pyx":1668
 *         if move == move1 or move == move2:
 *             return index
 *     return -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = -1;
  goto __pyx_L0;

  /* "ChessAI - Copy.pyx":1660
 *     return total
 * 
 * cdef int move_index(object board, object move1, object move2):             # <<<<<<<<<<<<<<
 * 
 *     cdef int index
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("ChessAI.move_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_move);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/array.pxd":93
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cpython_5array_5array___getbuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags) {
  Py_ssize_t __pyx_v_item_count;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  char __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "cpython/array.pxd":98
 *             # In particular strided access is always provided regardless
 *             # of flags
 *             item_count = Py_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *             info.suboffsets = NULL
 */
  __pyx_v_item_count = Py_SIZE(((PyObject *)__pyx_v_self));

  /* "cpython/array.pxd":100
 *             item_count = Py_SIZE(self)
 * 
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "cpython/array.pxd":101
 * 
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars             # <<<<<<<<<<<<<<
 *             info.readonly = 0
 *             info.ndim = 1
 */
  __pyx_t_1 = __pyx_v_self->data.as_chars;
  __pyx_v_info->buf = __pyx_t_1;

  /* "cpython/array.pxd":102
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars
 *             info.readonly = 0             # <<<<<<<<<<<<<<
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 */
  __pyx_v_info->readonly = 0;

  /* "cpython/array.pxd":103
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 *             info.ndim = 1             # <<<<<<<<<<<<<<
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count
 */
  __pyx_v_info->ndim = 1;

  /* "cpython/array.pxd":104
 *             info.readonly = 0
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)             # <<<<<<<<<<<<<<
 *             info.len = info.itemsize * item_count
 * 
 */
  __pyx_t_2 = __pyx_v_self->ob_descr->itemsize;
  __pyx_v_info->itemsize = __pyx_t_2;

  /* "cpython/array.pxd":105
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count             # <<<<<<<<<<<<<<
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 */
  __pyx_v_info->len = (__pyx_v_info->itemsize * __pyx_v_item_count);

  /* "cpython/array.pxd":107
 *             info.len = info.itemsize * item_count
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)             # <<<<<<<<<<<<<<
 *             if not info.shape:
 *                 raise MemoryError()
 */
  __pyx_v_info->shape = ((Py_ssize_t *)PyObject_Malloc(((sizeof(Py_ssize_t)) + 2)));

  /* "cpython/array.pxd":108
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */
  __pyx_t_3 = ((!(__pyx_v_info->shape != 0)) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "cpython/array.pxd":109
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize
 */
    PyErr_NoMemory(); __PYX_ERR(2, 109, __pyx_L1_error)

    /* "cpython/array.pxd":108
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */
  }

  /* "cpython/array.pxd":110
 *             if not info.shape:
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing             # <<<<<<<<<<<<<<
 *             info.strides = &info.itemsize
 * 
 */
  (__pyx_v_info->shape[0]) = __pyx_v_item_count;

  /* "cpython/array.pxd":111
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize             # <<<<<<<<<<<<<<
 * 
 *             info.format = <char*> (info.shape + 1)
 */
  __pyx_v_info->strides = (&__pyx_v_info->itemsize);

  /* "cpython/array.pxd":113
 *             info.strides = &info.itemsize
 * 
 *             info.format = <char*> (info.shape + 1)             # <<<<<<<<<<<<<<
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 */
  __pyx_v_info->format = ((char *)(__pyx_v_info->shape + 1));

  /* "cpython/array.pxd":114
 * 
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode             # <<<<<<<<<<<<<<
 *             info.format[1] = 0
 *             info.obj = self
 */
  __pyx_t_4 = __pyx_v_self->ob_descr->typecode;
  (__pyx_v_info->format[0]) = __pyx_t_4;

  /* "cpython/array.pxd":115
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0             # <<<<<<<<<<<<<<
 *             info.obj = self
 * 
 */
  (__pyx_v_info->format[1]) = 0;

  /* "cpython/array.pxd":116
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "cpython/array.pxd":93
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpython.array.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/array.pxd":118
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyObject_Free(info.shape)
 * 
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_7cpython_5array_5array_2__releasebuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "cpython/array.pxd":119
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 *             PyObject_Free(info.shape)             # <<<<<<<<<<<<<<
 * 
 *     array newarrayobject(PyTypeObject* type, Py_ssize_t size, arraydescr *descr)
 */
  PyObject_Free(__pyx_v_info->shape);

  /* "cpython/array.pxd":118
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyObject_Free(info.shape)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cpython/array.pxd":130
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_clone(arrayobject *__pyx_v_template, Py_ssize_t __pyx_v_length, int __pyx_v_zero) {
  arrayobject *__pyx_v_op = 0;
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "cpython/array.pxd":134
 *     type will be same as template.
 *     if zero is true, new array will be initialized with zeroes."""
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)             # <<<<<<<<<<<<<<
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 */
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_template)), __pyx_v_length, __pyx_v_template->ob_descr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_op = ((arrayobject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cpython/array.pxd":135
 *     if zero is true, new array will be initialized with zeroes."""
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */
  __pyx_t_3 = (__pyx_v_zero != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (((PyObject *)__pyx_v_op) != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "cpython/array.pxd":136
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */
    (void)(memset(__pyx_v_op->data.as_chars, 0, (__pyx_v_length * __pyx_v_op->ob_descr->itemsize)));

    /* "cpython/array.pxd":135
 *     if zero is true, new array will be initialized with zeroes."""
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */
  }

  /* "cpython/array.pxd":137
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline array copy(array self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_op));
  __pyx_r = __pyx_v_op;
  goto __pyx_L0;

  /* "cpython/array.pxd":130
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.array.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_op);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/array.pxd":139
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_copy(arrayobject *__pyx_v_self) {
  arrayobject *__pyx_v_op = 0;
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "cpython/array.pxd":141
 * cdef inline array copy(array self):
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)             # <<<<<<<<<<<<<<
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op
 */
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_self)), Py_SIZE(((PyObject *)__pyx_v_self)), __pyx_v_self->ob_descr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_op = ((arrayobject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cpython/array.pxd":142
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */
  (void)(memcpy(__pyx_v_op->data.as_chars, __pyx_v_self->data.as_chars, (Py_SIZE(((PyObject *)__pyx_v_op)) * __pyx_v_op->ob_descr->itemsize)));

  /* "cpython/array.pxd":143
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_op));
  __pyx_r = __pyx_v_op;
  goto __pyx_L0;

  /* "cpython/array.pxd":139
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.array.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_op);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/array.pxd":145
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficient appending of new stuff of same type
 *     (e.g. of same array type)
 */

static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *__pyx_v_self, char *__pyx_v_stuff, Py_ssize_t __pyx_v_n) {
  Py_ssize_t __pyx_v_itemsize;
  Py_ssize_t __pyx_v_origsize;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extend_buffer", 0);

  /* "cpython/array.pxd":149
 *     (e.g. of same array type)
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 */
  __pyx_t_1 = __pyx_v_self->ob_descr->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "cpython/array.pxd":150
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)             # <<<<<<<<<<<<<<
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 */
  __pyx_v_origsize = Py_SIZE(((PyObject *)__pyx_v_self));

  /* "cpython/array.pxd":151
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)             # <<<<<<<<<<<<<<
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0
 */
  __pyx_t_1 = resize_smart(__pyx_v_self, (__pyx_v_origsize + __pyx_v_n)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 151, __pyx_L1_error)

  /* "cpython/array.pxd":152
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  (void)(memcpy((__pyx_v_self->data.as_chars + (__pyx_v_origsize * __pyx_v_itemsize)), __pyx_v_stuff, (__pyx_v_n * __pyx_v_itemsize)));

  /* "cpython/array.pxd":153
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend(array self, array other) except -1:
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "cpython/array.pxd":145
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficient appending of new stuff of same type
 *     (e.g. of same array type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpython.array.extend_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/array.pxd":155
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

static CYTHON_INLINE int __pyx_f_7cpython_5array_extend(arrayobject *__pyx_v_self, arrayobject *__pyx_v_other) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extend", 0);

  /* "cpython/array.pxd":157
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */
  __pyx_t_1 = ((__pyx_v_self->ob_descr->typecode != __pyx_v_other->ob_descr->typecode) != 0);
  if (__pyx_t_1) {

    /* "cpython/array.pxd":158
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()             # <<<<<<<<<<<<<<
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 */
    __pyx_t_2 = PyErr_BadArgument(); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(2, 158, __pyx_L1_error)

    /* "cpython/array.pxd":157
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */
  }

  /* "cpython/array.pxd":159
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))             # <<<<<<<<<<<<<<
 * 
 * cdef inline void zero(array self):
 */
  __pyx_t_2 = __pyx_f_7cpython_5array_extend_buffer(__pyx_v_self, __pyx_v_other->data.as_chars, Py_SIZE(((PyObject *)__pyx_v_other))); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(2, 159, __pyx_L1_error)
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "cpython/array.pxd":155
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpython.array.extend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/array.pxd":161
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

static CYTHON_INLINE void __pyx_f_7cpython_5array_zero(arrayobject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero", 0);

  /* "cpython/array.pxd":163
 * cdef inline void zero(array self):
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 */
  (void)(memset(__pyx_v_self->data.as_chars, 0, (Py_SIZE(((PyObject *)__pyx_v_self)) * __pyx_v_self->ob_descr->itemsize)));

  /* "cpython/array.pxd":161
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":731
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":732
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":731
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":734
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":734
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":748
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":750
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":926
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":927
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":928
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_t_1 = PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 928, __pyx_L1_error)

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":926
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":930
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":931
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":932
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":933
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":932
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":934
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":930
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":938
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":939
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":940
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 940, __pyx_L3_error)

      /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":939
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":941
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 941, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":942
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 942, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 942, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":939
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":938
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":944
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":945
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":946
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 946, __pyx_L3_error)

      /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":945
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":947
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 947, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":948
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 948, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 948, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":945
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":944
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":950
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":951
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":952
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 952, __pyx_L3_error)

      /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":951
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":953
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 953, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":954
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 954, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 954, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":951
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":950
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":964
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":976
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":964
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":979
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":991
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":979
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":994
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":1001
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":994
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":1004
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":1008
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":1004
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":1011
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":1015
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":1011
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}
static struct __pyx_vtabstruct_7ChessAI_ChessAI __pyx_vtable_7ChessAI_ChessAI;

static PyObject *__pyx_tp_new_7ChessAI_ChessAI(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7ChessAI_ChessAI *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7ChessAI_ChessAI *)o);
  p->__pyx_vtab = __pyx_vtabptr_7ChessAI_ChessAI;
  p->blackModel = Py_None; Py_INCREF(Py_None);
  p->whiteModel = Py_None; Py_INCREF(Py_None);
  p->pgnBoard = Py_None; Py_INCREF(Py_None);
  p->move_times = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->moves_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->alpha_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->beta_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->beta_move_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7ChessAI_7ChessAI_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7ChessAI_ChessAI(PyObject *o) {
  struct __pyx_obj_7ChessAI_ChessAI *p = (struct __pyx_obj_7ChessAI_ChessAI *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->blackModel);
  Py_CLEAR(p->whiteModel);
  Py_CLEAR(p->pgnBoard);
  Py_CLEAR(p->move_times);
  Py_CLEAR(p->moves_list);
  Py_CLEAR(p->alpha_list);
  Py_CLEAR(p->beta_list);
  Py_CLEAR(p->beta_move_list);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7ChessAI_ChessAI(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7ChessAI_ChessAI *p = (struct __pyx_obj_7ChessAI_ChessAI *)o;
  if (p->blackModel) {
    e = (*v)(p->blackModel, a); if (e) return e;
  }
  if (p->whiteModel) {
    e = (*v)(p->whiteModel, a); if (e) return e;
  }
  if (p->pgnBoard) {
    e = (*v)(p->pgnBoard, a); if (e) return e;
  }
  if (p->move_times) {
    e = (*v)(p->move_times, a); if (e) return e;
  }
  if (p->moves_list) {
    e = (*v)(p->moves_list, a); if (e) return e;
  }
  if (p->alpha_list) {
    e = (*v)(p->alpha_list, a); if (e) return e;
  }
  if (p->beta_list) {
    e = (*v)(p->beta_list, a); if (e) return e;
  }
  if (p->beta_move_list) {
    e = (*v)(p->beta_move_list, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7ChessAI_ChessAI(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7ChessAI_ChessAI *p = (struct __pyx_obj_7ChessAI_ChessAI *)o;
  tmp = ((PyObject*)p->blackModel);
  p->blackModel = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->whiteModel);
  p->whiteModel = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->pgnBoard);
  p->pgnBoard = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->move_times);
  p->move_times = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->moves_list);
  p->moves_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->alpha_list);
  p->alpha_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->beta_list);
  p->beta_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->beta_move_list);
  p->beta_move_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7ChessAI_ChessAI[] = {
  {"setWhiteCastledIndex", (PyCFunction)__pyx_pw_7ChessAI_7ChessAI_3setWhiteCastledIndex, METH_O, 0},
  {"setBlackCastledIndex", (PyCFunction)__pyx_pw_7ChessAI_7ChessAI_5setBlackCastledIndex, METH_O, 0},
  {"alphaBetaWrapper", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7ChessAI_7ChessAI_7alphaBetaWrapper, METH_VARARGS|METH_KEYWORDS, 0},
  {"ev", (PyCFunction)__pyx_pw_7ChessAI_7ChessAI_9ev, METH_O, 0},
  {"reorder_capture_moves", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7ChessAI_7ChessAI_11reorder_capture_moves, METH_VARARGS|METH_KEYWORDS, 0},
  {"non_quiescence_moves", (PyCFunction)__pyx_pw_7ChessAI_7ChessAI_14non_quiescence_moves, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7ChessAI_7ChessAI_17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7ChessAI_7ChessAI_19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7ChessAI_ChessAI = {
  PyVarObject_HEAD_INIT(0, 0)
  "ChessAI.ChessAI", /*tp_name*/
  sizeof(struct __pyx_obj_7ChessAI_ChessAI), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7ChessAI_ChessAI, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7ChessAI_ChessAI, /*tp_traverse*/
  __pyx_tp_clear_7ChessAI_ChessAI, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7ChessAI_ChessAI, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7ChessAI_ChessAI, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves *__pyx_freelist_7ChessAI___pyx_scope_struct__reorder_capture_moves[8];
static int __pyx_freecount_7ChessAI___pyx_scope_struct__reorder_capture_moves = 0;

static PyObject *__pyx_tp_new_7ChessAI___pyx_scope_struct__reorder_capture_moves(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7ChessAI___pyx_scope_struct__reorder_capture_moves > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves)))) {
    o = (PyObject*)__pyx_freelist_7ChessAI___pyx_scope_struct__reorder_capture_moves[--__pyx_freecount_7ChessAI___pyx_scope_struct__reorder_capture_moves];
    memset(o, 0, sizeof(struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7ChessAI___pyx_scope_struct__reorder_capture_moves(PyObject *o) {
  struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves *p = (struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_board);
  Py_CLEAR(p->__pyx_v_move);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7ChessAI___pyx_scope_struct__reorder_capture_moves < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves)))) {
    __pyx_freelist_7ChessAI___pyx_scope_struct__reorder_capture_moves[__pyx_freecount_7ChessAI___pyx_scope_struct__reorder_capture_moves++] = ((struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7ChessAI___pyx_scope_struct__reorder_capture_moves(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves *p = (struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves *)o;
  if (p->__pyx_v_board) {
    e = (*v)(p->__pyx_v_board, a); if (e) return e;
  }
  if (p->__pyx_v_move) {
    e = (*v)(p->__pyx_v_move, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_7ChessAI___pyx_scope_struct__reorder_capture_moves = {
  PyVarObject_HEAD_INIT(0, 0)
  "ChessAI.__pyx_scope_struct__reorder_capture_moves", /*tp_name*/
  sizeof(struct __pyx_obj_7ChessAI___pyx_scope_struct__reorder_capture_moves), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7ChessAI___pyx_scope_struct__reorder_capture_moves, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7ChessAI___pyx_scope_struct__reorder_capture_moves, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7ChessAI___pyx_scope_struct__reorder_capture_moves, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves *__pyx_freelist_7ChessAI___pyx_scope_struct_1_non_quiescence_moves[8];
static int __pyx_freecount_7ChessAI___pyx_scope_struct_1_non_quiescence_moves = 0;

static PyObject *__pyx_tp_new_7ChessAI___pyx_scope_struct_1_non_quiescence_moves(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7ChessAI___pyx_scope_struct_1_non_quiescence_moves > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves)))) {
    o = (PyObject*)__pyx_freelist_7ChessAI___pyx_scope_struct_1_non_quiescence_moves[--__pyx_freecount_7ChessAI___pyx_scope_struct_1_non_quiescence_moves];
    memset(o, 0, sizeof(struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7ChessAI___pyx_scope_struct_1_non_quiescence_moves(PyObject *o) {
  struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves *p = (struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_board);
  Py_CLEAR(p->__pyx_v_move);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7ChessAI___pyx_scope_struct_1_non_quiescence_moves < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves)))) {
    __pyx_freelist_7ChessAI___pyx_scope_struct_1_non_quiescence_moves[__pyx_freecount_7ChessAI___pyx_scope_struct_1_non_quiescence_moves++] = ((struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7ChessAI___pyx_scope_struct_1_non_quiescence_moves(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves *p = (struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves *)o;
  if (p->__pyx_v_board) {
    e = (*v)(p->__pyx_v_board, a); if (e) return e;
  }
  if (p->__pyx_v_move) {
    e = (*v)(p->__pyx_v_move, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_7ChessAI___pyx_scope_struct_1_non_quiescence_moves = {
  PyVarObject_HEAD_INIT(0, 0)
  "ChessAI.__pyx_scope_struct_1_non_quiescence_moves", /*tp_name*/
  sizeof(struct __pyx_obj_7ChessAI___pyx_scope_struct_1_non_quiescence_moves), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7ChessAI___pyx_scope_struct_1_non_quiescence_moves, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7ChessAI___pyx_scope_struct_1_non_quiescence_moves, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7ChessAI___pyx_scope_struct_1_non_quiescence_moves, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_ChessAI(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_ChessAI},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ChessAI",
    __pyx_k_Created_on_Tue_Jul_30_16_32_26, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_Average_Static_Analysis_Speed, __pyx_k_Average_Static_Analysis_Speed, sizeof(__pyx_k_Average_Static_Analysis_Speed), 0, 1, 0, 0},
  {&__pyx_n_s_BB_ALL, __pyx_k_BB_ALL, sizeof(__pyx_k_BB_ALL), 0, 0, 1, 1},
  {&__pyx_kp_u_BLACK_CASTLED, __pyx_k_BLACK_CASTLED, sizeof(__pyx_k_BLACK_CASTLED), 0, 1, 0, 0},
  {&__pyx_kp_u_BLACK_CASTLING_LOST, __pyx_k_BLACK_CASTLING_LOST, sizeof(__pyx_k_BLACK_CASTLING_LOST), 0, 1, 0, 0},
  {&__pyx_kp_u_Best, __pyx_k_Best, sizeof(__pyx_k_Best), 0, 1, 0, 0},
  {&__pyx_kp_u_Best_Move, __pyx_k_Best_Move, sizeof(__pyx_k_Best_Move), 0, 1, 0, 0},
  {&__pyx_n_s_Board, __pyx_k_Board, sizeof(__pyx_k_Board), 0, 0, 1, 1},
  {&__pyx_n_s_ChessAI, __pyx_k_ChessAI, sizeof(__pyx_k_ChessAI), 0, 0, 1, 1},
  {&__pyx_n_s_ChessAI_non_quiescence_moves, __pyx_k_ChessAI_non_quiescence_moves, sizeof(__pyx_k_ChessAI_non_quiescence_moves), 0, 0, 1, 1},
  {&__pyx_n_s_ChessAI_opening_book_locals_lamb, __pyx_k_ChessAI_opening_book_locals_lamb, sizeof(__pyx_k_ChessAI_opening_book_locals_lamb), 0, 0, 1, 1},
  {&__pyx_n_s_ChessAI_reorder_capture_moves, __pyx_k_ChessAI_reorder_capture_moves, sizeof(__pyx_k_ChessAI_reorder_capture_moves), 0, 0, 1, 1},
  {&__pyx_n_s_Cython_Chess, __pyx_k_Cython_Chess, sizeof(__pyx_k_Cython_Chess), 0, 0, 1, 1},
  {&__pyx_kp_u_Evaluation, __pyx_k_Evaluation, sizeof(__pyx_k_Evaluation), 0, 1, 0, 0},
  {&__pyx_kp_u_Evaluation_Book_Move, __pyx_k_Evaluation_Book_Move, sizeof(__pyx_k_Evaluation_Book_Move), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_Iterator, __pyx_k_Iterator, sizeof(__pyx_k_Iterator), 0, 0, 1, 1},
  {&__pyx_kp_u_Learn, __pyx_k_Learn, sizeof(__pyx_k_Learn), 0, 1, 0, 0},
  {&__pyx_kp_u_M11_2_bin, __pyx_k_M11_2_bin, sizeof(__pyx_k_M11_2_bin), 0, 1, 0, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_Model, __pyx_k_Model, sizeof(__pyx_k_Model), 0, 0, 1, 1},
  {&__pyx_kp_u_Move, __pyx_k_Move, sizeof(__pyx_k_Move), 0, 1, 0, 0},
  {&__pyx_n_s_Move_2, __pyx_k_Move_2, sizeof(__pyx_k_Move_2), 0, 0, 1, 1},
  {&__pyx_kp_u_Num_Moves, __pyx_k_Num_Moves, sizeof(__pyx_k_Num_Moves), 0, 1, 0, 0},
  {&__pyx_n_s_Parallel, __pyx_k_Parallel, sizeof(__pyx_k_Parallel), 0, 0, 1, 1},
  {&__pyx_kp_u_Positions_Analyzed, __pyx_k_Positions_Analyzed, sizeof(__pyx_k_Positions_Analyzed), 0, 1, 0, 0},
  {&__pyx_kp_u_TRYING_DEPTH, __pyx_k_TRYING_DEPTH, sizeof(__pyx_k_TRYING_DEPTH), 0, 1, 0, 0},
  {&__pyx_kp_u_Time_Taken, __pyx_k_Time_Taken, sizeof(__pyx_k_Time_Taken), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_WHITE_CASTLED, __pyx_k_WHITE_CASTLED, sizeof(__pyx_k_WHITE_CASTLED), 0, 1, 0, 0},
  {&__pyx_kp_u_WHITE_CASTLING_LOST, __pyx_k_WHITE_CASTLING_LOST, sizeof(__pyx_k_WHITE_CASTLING_LOST), 0, 1, 0, 0},
  {&__pyx_kp_u_Weight, __pyx_k_Weight, sizeof(__pyx_k_Weight), 0, 1, 0, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_bishops, __pyx_k_bishops, sizeof(__pyx_k_bishops), 0, 0, 1, 1},
  {&__pyx_n_s_black_model, __pyx_k_black_model, sizeof(__pyx_k_black_model), 0, 0, 1, 1},
  {&__pyx_n_s_board, __pyx_k_board, sizeof(__pyx_k_board), 0, 0, 1, 1},
  {&__pyx_n_s_chess, __pyx_k_chess, sizeof(__pyx_k_chess), 0, 0, 1, 1},
  {&__pyx_n_s_chess_polyglot, __pyx_k_chess_polyglot, sizeof(__pyx_k_chess_polyglot), 0, 0, 1, 1},
  {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_curDepth, __pyx_k_curDepth, sizeof(__pyx_k_curDepth), 0, 0, 1, 1},
  {&__pyx_n_s_default_timer, __pyx_k_default_timer, sizeof(__pyx_k_default_timer), 0, 0, 1, 1},
  {&__pyx_n_s_delayed, __pyx_k_delayed, sizeof(__pyx_k_delayed), 0, 0, 1, 1},
  {&__pyx_n_s_depthLimit, __pyx_k_depthLimit, sizeof(__pyx_k_depthLimit), 0, 0, 1, 1},
  {&__pyx_n_u_e1c1, __pyx_k_e1c1, sizeof(__pyx_k_e1c1), 0, 1, 0, 1},
  {&__pyx_n_u_e1g1, __pyx_k_e1g1, sizeof(__pyx_k_e1g1), 0, 1, 0, 1},
  {&__pyx_n_u_e8c8, __pyx_k_e8c8, sizeof(__pyx_k_e8c8), 0, 1, 0, 1},
  {&__pyx_n_u_e8g8, __pyx_k_e8g8, sizeof(__pyx_k_e8g8), 0, 1, 0, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_find_all, __pyx_k_find_all, sizeof(__pyx_k_find_all), 0, 0, 1, 1},
  {&__pyx_n_s_from_square, __pyx_k_from_square, sizeof(__pyx_k_from_square), 0, 0, 1, 1},
  {&__pyx_n_s_from_uci, __pyx_k_from_uci, sizeof(__pyx_k_from_uci), 0, 0, 1, 1},
  {&__pyx_n_s_functools, __pyx_k_functools, sizeof(__pyx_k_functools), 0, 0, 1, 1},
  {&__pyx_n_s_generate_legal_captures, __pyx_k_generate_legal_captures, sizeof(__pyx_k_generate_legal_captures), 0, 0, 1, 1},
  {&__pyx_n_s_generate_legal_moves, __pyx_k_generate_legal_moves, sizeof(__pyx_k_generate_legal_moves), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_gives_check, __pyx_k_gives_check, sizeof(__pyx_k_gives_check), 0, 0, 1, 1},
  {&__pyx_n_s_has_castling_rights, __pyx_k_has_castling_rights, sizeof(__pyx_k_has_castling_rights), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_inititalize, __pyx_k_inititalize, sizeof(__pyx_k_inititalize), 0, 0, 1, 1},
  {&__pyx_n_s_is_castling, __pyx_k_is_castling, sizeof(__pyx_k_is_castling), 0, 0, 1, 1},
  {&__pyx_n_s_is_checkmate, __pyx_k_is_checkmate, sizeof(__pyx_k_is_checkmate), 0, 0, 1, 1},
  {&__pyx_n_s_is_en_passant, __pyx_k_is_en_passant, sizeof(__pyx_k_is_en_passant), 0, 0, 1, 1},
  {&__pyx_n_s_is_repetition, __pyx_k_is_repetition, sizeof(__pyx_k_is_repetition), 0, 0, 1, 1},
  {&__pyx_n_s_is_stalemate, __pyx_k_is_stalemate, sizeof(__pyx_k_is_stalemate), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_joblib, __pyx_k_joblib, sizeof(__pyx_k_joblib), 0, 0, 1, 1},
  {&__pyx_n_s_json, __pyx_k_json, sizeof(__pyx_k_json), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_kings, __pyx_k_kings, sizeof(__pyx_k_kings), 0, 0, 1, 1},
  {&__pyx_n_s_knights, __pyx_k_knights, sizeof(__pyx_k_knights), 0, 0, 1, 1},
  {&__pyx_n_s_learn, __pyx_k_learn, sizeof(__pyx_k_learn), 0, 0, 1, 1},
  {&__pyx_n_s_lru_cache, __pyx_k_lru_cache, sizeof(__pyx_k_lru_cache), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_marshal, __pyx_k_marshal, sizeof(__pyx_k_marshal), 0, 0, 1, 1},
  {&__pyx_n_s_mask, __pyx_k_mask, sizeof(__pyx_k_mask), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_move, __pyx_k_move, sizeof(__pyx_k_move), 0, 0, 1, 1},
  {&__pyx_n_s_moveSchema_pb2, __pyx_k_moveSchema_pb2, sizeof(__pyx_k_moveSchema_pb2), 0, 0, 1, 1},
  {&__pyx_n_s_move_stack, __pyx_k_move_stack, sizeof(__pyx_k_move_stack), 0, 0, 1, 1},
  {&__pyx_n_s_multiprocessing, __pyx_k_multiprocessing, sizeof(__pyx_k_multiprocessing), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_njit, __pyx_k_njit, sizeof(__pyx_k_njit), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_non_quiescence_moves, __pyx_k_non_quiescence_moves, sizeof(__pyx_k_non_quiescence_moves), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numba, __pyx_k_numba, sizeof(__pyx_k_numba), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_occupied, __pyx_k_occupied, sizeof(__pyx_k_occupied), 0, 0, 1, 1},
  {&__pyx_n_s_occupied_co, __pyx_k_occupied_co, sizeof(__pyx_k_occupied_co), 0, 0, 1, 1},
  {&__pyx_n_s_open_reader, __pyx_k_open_reader, sizeof(__pyx_k_open_reader), 0, 0, 1, 1},
  {&__pyx_n_s_pawns, __pyx_k_pawns, sizeof(__pyx_k_pawns), 0, 0, 1, 1},
  {&__pyx_n_s_peek, __pyx_k_peek, sizeof(__pyx_k_peek), 0, 0, 1, 1},
  {&__pyx_n_s_piece_type_at, __pyx_k_piece_type_at, sizeof(__pyx_k_piece_type_at), 0, 0, 1, 1},
  {&__pyx_n_s_ply, __pyx_k_ply, sizeof(__pyx_k_ply), 0, 0, 1, 1},
  {&__pyx_n_s_polyglot, __pyx_k_polyglot, sizeof(__pyx_k_polyglot), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_promotion, __pyx_k_promotion, sizeof(__pyx_k_promotion), 0, 0, 1, 1},
  {&__pyx_n_s_push, __pyx_k_push, sizeof(__pyx_k_push), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_queens, __pyx_k_queens, sizeof(__pyx_k_queens), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_reorder_capture_moves, __pyx_k_reorder_capture_moves, sizeof(__pyx_k_reorder_capture_moves), 0, 0, 1, 1},
  {&__pyx_n_s_rooks, __pyx_k_rooks, sizeof(__pyx_k_rooks), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_tensorflow, __pyx_k_tensorflow, sizeof(__pyx_k_tensorflow), 0, 0, 1, 1},
  {&__pyx_n_s_tensorflow_keras_models, __pyx_k_tensorflow_keras_models, sizeof(__pyx_k_tensorflow_keras_models), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_tf, __pyx_k_tf, sizeof(__pyx_k_tf), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_timeit, __pyx_k_timeit, sizeof(__pyx_k_timeit), 0, 0, 1, 1},
  {&__pyx_n_s_timer, __pyx_k_timer, sizeof(__pyx_k_timer), 0, 0, 1, 1},
  {&__pyx_n_s_to_square, __pyx_k_to_square, sizeof(__pyx_k_to_square), 0, 0, 1, 1},
  {&__pyx_n_s_turn, __pyx_k_turn, sizeof(__pyx_k_turn), 0, 0, 1, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_n_s_uci, __pyx_k_uci, sizeof(__pyx_k_uci), 0, 0, 1, 1},
  {&__pyx_n_s_weight, __pyx_k_weight, sizeof(__pyx_k_weight), 0, 0, 1, 1},
  {&__pyx_n_s_white_model, __pyx_k_white_model, sizeof(__pyx_k_white_model), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 157, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 196, __pyx_L1_error)
  __pyx_builtin_chr = __Pyx_GetBuiltinName(__pyx_n_s_chr); if (!__pyx_builtin_chr) __PYX_ERR(0, 294, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 412, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 1665, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(2, 109, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 942, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "ChessAI - Copy.pyx":240
 *                 if (whiteCastledIndex == -1):
 *                     if (self.pgnBoard.is_castling(move)):
 *                         print ("WHITE CASTLED")             # <<<<<<<<<<<<<<
 *                         whiteCastledIndex = self.pgnBoard.ply()
 *             else:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_WHITE_CASTLED); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "ChessAI - Copy.pyx":245
 *                 if (blackCastledIndex == -1):
 *                     if (self.pgnBoard.is_castling(move)):
 *                         print ("BLACK CASTLED")             # <<<<<<<<<<<<<<
 *                         blackCastledIndex = self.pgnBoard.ply()
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_BLACK_CASTLED); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "ChessAI - Copy.pyx":254
 *             if (whiteCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(True)):
 *                     print("WHITE CASTLING LOST")             # <<<<<<<<<<<<<<
 *                     whiteCastledIndex = 121
 *             if (blackCastledIndex == -1):
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_WHITE_CASTLING_LOST); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "ChessAI - Copy.pyx":258
 *             if (blackCastledIndex == -1):
 *                 if not(self.pgnBoard.has_castling_rights(False)):
 *                     print("BLACK CASTLING LOST")             # <<<<<<<<<<<<<<
 *                     blackCastledIndex = 121
 *         else:
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_BLACK_CASTLING_LOST); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "ChessAI - Copy.pyx":285
 *             t1 = timer()
 *             # Check if an entry exists in the opening book
 *             if not((a,b,c,d) == (-1,-1,-1,-1)):             # <<<<<<<<<<<<<<
 *                 print(a,b,c,d)
 *                 print()
 */
  __pyx_tuple__5 = PyTuple_Pack(4, __pyx_int_neg_1, __pyx_int_neg_1, __pyx_int_neg_1, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "ChessAI - Copy.pyx":288
 *                 print(a,b,c,d)
 *                 print()
 *                 print("Evaluation: Book Move")             # <<<<<<<<<<<<<<
 *                 print ("Time Taken: ", t1 - t0)
 *                 print("Move: ", self.pgnBoard.ply())
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Evaluation_Book_Move); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "ChessAI - Copy.pyx":406
 * 
 *         # Open the polyglot book
 *         with chess.polyglot.open_reader("M11.2.bin") as reader:             # <<<<<<<<<<<<<<
 *             # Find all entries for the current board position
 *             entries = list(reader.find_all(self.pgnBoard))
 */
  __pyx_tuple__7 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":942
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(3, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":948
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(3, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "ChessAI - Copy.pyx":91
 * cdef int whiteCastledIndex = -1
 * 
 * cdef object white_ksc = chess.Move.from_uci('e1g1')             # <<<<<<<<<<<<<<
 * cdef object white_qsc = chess.Move.from_uci('e1c1')
 * cdef object black_ksc = chess.Move.from_uci('e8g8')
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_n_u_e1g1); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "ChessAI - Copy.pyx":92
 * 
 * cdef object white_ksc = chess.Move.from_uci('e1g1')
 * cdef object white_qsc = chess.Move.from_uci('e1c1')             # <<<<<<<<<<<<<<
 * cdef object black_ksc = chess.Move.from_uci('e8g8')
 * cdef object black_qsc = chess.Move.from_uci('e8c8')
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_n_u_e1c1); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "ChessAI - Copy.pyx":93
 * cdef object white_ksc = chess.Move.from_uci('e1g1')
 * cdef object white_qsc = chess.Move.from_uci('e1c1')
 * cdef object black_ksc = chess.Move.from_uci('e8g8')             # <<<<<<<<<<<<<<
 * cdef object black_qsc = chess.Move.from_uci('e8c8')
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_u_e8g8); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "ChessAI - Copy.pyx":94
 * cdef object white_qsc = chess.Move.from_uci('e1c1')
 * cdef object black_ksc = chess.Move.from_uci('e8g8')
 * cdef object black_qsc = chess.Move.from_uci('e8c8')             # <<<<<<<<<<<<<<
 * 
 * cdef int values[7]
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_n_u_e8c8); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  __pyx_umethod_PyList_Type_copy.type = (PyObject*)&PyList_Type;
  __pyx_umethod_PyList_Type_pop.type = (PyObject*)&PyList_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_2_5 = PyFloat_FromDouble(2.5); if (unlikely(!__pyx_float_2_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_5_0 = PyFloat_FromDouble(5.0); if (unlikely(!__pyx_float_5_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_5_5 = PyFloat_FromDouble(5.5); if (unlikely(!__pyx_float_5_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_30 = PyInt_FromLong(30); if (unlikely(!__pyx_int_30)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_50 = PyInt_FromLong(50); if (unlikely(!__pyx_int_50)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_75 = PyInt_FromLong(75); if (unlikely(!__pyx_int_75)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100000000 = PyInt_FromLong(100000000L); if (unlikely(!__pyx_int_100000000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_7ChessAI_white_ksc = Py_None; Py_INCREF(Py_None);
  __pyx_v_7ChessAI_white_qsc = Py_None; Py_INCREF(Py_None);
  __pyx_v_7ChessAI_black_ksc = Py_None; Py_INCREF(Py_None);
  __pyx_v_7ChessAI_black_qsc = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_7ChessAI_ChessAI = &__pyx_vtable_7ChessAI_ChessAI;
  __pyx_vtable_7ChessAI_ChessAI.opening_book = (struct __pyx_t_7ChessAI_MoveData (*)(struct __pyx_obj_7ChessAI_ChessAI *, PyObject *, PyObject *))__pyx_f_7ChessAI_7ChessAI_opening_book;
  __pyx_vtable_7ChessAI_ChessAI.alphaBeta = (struct __pyx_t_7ChessAI_MoveData (*)(struct __pyx_obj_7ChessAI_ChessAI *, int, int, double))__pyx_f_7ChessAI_7ChessAI_alphaBeta;
  __pyx_vtable_7ChessAI_ChessAI.maximizer = (int (*)(struct __pyx_obj_7ChessAI_ChessAI *, int, int, int, int))__pyx_f_7ChessAI_7ChessAI_maximizer;
  __pyx_vtable_7ChessAI_ChessAI.minimizer = (int (*)(struct __pyx_obj_7ChessAI_ChessAI *, int, int, int, int, PyObject *, PyObject *))__pyx_f_7ChessAI_7ChessAI_minimizer;
  __pyx_vtable_7ChessAI_ChessAI.quiescenceMax = (int (*)(struct __pyx_obj_7ChessAI_ChessAI *, int, int, int))__pyx_f_7ChessAI_7ChessAI_quiescenceMax;
  __pyx_vtable_7ChessAI_ChessAI.quiescenceMin = (int (*)(struct __pyx_obj_7ChessAI_ChessAI *, int, int, int))__pyx_f_7ChessAI_7ChessAI_quiescenceMin;
  __pyx_vtable_7ChessAI_ChessAI.preMinimizer = (PyObject *(*)(struct __pyx_obj_7ChessAI_ChessAI *, int, int, int, int))__pyx_f_7ChessAI_7ChessAI_preMinimizer;
  __pyx_vtable_7ChessAI_ChessAI.reorder_legal_moves = (PyObject *(*)(struct __pyx_obj_7ChessAI_ChessAI *, int, int, PyObject *))__pyx_f_7ChessAI_7ChessAI_reorder_legal_moves;
  if (PyType_Ready(&__pyx_type_7ChessAI_ChessAI) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7ChessAI_ChessAI.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7ChessAI_ChessAI.tp_dictoffset && __pyx_type_7ChessAI_ChessAI.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7ChessAI_ChessAI.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7ChessAI_ChessAI.tp_dict, __pyx_vtabptr_7ChessAI_ChessAI) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ChessAI, (PyObject *)&__pyx_type_7ChessAI_ChessAI) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7ChessAI_ChessAI) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __pyx_ptype_7ChessAI_ChessAI = &__pyx_type_7ChessAI_ChessAI;
  if (PyType_Ready(&__pyx_type_7ChessAI___pyx_scope_struct__reorder_capture_moves) < 0) __PYX_ERR(0, 1393, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7ChessAI___pyx_scope_struct__reorder_capture_moves.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7ChessAI___pyx_scope_struct__reorder_capture_moves.tp_dictoffset && __pyx_type_7ChessAI___pyx_scope_struct__reorder_capture_moves.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7ChessAI___pyx_scope_struct__reorder_capture_moves.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_7ChessAI___pyx_scope_struct__reorder_capture_moves = &__pyx_type_7ChessAI___pyx_scope_struct__reorder_capture_moves;
  if (PyType_Ready(&__pyx_type_7ChessAI___pyx_scope_struct_1_non_quiescence_moves) < 0) __PYX_ERR(0, 1403, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7ChessAI___pyx_scope_struct_1_non_quiescence_moves.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7ChessAI___pyx_scope_struct_1_non_quiescence_moves.tp_dictoffset && __pyx_type_7ChessAI___pyx_scope_struct_1_non_quiescence_moves.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7ChessAI___pyx_scope_struct_1_non_quiescence_moves.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_7ChessAI___pyx_scope_struct_1_non_quiescence_moves = &__pyx_type_7ChessAI___pyx_scope_struct_1_non_quiescence_moves;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_0_29_36(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("array"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_5array_array = __Pyx_ImportType_0_29_36(__pyx_t_1, "array", "array", sizeof(arrayobject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(arrayobject),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_7cpython_5array_array) __PYX_ERR(2, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyArray_Descr),__Pyx_ImportType_CheckSize_Ignore_0_29_36); if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(3, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyArrayIterObject),__Pyx_ImportType_CheckSize_Ignore_0_29_36); if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(3, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyArrayMultiIterObject),__Pyx_ImportType_CheckSize_Ignore_0_29_36); if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(3, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyArrayObject),__Pyx_ImportType_CheckSize_Ignore_0_29_36); if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(3, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_5numpy_generic) __PYX_ERR(3, 767, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "number", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_5numpy_number) __PYX_ERR(3, 769, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_5numpy_integer) __PYX_ERR(3, 771, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(3, 773, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(3, 775, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(3, 777, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_5numpy_floating) __PYX_ERR(3, 779, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(3, 781, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(3, 783, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "character", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_5numpy_character) __PYX_ERR(3, 785, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyUFuncObject),__Pyx_ImportType_CheckSize_Ignore_0_29_36); if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(3, 824, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initChessAI(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initChessAI(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_ChessAI(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_ChessAI(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_ChessAI(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'ChessAI' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_ChessAI(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("ChessAI", __pyx_methods, __pyx_k_Created_on_Tue_Jul_30_16_32_26, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_ChessAI) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "ChessAI")) {
      if (unlikely(PyDict_SetItemString(modules, "ChessAI", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "ChessAI - Copy.pyx":7
 * @author: Kumodth
 * """
 * import chess  # Use regular import for Python libraries             # <<<<<<<<<<<<<<
 * cimport cython  # Import Cython-specific utilities
 * from cython cimport boundscheck, wraparound
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_chess, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_chess, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":10
 * cimport cython  # Import Cython-specific utilities
 * from cython cimport boundscheck, wraparound
 * import json             # <<<<<<<<<<<<<<
 * import marshal
 * import moveSchema_pb2  # Import the generated code
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_json, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_json, __pyx_t_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":11
 * from cython cimport boundscheck, wraparound
 * import json
 * import marshal             # <<<<<<<<<<<<<<
 * import moveSchema_pb2  # Import the generated code
 * from libc.stdlib cimport malloc, free
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_marshal, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_marshal, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":12
 * import json
 * import marshal
 * import moveSchema_pb2  # Import the generated code             # <<<<<<<<<<<<<<
 * from libc.stdlib cimport malloc, free
 * from libc.string cimport memset
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_moveSchema_pb2, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_moveSchema_pb2, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":16
 * from libc.string cimport memset
 * from cpython.array cimport array
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as cnp
 * from libcpp cimport bool
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":20
 * from libcpp cimport bool
 * from cython.parallel import prange
 * from chess import Board             # <<<<<<<<<<<<<<
 * from chess import Move
 * import chess.polyglot
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Board);
  __Pyx_GIVEREF(__pyx_n_s_Board);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Board);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_chess, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Board); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Board, __pyx_t_1) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ChessAI - Copy.pyx":21
 * from cython.parallel import prange
 * from chess import Board
 * from chess import Move             # <<<<<<<<<<<<<<
 * import chess.polyglot
 * from cython cimport nogil
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Move_2);
  __Pyx_GIVEREF(__pyx_n_s_Move_2);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Move_2);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_chess, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Move_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Move_2, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":22
 * from chess import Board
 * from chess import Move
 * import chess.polyglot             # <<<<<<<<<<<<<<
 * from cython cimport nogil
 * from joblib import Parallel, delayed
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_chess_polyglot, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_chess, __pyx_t_1) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":24
 * import chess.polyglot
 * from cython cimport nogil
 * from joblib import Parallel, delayed             # <<<<<<<<<<<<<<
 * from numba import njit
 * from timeit import default_timer as timer
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Parallel);
  __Pyx_GIVEREF(__pyx_n_s_Parallel);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Parallel);
  __Pyx_INCREF(__pyx_n_s_delayed);
  __Pyx_GIVEREF(__pyx_n_s_delayed);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_delayed);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_joblib, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Parallel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Parallel, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_delayed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_delayed, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ChessAI - Copy.pyx":25
 * from cython cimport nogil
 * from joblib import Parallel, delayed
 * from numba import njit             # <<<<<<<<<<<<<<
 * from timeit import default_timer as timer
 * from functools import lru_cache
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_njit);
  __Pyx_GIVEREF(__pyx_n_s_njit);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_njit);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numba, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_njit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_njit, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":26
 * from joblib import Parallel, delayed
 * from numba import njit
 * from timeit import default_timer as timer             # <<<<<<<<<<<<<<
 * from functools import lru_cache
 * import Cython_Chess
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_default_timer);
  __Pyx_GIVEREF(__pyx_n_s_default_timer);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_default_timer);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_timeit, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_default_timer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_timer, __pyx_t_1) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ChessAI - Copy.pyx":27
 * from numba import njit
 * from timeit import default_timer as timer
 * from functools import lru_cache             # <<<<<<<<<<<<<<
 * import Cython_Chess
 * import multiprocessing
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_lru_cache);
  __Pyx_GIVEREF(__pyx_n_s_lru_cache);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_lru_cache);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_functools, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_lru_cache); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lru_cache, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":28
 * from timeit import default_timer as timer
 * from functools import lru_cache
 * import Cython_Chess             # <<<<<<<<<<<<<<
 * import multiprocessing
 * import time
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_Cython_Chess, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Cython_Chess, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":29
 * from functools import lru_cache
 * import Cython_Chess
 * import multiprocessing             # <<<<<<<<<<<<<<
 * import time
 * import itertools
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_multiprocessing, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_multiprocessing, __pyx_t_1) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":30
 * import Cython_Chess
 * import multiprocessing
 * import time             # <<<<<<<<<<<<<<
 * import itertools
 * from typing import Iterator
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":31
 * import multiprocessing
 * import time
 * import itertools             # <<<<<<<<<<<<<<
 * from typing import Iterator
 * import tensorflow as tf
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_itertools, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itertools, __pyx_t_1) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":32
 * import time
 * import itertools
 * from typing import Iterator             # <<<<<<<<<<<<<<
 * import tensorflow as tf
 * from tensorflow.keras.models import Model
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Iterator);
  __Pyx_GIVEREF(__pyx_n_s_Iterator);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Iterator);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Iterator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Iterator, __pyx_t_1) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ChessAI - Copy.pyx":33
 * import itertools
 * from typing import Iterator
 * import tensorflow as tf             # <<<<<<<<<<<<<<
 * from tensorflow.keras.models import Model
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_tensorflow, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tf, __pyx_t_2) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ChessAI - Copy.pyx":34
 * from typing import Iterator
 * import tensorflow as tf
 * from tensorflow.keras.models import Model             # <<<<<<<<<<<<<<
 * 
 * # Import data structures from the c++ standard library
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Model);
  __Pyx_GIVEREF(__pyx_n_s_Model);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Model);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_tensorflow_keras_models, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Model); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Model, __pyx_t_2) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":88
 * 
 * cdef uint64_t prevKings
 * cdef int blackCastledIndex = -1             # <<<<<<<<<<<<<<
 * cdef int whiteCastledIndex = -1
 * 
 */
  __pyx_v_7ChessAI_blackCastledIndex = -1;

  /* "ChessAI - Copy.pyx":89
 * cdef uint64_t prevKings
 * cdef int blackCastledIndex = -1
 * cdef int whiteCastledIndex = -1             # <<<<<<<<<<<<<<
 * 
 * cdef object white_ksc = chess.Move.from_uci('e1g1')
 */
  __pyx_v_7ChessAI_whiteCastledIndex = -1;

  /* "ChessAI - Copy.pyx":91
 * cdef int whiteCastledIndex = -1
 * 
 * cdef object white_ksc = chess.Move.from_uci('e1g1')             # <<<<<<<<<<<<<<
 * cdef object white_qsc = chess.Move.from_uci('e1c1')
 * cdef object black_ksc = chess.Move.from_uci('e8g8')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_chess); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Move_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_from_uci); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_v_7ChessAI_white_ksc);
  __Pyx_DECREF_SET(__pyx_v_7ChessAI_white_ksc, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ChessAI - Copy.pyx":92
 * 
 * cdef object white_ksc = chess.Move.from_uci('e1g1')
 * cdef object white_qsc = chess.Move.from_uci('e1c1')             # <<<<<<<<<<<<<<
 * cdef object black_ksc = chess.Move.from_uci('e8g8')
 * cdef object black_qsc = chess.Move.from_uci('e8c8')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_chess); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Move_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_from_uci); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_XGOTREF(__pyx_v_7ChessAI_white_qsc);
  __Pyx_DECREF_SET(__pyx_v_7ChessAI_white_qsc, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":93
 * cdef object white_ksc = chess.Move.from_uci('e1g1')
 * cdef object white_qsc = chess.Move.from_uci('e1c1')
 * cdef object black_ksc = chess.Move.from_uci('e8g8')             # <<<<<<<<<<<<<<
 * cdef object black_qsc = chess.Move.from_uci('e8c8')
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_chess); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Move_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_from_uci); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_v_7ChessAI_black_ksc);
  __Pyx_DECREF_SET(__pyx_v_7ChessAI_black_ksc, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ChessAI - Copy.pyx":94
 * cdef object white_qsc = chess.Move.from_uci('e1c1')
 * cdef object black_ksc = chess.Move.from_uci('e8g8')
 * cdef object black_qsc = chess.Move.from_uci('e8c8')             # <<<<<<<<<<<<<<
 * 
 * cdef int values[7]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_chess); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Move_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_from_uci); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_XGOTREF(__pyx_v_7ChessAI_black_qsc);
  __Pyx_DECREF_SET(__pyx_v_7ChessAI_black_qsc, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ChessAI - Copy.pyx":97
 * 
 * cdef int values[7]
 * values[0] = 0      # No piece             # <<<<<<<<<<<<<<
 * values[1] = 1000   # Pawn
 * values[2] = 3150   # Knight
 */
  (__pyx_v_7ChessAI_values[0]) = 0;

  /* "ChessAI - Copy.pyx":98
 * cdef int values[7]
 * values[0] = 0      # No piece
 * values[1] = 1000   # Pawn             # <<<<<<<<<<<<<<
 * values[2] = 3150   # Knight
 * values[3] = 3250   # Bishop
 */
  (__pyx_v_7ChessAI_values[1]) = 0x3E8;

  /* "ChessAI - Copy.pyx":99
 * values[0] = 0      # No piece
 * values[1] = 1000   # Pawn
 * values[2] = 3150   # Knight             # <<<<<<<<<<<<<<
 * values[3] = 3250   # Bishop
 * values[4] = 5000   # Rook
 */
  (__pyx_v_7ChessAI_values[2]) = 0xC4E;

  /* "ChessAI - Copy.pyx":100
 * values[1] = 1000   # Pawn
 * values[2] = 3150   # Knight
 * values[3] = 3250   # Bishop             # <<<<<<<<<<<<<<
 * values[4] = 5000   # Rook
 * values[5] = 9000   # Queen
 */
  (__pyx_v_7ChessAI_values[3]) = 0xCB2;

  /* "ChessAI - Copy.pyx":101
 * values[2] = 3150   # Knight
 * values[3] = 3250   # Bishop
 * values[4] = 5000   # Rook             # <<<<<<<<<<<<<<
 * values[5] = 9000   # Queen
 * values[6] = 0      # King
 */
  (__pyx_v_7ChessAI_values[4]) = 0x1388;

  /* "ChessAI - Copy.pyx":102
 * values[3] = 3250   # Bishop
 * values[4] = 5000   # Rook
 * values[5] = 9000   # Queen             # <<<<<<<<<<<<<<
 * values[6] = 0      # King
 * 
 */
  (__pyx_v_7ChessAI_values[5]) = 0x2328;

  /* "ChessAI - Copy.pyx":103
 * values[4] = 5000   # Rook
 * values[5] = 9000   # Queen
 * values[6] = 0      # King             # <<<<<<<<<<<<<<
 * 
 * # Define class for the chess engine
 */
  (__pyx_v_7ChessAI_values[6]) = 0;

  /* "ChessAI - Copy.pyx":1
 * # -*- coding: utf-8 -*-             # <<<<<<<<<<<<<<
 * """
 * Created on Tue Jul 30 16:32:26 2024
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../../../../../home/ranuja/anaconda3/lib/python3.11/site-packages/numpy/__init__.pxd":1011
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init ChessAI", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init ChessAI");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* pop */
static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L) {
    if (Py_TYPE(L) == &PySet_Type) {
        return PySet_Pop(L);
    }
    return __Pyx_PyObject_CallMethod0(L, __pyx_n_s_pop);
}
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L) {
    if (likely(PyList_GET_SIZE(L) > (((PyListObject*)L)->allocated >> 1))) {
        __Pyx_SET_SIZE(L, Py_SIZE(L) - 1);
        return PyList_GET_ITEM(L, PyList_GET_SIZE(L));
    }
    return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyList_Type_pop, L);
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* GetItemIntUnicode */
static CYTHON_INLINE Py_UCS4 __Pyx_GetItemInt_Unicode_Fast(PyObject* ustring, Py_ssize_t i,
                                                           int wraparound, int boundscheck) {
    Py_ssize_t length;
    if (unlikely(__Pyx_PyUnicode_READY(ustring) < 0)) return (Py_UCS4)-1;
    if (wraparound | boundscheck) {
        length = __Pyx_PyUnicode_GET_LENGTH(ustring);
        if (wraparound & unlikely(i < 0)) i += length;
        if ((!boundscheck) || likely(__Pyx_is_valid_index(i, length))) {
            return __Pyx_PyUnicode_READ_CHAR(ustring, i);
        } else {
            PyErr_SetString(PyExc_IndexError, "string index out of range");
            return (Py_UCS4)-1;
        }
    } else {
        return __Pyx_PyUnicode_READ_CHAR(ustring, i);
    }
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* PyIntFromDouble */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value) {
    if (value >= (double)LONG_MIN && value <= (double)LONG_MAX) {
        return PyInt_FromLong((long)value);
    }
    return PyLong_FromDouble(value);
}
#endif

/* SliceTupleAndList */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* SliceObject */
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(PyObject* obj, PyObject* value,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_ass_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_ass_slice(obj, cstart, cstop, value);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_ass_subscript))
#endif
    {
        int result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_ass_subscript(obj, py_slice, value);
#else
        result = value ? PyObject_SetItem(obj, py_slice, value) : PyObject_DelItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object does not support slice %.10s",
        Py_TYPE(obj)->tp_name, value ? "assignment" : "deletion");
bad:
    return -1;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* pop_index */
static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix) {
    PyObject *r;
    if (unlikely(!py_ix)) return NULL;
    r = __Pyx__PyObject_PopIndex(L, py_ix);
    Py_DECREF(py_ix);
    return r;
}
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix) {
    return __Pyx_PyObject_CallMethod1(L, __pyx_n_s_pop, py_ix);
}
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix) {
    Py_ssize_t size = PyList_GET_SIZE(L);
    if (likely(size > (((PyListObject*)L)->allocated >> 1))) {
        Py_ssize_t cix = ix;
        if (cix < 0) {
            cix += size;
        }
        if (likely(__Pyx_is_valid_index(cix, size))) {
            PyObject* v = PyList_GET_ITEM(L, cix);
            __Pyx_SET_SIZE(L, Py_SIZE(L) - 1);
            size -= 1;
            memmove(&PyList_GET_ITEM(L, cix), &PyList_GET_ITEM(L, cix+1), (size_t)(size-cix)*sizeof(PyObject*));
            return v;
        }
    }
    if (py_ix == Py_None) {
        return __Pyx__PyObject_PopNewIndex(L, PyInt_FromSsize_t(ix));
    } else {
        return __Pyx__PyObject_PopIndex(L, py_ix);
    }
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_0_29_36
#define __PYX_HAVE_RT_ImportType_0_29_36
static PyTypeObject *__Pyx_ImportType_0_29_36(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_36 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_0_29_36 && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_0_29_36 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE uint8_t __Pyx_PyInt_As_uint8_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint8_t neg_one = (uint8_t) -1, const_zero = (uint8_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint8_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint8_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint8_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint8_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint8_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint8_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) >= 2 * PyLong_SHIFT) {
                            return (uint8_t) (((((uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint8_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) >= 3 * PyLong_SHIFT) {
                            return (uint8_t) (((((((uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint8_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) >= 4 * PyLong_SHIFT) {
                            return (uint8_t) (((((((((uint8_t)digits[3]) << PyLong_SHIFT) | (uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint8_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint8_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint8_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint8_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint8_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint8_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint8_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint8_t) (((uint8_t)-1)*(((((uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint8_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint8_t) ((((((uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint8_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint8_t) (((uint8_t)-1)*(((((((uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint8_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint8_t) ((((((((uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint8_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint8_t) (((uint8_t)-1)*(((((((((uint8_t)digits[3]) << PyLong_SHIFT) | (uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint8_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint8_t) ((((((((((uint8_t)digits[3]) << PyLong_SHIFT) | (uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint8_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint8_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint8_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint8_t) -1;
        }
    } else {
        uint8_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint8_t) -1;
        val = __Pyx_PyInt_As_uint8_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint8_t");
    return (uint8_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint8_t");
    return (uint8_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
